import io, math;

struct Frame {
    num x1;
    num y1;
    num x2;
    num y2;

    void constructor(num x1, num y1, num x2, num y2) {
        self.x1 = x1;
        self.y1 = y1;
        self.x2 = x2;
        self.y2 = y2;
    }

    num getX() { return math:mid(self.x1,self.x2) }
    num getY() { return math:mid(self.y1,self.y2) }
    num getW() { return self.x2 - self.x1 }
    num getH() { return self.y2 - self.y1 }

    Arr<num:2> getTL() { return [self.x1,self.y2] }
    Arr<num:2> getT() { return [self.getX(),self.y2] }
    Arr<num:2> getTR() { return [self.x2,self.y2] }
    Arr<num:2> getL() { return [self.x1,self.getY()] }
    Arr<num:2> getM() { return [self.getX(),self.getY()] }
    Arr<num:2> getR() { return [self.x2,self.getY()] }
    Arr<num:2> getBL() { return [self.x1,self.y1] }
    Arr<num:2> getB() { return [self.getX(),self.y1] }
    Arr<num:2> getBR() { return [self.x2,self.y1] }

    str toString() {
        return "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"
    }
}

Frame getDefaultFrame() {
    screenSize = io:getScreenSize();
    return new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);
}
Frame cloneFrame(Frame original) {
    return new Frame(original.x1, original.y1, original.x2, original.y2);
}

struct Surface {
    str type;
    Frame frame;

    void constructor(str type = "pen", Frame frame = getDefaultFrame()) {
        self.type = type;
        self.frame = frame;
    }

    void clear() {
        if (self.type == "pen") {
            raw("pen clear");
            return;
        }

        io:throw("cannot use clear method on" + self.type + "surface");
    }
    void line(num x1, num y1, num x2, num y2, num w) {
        if (self.type == "pen") {
            raw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");
            return;
        }

        io:throw("cannot use line method on" + self.type + "surface");
    }

    void path(Arr<Arr<num:2>> points, num w, bool loop = false) {
        num len = points.length;
        if (!loop) {
            len -= 1;
        }
        for (i, len) {
            Arr<num:2> point = points[i];
            Arr<num:2> npoint = points[i + 1 % points.length];
            self.line(point[0], point[1], npoint[0], npoint[1], w);
        }
    }
    void tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {
        if (self.type == "pen") {
            raw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");
            return;
        }

        io:throw("cannot use tri method on" + self.type + "surface");
    }
    void quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {
        /*
        2     4
        |  \  |
        1     3
        */
        self.tri(x1,y1, x2,y2, x3,y3, border);
        self.tri(x2,y2, x3,y3, x4,y4, border);
    }
    void rect(num x1, num y1, num x2, num y2, num border) {
        self.quad(
            x1, y1,
            x1, y2,
            x2, y1,
            x2, y2,
            border
        )
    }
    void square(num x, num y, num w, num h, num border) {
        halfW = w / 2;
        halfH = h / 2;
        self.quad(
            x - halfW, y - halfH,
            x - halfW, y + halfH,
            x + halfW, y - halfH,
            x + halfW, y + halfH,
            border
        );
    }
    void icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {
        if (self.type == "pen") {
            raw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");
            return;
        }

        io:throw("cannot use icon method on" + self.type + "surface");
    }
    void text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {
        if (self.type == "pen") {
            raw("pen text arg1 arg2 arg3 arg4 arg5 arg6");
            return;
        }

        io:throw("cannot use text method on" + self.type + "surface");
    }
    
    void loadFontFromUrl(str url) {
        if (self.type == "pen") {
            raw("pen loadfonturl arg1");
            return;
        }

        io:throw("cannot use loadFontFromUrl method on" + self.type + "surface");
    }
    void loadFontData(Obj<str> data) {
        if (self.type == "pen") {
            raw("pen loadfontdata arg1");
            return;
        }

        io:throw("cannot use loadFontData method on" + self.type + "surface");
    }
    
    void setColor(str color) {
        if (self.type == "pen") {
            raw("pen color arg1");
            return;
        }

        io:throw("cannot use setColor method on" + self.type + "surface");
    }
}

struct Display {
    Surface surface;

    void constructor(Frame frame) {
        self.surface = new Surface("pen", frame);
    }
}

struct GraphicsState {
    Surface drawSurface;
    Arr<Display> displays;

    void constructor() {
        self.newDisplay(getDefaultFrame());
        self.drawSurface = new Surface();
    }

    void newDisplay(Frame frame) {
        if (self?.displays) {
            self!.displays.append(new Display(frame));
        } else {
            self.displays = [new Display(frame)];
        }
    }
    void clearDisplays() {
        self.displays = [];
    }
}
