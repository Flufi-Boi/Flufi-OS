
#noAnyWarn;

struct CloneData {
    Obj<any> data;

    void constructor() {
        self.data = {};
    }

    auto set<t>(str key, t data) {
        self.data[key] = data;
        return data;
    }

    auto get<t>(str key, t data) {
        return self.data[key];
    }

    Obj<any> getData() {
        return self!.data;
    }
}

str _createClone(str type, str code, any data) {
    return raw("clone create arg2 arg1 arg0 .target");
}
str _killClone(str id) {
    return raw("clone kill arg0");
}
auto getCloneData<t>(str id) {
    return raw("clone getData .target arg1");
}

struct Clone {
    str id;

    void constructor(str type, str code, CloneData data) {
        self.id = _createClone(type,code,data.getData());
    }

    void kill() {
        _killClone(self!.id);
    }
    void continue() {
        d = getCloneData<Obj<any>>(self!.id);
        if (d) {
            d["continue"] = true;
        }
    }

    auto getCloneData<t>(str id) {
        return getCloneData<t>(id);
    }
}
