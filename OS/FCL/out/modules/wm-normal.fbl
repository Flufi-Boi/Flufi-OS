~ io:throw
// segment: raw("err arg0");
// execution: raw("err arg0")
err arg0
ret
~
~ io:getScreenSize
// segment: num width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];
// assignment: num width = raw("const screen_width .target")
// execution: raw("const screen_width .target")
const screen_width rand5
// assignment: num height = raw("const screen_height .target")
// execution: raw("const screen_height .target")
const screen_height rand6
// statement: return [width, height]
// array: [width, height]
set obj rand7 []
// variable: width
arr add rand7 rand5
// variable: height
arr add rand7 rand6
ret rand7
~
~ io:getCurrentMs
// segment: return raw("const ms .target");
// statement: return raw("const ms .target")
// execution: raw("const ms .target")
const ms rand10
ret rand10
~
~ math:sin
// statement: return raw("sin .target arg0")
// execution: raw("sin .target arg0")
sin rand14 arg0
ret rand14
~
~ math:cos
// statement: return raw("cos .target arg0")
// execution: raw("cos .target arg0")
cos rand18 arg0
ret rand18
~
~ math:tan
// statement: return raw("tan .target arg0")
// execution: raw("tan .target arg0")
tan rand22 arg0
ret rand22
~
~ math:round
// statement: return raw("round .target arg0")
// execution: raw("round .target arg0")
round rand26 arg0
ret rand26
~
~ math:floor
// statement: return raw("floor .target arg0")
// execution: raw("floor .target arg0")
floor rand30 arg0
ret rand30
~
~ math:ceiling
// statement: return raw("ceiling .target arg0")
// execution: raw("ceiling .target arg0")
ceiling rand34 arg0
ret rand34
~
~ math:lerp
// statement: return b - a * t + a
// operation: b - a * t + a
// operation: b-a*t
// operation: b-a
// argument: b
// argument: a
sub rand42 arg1 arg0
// argument: t
mul rand41 rand42 arg2
// argument: a
add rand40 rand41 arg0
ret rand40
~
~ math:mid
// statement: return a + b / 2
// operation: a + b / 2
// operation: a+b
// argument: a
// argument: b
add rand48 arg0 arg1
// number: 2
set num rand49 2
div rand47 rand48 rand49
ret rand47
~
~ graphics:getDefaultFrame
// segment: screenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);
// assignment: screenSize = io:getScreenSize()
// execution: io:getScreenSize()
callget rand54 io:getScreenSize 
// statement: return new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5)
// instance: new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5)
// operation: screenSize[0] * -.5
// key: screenSize[0]
// number: 0
set num rand59 0
// variable: screenSize
obj get rand54 rand57 rand59
set str rand60  doesnt exist on screenSize
add rand60 rand59 rand60
ernull rand57 rand60
// number: -.5
set num rand58 -0.5
mul rand56 rand57 rand58
// operation: screenSize[1] * -.5
// key: screenSize[1]
// number: 1
set num rand64 1
// variable: screenSize
obj get rand54 rand62 rand64
set str rand65  doesnt exist on screenSize
add rand65 rand64 rand65
ernull rand62 rand65
// number: -.5
set num rand63 -0.5
mul rand61 rand62 rand63
// operation: screenSize[0] * .5
// key: screenSize[0]
// number: 0
set num rand69 0
// variable: screenSize
obj get rand54 rand67 rand69
set str rand70  doesnt exist on screenSize
add rand70 rand69 rand70
ernull rand67 rand70
// number: .5
set num rand68 0.5
mul rand66 rand67 rand68
// operation: screenSize[1] * .5
// key: screenSize[1]
// number: 1
set num rand74 1
// variable: screenSize
obj get rand54 rand72 rand74
set str rand75  doesnt exist on screenSize
add rand75 rand74 rand75
ernull rand72 rand75
// number: .5
set num rand73 0.5
mul rand71 rand72 rand73
set obj rand55 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.x1 = x1;\\nself.y1 = y1;\\nself.x2 = x2;\\nself.y2 = y2;\n// assignment: self.x1 = x1\n// constant: self\n// attribute: self.x1\n// constant: self\nset str rand84 attributes\nobj get arg0 rand83 rand84\nset str rand84 x1\nobj get rand83 rand82 rand84\n// argument: x1\ndupe rand82 arg1\nobj set rand83 rand84 rand82\n// assignment: self.y1 = y1\n// constant: self\n// attribute: self.y1\n// constant: self\nset str rand87 attributes\nobj get arg0 rand86 rand87\nset str rand87 y1\nobj get rand86 rand85 rand87\n// argument: y1\ndupe rand85 arg2\nobj set rand86 rand87 rand85\n// assignment: self.x2 = x2\n// constant: self\n// attribute: self.x2\n// constant: self\nset str rand90 attributes\nobj get arg0 rand89 rand90\nset str rand90 x2\nobj get rand89 rand88 rand90\n// argument: x2\ndupe rand88 arg3\nobj set rand89 rand90 rand88\n// assignment: self.y2 = y2\n// constant: self\n// attribute: self.y2\n// constant: self\nset str rand93 attributes\nobj get arg0 rand92 rand93\nset str rand93 y2\nobj get rand92 rand91 rand93\n// argument: y2\ndupe rand91 arg4\nobj set rand92 rand93 rand91\nret\n~","getX":"~ mthd::getX:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.x1,self.x2)\n// execution: math:mid(self.x1,self.x2)\n// attribute: self.x1\n// constant: self\nset str rand97 attributes\nobj get arg0 rand96 rand97\nset str rand97 x1\nobj get rand96 rand95 rand97\nset str rand98 x1 attribute is null\nerrnull rand95 rand98\n// attribute: self.x2\n// constant: self\nset str rand101 attributes\nobj get arg0 rand100 rand101\nset str rand101 x2\nobj get rand100 rand99 rand101\nset str rand102 x2 attribute is null\nerrnull rand99 rand102\ncallget rand94 math:mid rand95 rand99\nret rand94\nret\n~","getY":"~ mthd::getY:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.y1,self.y2)\n// execution: math:mid(self.y1,self.y2)\n// attribute: self.y1\n// constant: self\nset str rand106 attributes\nobj get arg0 rand105 rand106\nset str rand106 y1\nobj get rand105 rand104 rand106\nset str rand107 y1 attribute is null\nerrnull rand104 rand107\n// attribute: self.y2\n// constant: self\nset str rand110 attributes\nobj get arg0 rand109 rand110\nset str rand110 y2\nobj get rand109 rand108 rand110\nset str rand111 y2 attribute is null\nerrnull rand108 rand111\ncallget rand103 math:mid rand104 rand108\nret rand103\nret\n~","getW":"~ mthd::getW:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.x2 - self.x1\n// operation: self.x2 - self.x1\n// attribute: self.x2\n// constant: self\nset str rand116 attributes\nobj get arg0 rand115 rand116\nset str rand116 x2\nobj get rand115 rand113 rand116\nset str rand117 x2 attribute is null\nerrnull rand113 rand117\n// attribute: self.x1\n// constant: self\nset str rand119 attributes\nobj get arg0 rand118 rand119\nset str rand119 x1\nobj get rand118 rand114 rand119\nset str rand120 x1 attribute is null\nerrnull rand114 rand120\nsub rand112 rand113 rand114\nret rand112\nret\n~","getH":"~ mthd::getH:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.y2 - self.y1\n// operation: self.y2 - self.y1\n// attribute: self.y2\n// constant: self\nset str rand125 attributes\nobj get arg0 rand124 rand125\nset str rand125 y2\nobj get rand124 rand122 rand125\nset str rand126 y2 attribute is null\nerrnull rand122 rand126\n// attribute: self.y1\n// constant: self\nset str rand128 attributes\nobj get arg0 rand127 rand128\nset str rand128 y1\nobj get rand127 rand123 rand128\nset str rand129 y1 attribute is null\nerrnull rand123 rand129\nsub rand121 rand122 rand123\nret rand121\nret\n~","getTL":"~ mthd::getTL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y2]\n// array: [self.x1,self.y2]\nset obj rand130 []\n// attribute: self.x1\n// constant: self\nset str rand133 attributes\nobj get arg0 rand132 rand133\nset str rand133 x1\nobj get rand132 rand131 rand133\nset str rand134 x1 attribute is null\nerrnull rand131 rand134\narr add rand130 rand131\n// attribute: self.y2\n// constant: self\nset str rand137 attributes\nobj get arg0 rand136 rand137\nset str rand137 y2\nobj get rand136 rand135 rand137\nset str rand138 y2 attribute is null\nerrnull rand135 rand138\narr add rand130 rand135\nret rand130\nret\n~","getT":"~ mthd::getT:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y2]\n// array: [self.getX(),self.y2]\nset obj rand139 []\n// method: self.getX()\n// constant: self\nset str rand142 methods\nobj get arg0 rand141 rand142\nset str rand142 getX\nobj get rand141 rand141 rand142\ncallgetvar rand140 rand141 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand139 rand140\n// attribute: self.y2\n// constant: self\nset str rand145 attributes\nobj get arg0 rand144 rand145\nset str rand145 y2\nobj get rand144 rand143 rand145\nset str rand146 y2 attribute is null\nerrnull rand143 rand146\narr add rand139 rand143\nret rand139\nret\n~","getTR":"~ mthd::getTR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y2]\n// array: [self.x2,self.y2]\nset obj rand147 []\n// attribute: self.x2\n// constant: self\nset str rand150 attributes\nobj get arg0 rand149 rand150\nset str rand150 x2\nobj get rand149 rand148 rand150\nset str rand151 x2 attribute is null\nerrnull rand148 rand151\narr add rand147 rand148\n// attribute: self.y2\n// constant: self\nset str rand154 attributes\nobj get arg0 rand153 rand154\nset str rand154 y2\nobj get rand153 rand152 rand154\nset str rand155 y2 attribute is null\nerrnull rand152 rand155\narr add rand147 rand152\nret rand147\nret\n~","getL":"~ mthd::getL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.getY()]\n// array: [self.x1,self.getY()]\nset obj rand156 []\n// attribute: self.x1\n// constant: self\nset str rand159 attributes\nobj get arg0 rand158 rand159\nset str rand159 x1\nobj get rand158 rand157 rand159\nset str rand160 x1 attribute is null\nerrnull rand157 rand160\narr add rand156 rand157\n// method: self.getY()\n// constant: self\nset str rand163 methods\nobj get arg0 rand162 rand163\nset str rand163 getY\nobj get rand162 rand162 rand163\ncallgetvar rand161 rand162 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand156 rand161\nret rand156\nret\n~","getM":"~ mthd::getM:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.getY()]\n// array: [self.getX(),self.getY()]\nset obj rand164 []\n// method: self.getX()\n// constant: self\nset str rand167 methods\nobj get arg0 rand166 rand167\nset str rand167 getX\nobj get rand166 rand166 rand167\ncallgetvar rand165 rand166 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand164 rand165\n// method: self.getY()\n// constant: self\nset str rand170 methods\nobj get arg0 rand169 rand170\nset str rand170 getY\nobj get rand169 rand169 rand170\ncallgetvar rand168 rand169 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand164 rand168\nret rand164\nret\n~","getR":"~ mthd::getR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.getY()]\n// array: [self.x2,self.getY()]\nset obj rand171 []\n// attribute: self.x2\n// constant: self\nset str rand174 attributes\nobj get arg0 rand173 rand174\nset str rand174 x2\nobj get rand173 rand172 rand174\nset str rand175 x2 attribute is null\nerrnull rand172 rand175\narr add rand171 rand172\n// method: self.getY()\n// constant: self\nset str rand178 methods\nobj get arg0 rand177 rand178\nset str rand178 getY\nobj get rand177 rand177 rand178\ncallgetvar rand176 rand177 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand171 rand176\nret rand171\nret\n~","getBL":"~ mthd::getBL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y1]\n// array: [self.x1,self.y1]\nset obj rand179 []\n// attribute: self.x1\n// constant: self\nset str rand182 attributes\nobj get arg0 rand181 rand182\nset str rand182 x1\nobj get rand181 rand180 rand182\nset str rand183 x1 attribute is null\nerrnull rand180 rand183\narr add rand179 rand180\n// attribute: self.y1\n// constant: self\nset str rand186 attributes\nobj get arg0 rand185 rand186\nset str rand186 y1\nobj get rand185 rand184 rand186\nset str rand187 y1 attribute is null\nerrnull rand184 rand187\narr add rand179 rand184\nret rand179\nret\n~","getB":"~ mthd::getB:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y1]\n// array: [self.getX(),self.y1]\nset obj rand188 []\n// method: self.getX()\n// constant: self\nset str rand191 methods\nobj get arg0 rand190 rand191\nset str rand191 getX\nobj get rand190 rand190 rand191\ncallgetvar rand189 rand190 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand188 rand189\n// attribute: self.y1\n// constant: self\nset str rand194 attributes\nobj get arg0 rand193 rand194\nset str rand194 y1\nobj get rand193 rand192 rand194\nset str rand195 y1 attribute is null\nerrnull rand192 rand195\narr add rand188 rand192\nret rand188\nret\n~","getBR":"~ mthd::getBR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y1]\n// array: [self.x2,self.y1]\nset obj rand196 []\n// attribute: self.x2\n// constant: self\nset str rand199 attributes\nobj get arg0 rand198 rand199\nset str rand199 x2\nobj get rand198 rand197 rand199\nset str rand200 x2 attribute is null\nerrnull rand197 rand200\narr add rand196 rand197\n// attribute: self.y1\n// constant: self\nset str rand203 attributes\nobj get arg0 rand202 rand203\nset str rand203 y1\nobj get rand202 rand201 rand203\nset str rand204 y1 attribute is null\nerrnull rand201 rand204\narr add rand196 rand201\nret rand196\nret\n~","toString":"~ mthd::toString:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2~++self.y2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"\n// operation: \"Frame{\"++self.x1~++self.y1\n// operation: \"Frame{\"++self.x1\n// string: \"Frame{\"\nset str rand216 Frame{\n// attribute: self.x1\n// constant: self\nset str rand219 attributes\nobj get arg0 rand218 rand219\nset str rand219 x1\nobj get rand218 rand217 rand219\nset str rand220 x1 attribute is null\nerrnull rand217 rand220\nadd rand214 emptystring rand216 rand217\n// attribute: self.y1\n// constant: self\nset str rand222 attributes\nobj get arg0 rand221 rand222\nset str rand222 y1\nobj get rand221 rand215 rand222\nset str rand223 y1 attribute is null\nerrnull rand215 rand223\nadd rand212 emptystring rand214 comma rand215\n// string: \"to\"\nset str rand213 to\nadd rand210 emptystring rand212 space rand213\n// attribute: self.x2\n// constant: self\nset str rand225 attributes\nobj get arg0 rand224 rand225\nset str rand225 x2\nobj get rand224 rand211 rand225\nset str rand226 x2 attribute is null\nerrnull rand211 rand226\nadd rand208 emptystring rand210 space rand211\n// attribute: self.y2\n// constant: self\nset str rand228 attributes\nobj get arg0 rand227 rand228\nset str rand228 y2\nobj get rand227 rand209 rand228\nset str rand229 y2 attribute is null\nerrnull rand209 rand229\nadd rand206 emptystring rand208 comma rand209\n// string: \"}\"\nset str rand207 }\nadd rand205 emptystring rand206 rand207\nret rand205\nret\n~"},"attributes":{}}
set str rand77 methods
obj get rand55 rand76 rand77
set str rand77 .cns
obj get rand76 rand76 rand77
callvar rand76 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand55 rand56 rand61 rand66 rand71
ret rand55
~
~ graphics:cloneFrame
// segment: return new Frame(original.x1, original.y1, original.x2, original.y2);
// statement: return new Frame(original.x1, original.y1, original.x2, original.y2)
// instance: new Frame(original.x1, original.y1, original.x2, original.y2)
// attribute: original.x1
// argument: original
set str rand236 attributes
obj get arg0 rand235 rand236
set str rand236 x1
obj get rand235 rand234 rand236
set str rand237 x1 attribute is null
errnull rand234 rand237
// attribute: original.y1
// argument: original
set str rand240 attributes
obj get arg0 rand239 rand240
set str rand240 y1
obj get rand239 rand238 rand240
set str rand241 y1 attribute is null
errnull rand238 rand241
// attribute: original.x2
// argument: original
set str rand244 attributes
obj get arg0 rand243 rand244
set str rand244 x2
obj get rand243 rand242 rand244
set str rand245 x2 attribute is null
errnull rand242 rand245
// attribute: original.y2
// argument: original
set str rand248 attributes
obj get arg0 rand247 rand248
set str rand248 y2
obj get rand247 rand246 rand248
set str rand249 y2 attribute is null
errnull rand246 rand249
set obj rand233 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.x1 = x1;\\nself.y1 = y1;\\nself.x2 = x2;\\nself.y2 = y2;\n// assignment: self.x1 = x1\n// constant: self\n// attribute: self.x1\n// constant: self\nset str rand258 attributes\nobj get arg0 rand257 rand258\nset str rand258 x1\nobj get rand257 rand256 rand258\n// argument: x1\ndupe rand256 arg1\nobj set rand257 rand258 rand256\n// assignment: self.y1 = y1\n// constant: self\n// attribute: self.y1\n// constant: self\nset str rand261 attributes\nobj get arg0 rand260 rand261\nset str rand261 y1\nobj get rand260 rand259 rand261\n// argument: y1\ndupe rand259 arg2\nobj set rand260 rand261 rand259\n// assignment: self.x2 = x2\n// constant: self\n// attribute: self.x2\n// constant: self\nset str rand264 attributes\nobj get arg0 rand263 rand264\nset str rand264 x2\nobj get rand263 rand262 rand264\n// argument: x2\ndupe rand262 arg3\nobj set rand263 rand264 rand262\n// assignment: self.y2 = y2\n// constant: self\n// attribute: self.y2\n// constant: self\nset str rand267 attributes\nobj get arg0 rand266 rand267\nset str rand267 y2\nobj get rand266 rand265 rand267\n// argument: y2\ndupe rand265 arg4\nobj set rand266 rand267 rand265\nret\n~","getX":"~ mthd::getX:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.x1,self.x2)\n// execution: math:mid(self.x1,self.x2)\n// attribute: self.x1\n// constant: self\nset str rand271 attributes\nobj get arg0 rand270 rand271\nset str rand271 x1\nobj get rand270 rand269 rand271\nset str rand272 x1 attribute is null\nerrnull rand269 rand272\n// attribute: self.x2\n// constant: self\nset str rand275 attributes\nobj get arg0 rand274 rand275\nset str rand275 x2\nobj get rand274 rand273 rand275\nset str rand276 x2 attribute is null\nerrnull rand273 rand276\ncallget rand268 math:mid rand269 rand273\nret rand268\nret\n~","getY":"~ mthd::getY:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.y1,self.y2)\n// execution: math:mid(self.y1,self.y2)\n// attribute: self.y1\n// constant: self\nset str rand280 attributes\nobj get arg0 rand279 rand280\nset str rand280 y1\nobj get rand279 rand278 rand280\nset str rand281 y1 attribute is null\nerrnull rand278 rand281\n// attribute: self.y2\n// constant: self\nset str rand284 attributes\nobj get arg0 rand283 rand284\nset str rand284 y2\nobj get rand283 rand282 rand284\nset str rand285 y2 attribute is null\nerrnull rand282 rand285\ncallget rand277 math:mid rand278 rand282\nret rand277\nret\n~","getW":"~ mthd::getW:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.x2 - self.x1\n// operation: self.x2 - self.x1\n// attribute: self.x2\n// constant: self\nset str rand290 attributes\nobj get arg0 rand289 rand290\nset str rand290 x2\nobj get rand289 rand287 rand290\nset str rand291 x2 attribute is null\nerrnull rand287 rand291\n// attribute: self.x1\n// constant: self\nset str rand293 attributes\nobj get arg0 rand292 rand293\nset str rand293 x1\nobj get rand292 rand288 rand293\nset str rand294 x1 attribute is null\nerrnull rand288 rand294\nsub rand286 rand287 rand288\nret rand286\nret\n~","getH":"~ mthd::getH:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.y2 - self.y1\n// operation: self.y2 - self.y1\n// attribute: self.y2\n// constant: self\nset str rand299 attributes\nobj get arg0 rand298 rand299\nset str rand299 y2\nobj get rand298 rand296 rand299\nset str rand300 y2 attribute is null\nerrnull rand296 rand300\n// attribute: self.y1\n// constant: self\nset str rand302 attributes\nobj get arg0 rand301 rand302\nset str rand302 y1\nobj get rand301 rand297 rand302\nset str rand303 y1 attribute is null\nerrnull rand297 rand303\nsub rand295 rand296 rand297\nret rand295\nret\n~","getTL":"~ mthd::getTL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y2]\n// array: [self.x1,self.y2]\nset obj rand304 []\n// attribute: self.x1\n// constant: self\nset str rand307 attributes\nobj get arg0 rand306 rand307\nset str rand307 x1\nobj get rand306 rand305 rand307\nset str rand308 x1 attribute is null\nerrnull rand305 rand308\narr add rand304 rand305\n// attribute: self.y2\n// constant: self\nset str rand311 attributes\nobj get arg0 rand310 rand311\nset str rand311 y2\nobj get rand310 rand309 rand311\nset str rand312 y2 attribute is null\nerrnull rand309 rand312\narr add rand304 rand309\nret rand304\nret\n~","getT":"~ mthd::getT:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y2]\n// array: [self.getX(),self.y2]\nset obj rand313 []\n// method: self.getX()\n// constant: self\nset str rand316 methods\nobj get arg0 rand315 rand316\nset str rand316 getX\nobj get rand315 rand315 rand316\ncallgetvar rand314 rand315 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand313 rand314\n// attribute: self.y2\n// constant: self\nset str rand319 attributes\nobj get arg0 rand318 rand319\nset str rand319 y2\nobj get rand318 rand317 rand319\nset str rand320 y2 attribute is null\nerrnull rand317 rand320\narr add rand313 rand317\nret rand313\nret\n~","getTR":"~ mthd::getTR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y2]\n// array: [self.x2,self.y2]\nset obj rand321 []\n// attribute: self.x2\n// constant: self\nset str rand324 attributes\nobj get arg0 rand323 rand324\nset str rand324 x2\nobj get rand323 rand322 rand324\nset str rand325 x2 attribute is null\nerrnull rand322 rand325\narr add rand321 rand322\n// attribute: self.y2\n// constant: self\nset str rand328 attributes\nobj get arg0 rand327 rand328\nset str rand328 y2\nobj get rand327 rand326 rand328\nset str rand329 y2 attribute is null\nerrnull rand326 rand329\narr add rand321 rand326\nret rand321\nret\n~","getL":"~ mthd::getL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.getY()]\n// array: [self.x1,self.getY()]\nset obj rand330 []\n// attribute: self.x1\n// constant: self\nset str rand333 attributes\nobj get arg0 rand332 rand333\nset str rand333 x1\nobj get rand332 rand331 rand333\nset str rand334 x1 attribute is null\nerrnull rand331 rand334\narr add rand330 rand331\n// method: self.getY()\n// constant: self\nset str rand337 methods\nobj get arg0 rand336 rand337\nset str rand337 getY\nobj get rand336 rand336 rand337\ncallgetvar rand335 rand336 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand330 rand335\nret rand330\nret\n~","getM":"~ mthd::getM:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.getY()]\n// array: [self.getX(),self.getY()]\nset obj rand338 []\n// method: self.getX()\n// constant: self\nset str rand341 methods\nobj get arg0 rand340 rand341\nset str rand341 getX\nobj get rand340 rand340 rand341\ncallgetvar rand339 rand340 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand338 rand339\n// method: self.getY()\n// constant: self\nset str rand344 methods\nobj get arg0 rand343 rand344\nset str rand344 getY\nobj get rand343 rand343 rand344\ncallgetvar rand342 rand343 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand338 rand342\nret rand338\nret\n~","getR":"~ mthd::getR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.getY()]\n// array: [self.x2,self.getY()]\nset obj rand345 []\n// attribute: self.x2\n// constant: self\nset str rand348 attributes\nobj get arg0 rand347 rand348\nset str rand348 x2\nobj get rand347 rand346 rand348\nset str rand349 x2 attribute is null\nerrnull rand346 rand349\narr add rand345 rand346\n// method: self.getY()\n// constant: self\nset str rand352 methods\nobj get arg0 rand351 rand352\nset str rand352 getY\nobj get rand351 rand351 rand352\ncallgetvar rand350 rand351 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand345 rand350\nret rand345\nret\n~","getBL":"~ mthd::getBL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y1]\n// array: [self.x1,self.y1]\nset obj rand353 []\n// attribute: self.x1\n// constant: self\nset str rand356 attributes\nobj get arg0 rand355 rand356\nset str rand356 x1\nobj get rand355 rand354 rand356\nset str rand357 x1 attribute is null\nerrnull rand354 rand357\narr add rand353 rand354\n// attribute: self.y1\n// constant: self\nset str rand360 attributes\nobj get arg0 rand359 rand360\nset str rand360 y1\nobj get rand359 rand358 rand360\nset str rand361 y1 attribute is null\nerrnull rand358 rand361\narr add rand353 rand358\nret rand353\nret\n~","getB":"~ mthd::getB:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y1]\n// array: [self.getX(),self.y1]\nset obj rand362 []\n// method: self.getX()\n// constant: self\nset str rand365 methods\nobj get arg0 rand364 rand365\nset str rand365 getX\nobj get rand364 rand364 rand365\ncallgetvar rand363 rand364 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand362 rand363\n// attribute: self.y1\n// constant: self\nset str rand368 attributes\nobj get arg0 rand367 rand368\nset str rand368 y1\nobj get rand367 rand366 rand368\nset str rand369 y1 attribute is null\nerrnull rand366 rand369\narr add rand362 rand366\nret rand362\nret\n~","getBR":"~ mthd::getBR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y1]\n// array: [self.x2,self.y1]\nset obj rand370 []\n// attribute: self.x2\n// constant: self\nset str rand373 attributes\nobj get arg0 rand372 rand373\nset str rand373 x2\nobj get rand372 rand371 rand373\nset str rand374 x2 attribute is null\nerrnull rand371 rand374\narr add rand370 rand371\n// attribute: self.y1\n// constant: self\nset str rand377 attributes\nobj get arg0 rand376 rand377\nset str rand377 y1\nobj get rand376 rand375 rand377\nset str rand378 y1 attribute is null\nerrnull rand375 rand378\narr add rand370 rand375\nret rand370\nret\n~","toString":"~ mthd::toString:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2~++self.y2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"\n// operation: \"Frame{\"++self.x1~++self.y1\n// operation: \"Frame{\"++self.x1\n// string: \"Frame{\"\nset str rand390 Frame{\n// attribute: self.x1\n// constant: self\nset str rand393 attributes\nobj get arg0 rand392 rand393\nset str rand393 x1\nobj get rand392 rand391 rand393\nset str rand394 x1 attribute is null\nerrnull rand391 rand394\nadd rand388 emptystring rand390 rand391\n// attribute: self.y1\n// constant: self\nset str rand396 attributes\nobj get arg0 rand395 rand396\nset str rand396 y1\nobj get rand395 rand389 rand396\nset str rand397 y1 attribute is null\nerrnull rand389 rand397\nadd rand386 emptystring rand388 comma rand389\n// string: \"to\"\nset str rand387 to\nadd rand384 emptystring rand386 space rand387\n// attribute: self.x2\n// constant: self\nset str rand399 attributes\nobj get arg0 rand398 rand399\nset str rand399 x2\nobj get rand398 rand385 rand399\nset str rand400 x2 attribute is null\nerrnull rand385 rand400\nadd rand382 emptystring rand384 space rand385\n// attribute: self.y2\n// constant: self\nset str rand402 attributes\nobj get arg0 rand401 rand402\nset str rand402 y2\nobj get rand401 rand383 rand402\nset str rand403 y2 attribute is null\nerrnull rand383 rand403\nadd rand380 emptystring rand382 comma rand383\n// string: \"}\"\nset str rand381 }\nadd rand379 emptystring rand380 rand381\nret rand379\nret\n~"},"attributes":{}}
set str rand251 methods
obj get rand233 rand250 rand251
set str rand251 .cns
obj get rand250 rand250 rand251
callvar rand250 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand233 rand234 rand238 rand242 rand246
ret rand233
~
~ input:getMouseX
// segment: return raw("const mousex .target");
// statement: return raw("const mousex .target")
// execution: raw("const mousex .target")
const mousex rand418
ret rand418
~
~ input:getMouseY
// segment: return raw("const mousey .target");
// statement: return raw("const mousey .target")
// execution: raw("const mousey .target")
const mousey rand421
ret rand421
~
~ input:getKeys
// segment: return raw("keyhistory getkeys .target");
// statement: return raw("keyhistory getkeys .target")
// execution: raw("keyhistory getkeys .target")
keyhistory getkeys rand424
ret rand424
~
~ input:shiftKeys
// segment: return raw("keyhistory shift .target");
// statement: return raw("keyhistory shift .target")
// execution: raw("keyhistory shift .target")
keyhistory shift rand427
ret rand427
~
~ input:getDown
// segment: return raw("keyhistory getdown .target");
// statement: return raw("keyhistory getdown .target")
// execution: raw("keyhistory getdown .target")
keyhistory getdown rand430
ret rand430
~
~ input:clearKeys
// segment: raw("keyhistory delkeys");
// execution: raw("keyhistory delkeys")
keyhistory delkeys
ret
~
~ input:isSpecialKey
// segment: specialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;
// assignment: specialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n]
// array: [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n]
set obj rand436 ["Backspace","Tab","Enter","Shift","Control","Alt","CapsLock","Escape","Space","PageUp","PageDown","End","Home","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Insert","Delete","Meta","ContextMenu","AltGraph","ScrollLock","NumLock","Pause","Clear","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12"]
// arg_branch: if (specialChars.contains(key)) {\nreturn true;\n}
// method: specialChars.contains(key)
// variable: specialChars
// argument: key
arr has rand437 rand436 arg0
jn rand438 rand437
// segment: return true;
// statement: return true
// constant: true
set bool rand440 true
ret rand440
: rand438
// statement: return false
// constant: false
set bool rand441 false
ret rand441
~
~ state:getDefault
// segment: return new State();
// statement: return new State()
// instance: new State()
set obj rand452 {"methods":{},"attributes":{"type":"terminal","wait":0}}
set str rand455 attributes
obj get rand452 rand456 rand455
// constant: false
set bool rand457 false
set str rand458 needsInit
obj set rand456 rand458 rand457
// instance: new TimeState()
set obj rand459 {"methods":{"update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.current = io:getCurrentMs();\\nself.uptime = self.current - self.start;\n// assignment: self.current = io:getCurrentMs()\n// constant: self\n// attribute: self.current\n// constant: self\nset str rand465 attributes\nobj get arg0 rand464 rand465\nset str rand465 current\nobj get rand464 rand463 rand465\n// execution: io:getCurrentMs()\ncallget rand463 io:getCurrentMs \nobj set rand464 rand465 rand463\n// assignment: self.uptime = self.current - self.start\n// constant: self\n// attribute: self.uptime\n// constant: self\nset str rand469 attributes\nobj get arg0 rand468 rand469\nset str rand469 uptime\nobj get rand468 rand467 rand469\n// operation: self.current-self.start\n// attribute: self.current\n// constant: self\nset str rand473 attributes\nobj get arg0 rand472 rand473\nset str rand473 current\nobj get rand472 rand470 rand473\n// attribute: self.start\n// constant: self\nset str rand475 attributes\nobj get arg0 rand474 rand475\nset str rand475 start\nobj get rand474 rand471 rand475\nsub rand467 rand470 rand471\nobj set rand468 rand469 rand467\nret\n~","updateFrame":"~ mthd::updateFrame:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.frame ++;\\nself.update();\n// assignment: self.frame ++\n// constant: self\n// attribute: self.frame\n// constant: self\nset str rand478 attributes\nobj get arg0 rand477 rand478\nset str rand478 frame\nobj get rand477 rand476 rand478\nset num rand480 1\nadd rand476 rand476 rand480\nobj set rand477 rand478 rand476\n// method: self.update()\n// constant: self\nset str rand483 methods\nobj get arg0 rand482 rand483\nset str rand483 update\nobj get rand482 rand482 rand483\ncallvar rand482 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 arg0 \nret\n~"},"attributes":{"frame":0,"uptime":0,"current":0}}
set str rand484 attributes
obj get rand459 rand485 rand484
// execution: io:getCurrentMs()
callget rand486 io:getCurrentMs 
set str rand487 start
obj set rand485 rand487 rand486
set str rand488 time
obj set rand456 rand488 rand459
// instance: new Config()
set obj rand489 {"methods":{},"attributes":{"fontUrl":"https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff","embeddedCommandChar":""}}
set str rand492 attributes
obj get rand489 rand493 rand492
// instance: new Theme()
set obj rand494 {"methods":{},"attributes":{"accent":"#a600ff","primary":"#1a1d28","secondary":"#313f4e","tertiary":"#4f617d","text":"#b3cbf9","background":"#090a0b","selected":"#0059ff"}}
set str rand497 theme
obj set rand493 rand497 rand494
set str rand498 config
obj set rand456 rand498 rand489
// instance: new InputState()
set obj rand499 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: clearKeys();\n// execution: clearKeys()\ncall input:clearKeys \nret\n~","update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.map.update();\n// method: self.map.update()\n// attribute: self.map\n// constant: self\nset str rand504 attributes\nobj get arg0 rand503 rand504\nset str rand504 map\nobj get rand503 rand502 rand504\nset str rand506 methods\nobj get rand502 rand505 rand506\nset str rand506 update\nobj get rand505 rand505 rand506\ncallvar rand505 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 rand502 \nret\n~"},"attributes":{}}
set str rand507 attributes
obj get rand499 rand508 rand507
// instance: new KeyMap()
set obj rand509 {"methods":{"update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: Arr<Obj<str>> keys = getKeys();\\nfor(i, keys.length) {\\nObj<str> key = shiftKeys();\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.keys.append(data);\\n} else {\\nself.special.append(data);\\n}\\n}\\n\\nself.downKeys = [];\\nself.downSpecial = [];\\nArr<Obj<str>> down = getDown();\\nfor (i, down.length) {\\nObj<str> key = down[i];\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n} else {\\nself.downSpecial.append(data);\\n}\\n}\n// assignment: Arr<Obj<str>> keys = getKeys()\n// execution: getKeys()\ncallget rand512 input:getKeys \n// arg_branch: for(i, keys.length) {\\nObj<str> key = shiftKeys();\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.keys.append(data);\\n} else {\\nself.special.append(data);\\n}\\n}\n// variable: i\nset num rand516 1\nset num rand517 0\n// attribute: keys.length\n// variable: keys\nlen rand513 rand512\n: rand514\nsml rand518 rand517 rand513\njn rand515 rand518\n// segment: Obj<str> key = shiftKeys();\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.keys.append(data);\\n} else {\\nself.special.append(data);\\n}\n// assignment: Obj<str> key = shiftKeys()\n// execution: shiftKeys()\ncallget rand519 input:shiftKeys \n// assignment: str data = key[\"data\"]\n// key: key[\"data\"]\n// string: \"data\"\nset str rand521 data\n// variable: key\nobj get rand519 rand520 rand521\nset str rand522  doesnt exist on key\nadd rand522 rand521 rand522\nernull rand520 rand522\n// arg_branch: if (!isSpecialKey(data)) {\\nself.keys.append(data);\\n}\n// operation: !isSpecialKey(data)\n// execution: isSpecialKey(data)\n// variable: data\ncallget rand524 input:isSpecialKey rand520\ninv rand523 rand524\njn rand525 rand523\n// segment: self.keys.append(data);\n// method: self.keys.append(data)\n// attribute: self.keys\n// constant: self\nset str rand529 attributes\nobj get arg0 rand528 rand529\nset str rand529 keys\nobj get rand528 rand527 rand529\n// variable: data\ndupe rand530 rand520\narr add rand527 rand530\n: rand525\njp rand532\n: rand525\n// segment: self.special.append(data);\n// method: self.special.append(data)\n// attribute: self.special\n// constant: self\nset str rand535 attributes\nobj get arg0 rand534 rand535\nset str rand535 special\nobj get rand534 rand533 rand535\n// variable: data\ndupe rand536 rand520\narr add rand533 rand536\n: rand532\njai rand514 rand517\n: rand515\n// assignment: self.downKeys = []\n// constant: self\n// attribute: self.downKeys\n// constant: self\nset str rand540 attributes\nobj get arg0 rand539 rand540\nset str rand540 downKeys\nobj get rand539 rand538 rand540\n// array: []\nset obj rand538 []\nobj set rand539 rand540 rand538\n// assignment: self.downSpecial = []\n// constant: self\n// attribute: self.downSpecial\n// constant: self\nset str rand544 attributes\nobj get arg0 rand543 rand544\nset str rand544 downSpecial\nobj get rand543 rand542 rand544\n// array: []\nset obj rand542 []\nobj set rand543 rand544 rand542\n// assignment: Arr<Obj<str>> down = getDown()\n// execution: getDown()\ncallget rand545 input:getDown \n// arg_branch: for (i, down.length) {\\nObj<str> key = down[i];\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n} else {\\nself.downSpecial.append(data);\\n}\\n}\n// variable: i\nset num rand549 1\nset num rand550 0\n// attribute: down.length\n// variable: down\nlen rand546 rand545\n: rand547\nsml rand551 rand550 rand546\njn rand548 rand551\n// segment: Obj<str> key = down[i];\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n} else {\\nself.downSpecial.append(data);\\n}\n// assignment: Obj<str> key = down[i]\n// key: down[i]\n// variable: i\n// variable: down\nobj get rand545 rand552 rand550\nset str rand553  doesnt exist on down\nadd rand553 rand550 rand553\nernull rand552 rand553\n// assignment: str data = key[\"data\"]\n// key: key[\"data\"]\n// string: \"data\"\nset str rand555 data\n// variable: key\nobj get rand552 rand554 rand555\nset str rand556  doesnt exist on key\nadd rand556 rand555 rand556\nernull rand554 rand556\n// arg_branch: if (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n}\n// operation: !isSpecialKey(data)\n// execution: isSpecialKey(data)\n// variable: data\ncallget rand558 input:isSpecialKey rand554\ninv rand557 rand558\njn rand559 rand557\n// segment: self.downKeys.append(data);\n// method: self.downKeys.append(data)\n// attribute: self.downKeys\n// constant: self\nset str rand563 attributes\nobj get arg0 rand562 rand563\nset str rand563 downKeys\nobj get rand562 rand561 rand563\n// variable: data\ndupe rand564 rand554\narr add rand561 rand564\n: rand559\njp rand566\n: rand559\n// segment: self.downSpecial.append(data);\n// method: self.downSpecial.append(data)\n// attribute: self.downSpecial\n// constant: self\nset str rand569 attributes\nobj get arg0 rand568 rand569\nset str rand569 downSpecial\nobj get rand568 rand567 rand569\n// variable: data\ndupe rand570 rand554\narr add rand567 rand570\n: rand566\njai rand547 rand550\n: rand548\nret\n~"},"attributes":{}}
set str rand571 attributes
obj get rand509 rand572 rand571
// array: []
set obj rand573 []
set str rand574 keys
obj set rand572 rand574 rand573
// array: []
set obj rand575 []
set str rand576 special
obj set rand572 rand576 rand575
// array: []
set obj rand577 []
set str rand578 downKeys
obj set rand572 rand578 rand577
// array: []
set obj rand579 []
set str rand580 downSpecial
obj set rand572 rand580 rand579
set str rand581 map
obj set rand508 rand581 rand509
set str rand501 methods
obj get rand499 rand500 rand501
set str rand501 .cns
obj get rand500 rand500 rand501
callvar rand500 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand499 
set str rand582 inputState
obj set rand456 rand582 rand499
ret rand452
~
~ utils:splitChar
// segment: Arr<str> tokens = [""];\n\n\nbool inDoubleQuotes = false;\n\n\nbool intactQuotes = rules.contains("intactQuotes");\n\nfor (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}\n\nreturn tokens;
// assignment: Arr<str> tokens = [""]
// array: [""]
set obj rand588 [""]
// assignment: bool inDoubleQuotes = false
// constant: false
set bool rand589 false
// assignment: bool intactQuotes = rules.contains("intactQuotes")
// method: rules.contains("intactQuotes")
// argument: rules
// string: "intactQuotes"
set str rand591 intactQuotes
arr has rand590 arg2 rand591
// arg_branch: for (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}
// variable: i
set num rand595 1
set num rand596 0
// attribute: text.length
// argument: text
len rand592 arg0
: rand593
sml rand597 rand596 rand592
jn rand594 rand597
// segment: str char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;
// assignment: str char = text[i]
// key: text[i]
// variable: i
// argument: text
obj get arg0 rand598 rand596
set str rand599  doesnt exist on text
add rand599 rand596 rand599
ernull rand598 rand599
// arg_branch: if (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}
// comparison: char == "\\"
// variable: char
// string: "\\"
set str rand601 \\
eql rand600 rand598 rand601
jn rand602 rand600
// segment: tokens[tokens.length-1] ++= char;\ncontinue;
// assignment: tokens[tokens.length-1] ++= char
// variable: tokens
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand605 rand588
// number: 1
set num rand606 1
sub rand604 rand605 rand606
// key: tokens[tokens.length-1]
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand609 rand588
// number: 1
set num rand610 1
sub rand608 rand609 rand610
// variable: tokens
obj get rand588 rand607 rand608
set str rand611  doesnt exist on tokens
add rand611 rand608 rand611
ernull rand607 rand611
// variable: char
dupe rand612 rand598
add rand598 emptystring rand598 rand612
obj set rand588 rand604 rand598
// statement: continue
jai rand593 rand596
: rand602
// arg_branch: if (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}
// variable: intactQuotes
jn rand614 rand590
// arg_branch: if (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}
// comparison: char == "\""
// variable: char
// string: "\""
set str rand617 "
eql rand616 rand598 rand617
jn rand618 rand616
// segment: inDoubleQuotes = !inDoubleQuotes;
// assignment: inDoubleQuotes = !inDoubleQuotes
// operation: !inDoubleQuotes
// variable: inDoubleQuotes
inv rand589 rand589
: rand618
: rand614
// arg_branch: if (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}
// operation: !inDoubleQuotes
// variable: inDoubleQuotes
inv rand620 rand589
jn rand621 rand620
// arg_branch: if (char == splitter) {\ntokens.append("");\ncontinue;\n}
// comparison: char == splitter
// variable: char
// argument: splitter
eql rand623 rand598 arg1
jn rand624 rand623
// segment: tokens.append("");\ncontinue;
// method: tokens.append("")
// variable: tokens
// string: ""
set str rand626 
arr add rand588 rand626
// statement: continue
jai rand593 rand596
: rand624
: rand621
// assignment: tokens[tokens.length-1] = tokens[tokens.length-1] ++ char
// variable: tokens
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand628 rand588
// number: 1
set num rand629 1
sub rand627 rand628 rand629
// operation: tokens[tokens.length-1]++char
// key: tokens[tokens.length-1]
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand633 rand588
// number: 1
set num rand634 1
sub rand632 rand633 rand634
// variable: tokens
obj get rand588 rand631 rand632
set str rand635  doesnt exist on tokens
add rand635 rand632 rand635
ernull rand631 rand635
// variable: char
add rand630 emptystring rand631 rand598
obj set rand588 rand627 rand630
jai rand593 rand596
: rand594
// statement: return tokens
// variable: tokens
ret rand588
~
~ utils:deEscape
// segment: str newStr = "";\nfor (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}\nreturn newStr;
// assignment: str newStr = ""
// string: ""
set str rand639 
// arg_branch: for (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}
// variable: i
set num rand643 1
set num rand644 0
// attribute: text.length
// argument: text
len rand640 arg0
: rand641
sml rand645 rand644 rand640
jn rand642 rand645
// segment: str char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}
// assignment: str char = text[i]
// key: text[i]
// variable: i
// argument: text
obj get arg0 rand646 rand644
set str rand647  doesnt exist on text
add rand647 rand644 rand647
ernull rand646 rand647
// arg_branch: if (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}
// comparison: char == "\\"
// variable: char
// string: "\\"
set str rand649 \\
eql rand648 rand646 rand649
jn rand650 rand648
// segment: char = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;
// assignment: char = text[i++]
// key: text[i++]
// assignment: i++
set num rand654 1
add rand644 rand644 rand654
dupe rand652 rand644
// argument: text
obj get arg0 rand646 rand652
set str rand655  doesnt exist on text
add rand655 rand652 rand655
ernull rand646 rand655
// arg_branch: if (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}
// comparison: char == "n"
// variable: char
// string: "n"
set str rand657 n
eql rand656 rand646 rand657
jn rand658 rand656
// segment: newStr ++= "\n";\ncontinue;
// assignment: newStr ++= "\n"
// string: "\n"
set str rand660 \n
add rand639 emptystring rand639 rand660
// statement: continue
jai rand641 rand644
: rand658
// assignment: newStr ++= char
// variable: char
dupe rand661 rand646
add rand639 emptystring rand639 rand661
// statement: continue
jai rand641 rand644
: rand650
jai rand641 rand644
: rand642
// statement: return newStr
// variable: newStr
ret rand639
~
~ utils:inBox
// segment: return x > x1 && y > y1 && x < x2 && y < y2;
// statement: return x > x1 && y > y1 && x < x2 && y < y2
// operation: x > x1 && y > y1 && x < x2 && y < y2
// operation: x > x1&&y > y1&&x < x2
// operation: x > x1&&y > y1
// comparison: x > x1
// argument: x
// argument: x1
gtr rand675 arg0 arg2
// comparison: y > y1
// argument: y
// argument: y1
gtr rand676 arg1 arg3
and rand673 rand675 rand676
// comparison: x < x2
// argument: x
// argument: x2
sml rand674 arg0 arg4
and rand671 rand673 rand674
// comparison: y < y2
// argument: y
// argument: y2
sml rand672 arg1 arg5
and rand670 rand671 rand672
ret rand670
~
~ updateButtons
// segment: num gap = miscData["buttonGap"];\n\nnum size = miscData["topbarHeight"] - miscData["borderRadius"];\nnum realSize = miscData["buttonSize"];\nnum space = size + gap;\n\nx = buttonFrame.x2 - (size / 2);\ny = buttonFrame.getY();\n\nbuttons = win.buttons;\nfor (i, buttons.length) {\nbuttons[i].update(x, y, realSize, theme, win, surface);\nx -= space;\n}
// assignment: num gap = miscData["buttonGap"]
// key: miscData["buttonGap"]
// string: "buttonGap"
set str rand693 buttonGap
// argument: miscData
obj get arg4 rand692 rand693
set str rand694  doesnt exist on miscData
add rand694 rand693 rand694
ernull rand692 rand694
// assignment: num size = miscData["topbarHeight"] - miscData["borderRadius"]
// operation: miscData["topbarHeight"]-miscData["borderRadius"]
// key: miscData["topbarHeight"]
// string: "topbarHeight"
set str rand698 topbarHeight
// argument: miscData
obj get arg4 rand696 rand698
set str rand699  doesnt exist on miscData
add rand699 rand698 rand699
ernull rand696 rand699
// key: miscData["borderRadius"]
// string: "borderRadius"
set str rand700 borderRadius
// argument: miscData
obj get arg4 rand697 rand700
set str rand701  doesnt exist on miscData
add rand701 rand700 rand701
ernull rand697 rand701
sub rand695 rand696 rand697
// assignment: num realSize = miscData["buttonSize"]
// key: miscData["buttonSize"]
// string: "buttonSize"
set str rand703 buttonSize
// argument: miscData
obj get arg4 rand702 rand703
set str rand704  doesnt exist on miscData
add rand704 rand703 rand704
ernull rand702 rand704
// assignment: num space = size + gap
// operation: size+gap
// variable: size
// variable: gap
add rand705 rand695 rand692
// assignment: x = buttonFrame.x2 - (size / 2)
// operation: buttonFrame.x2-(size / 2)
// attribute: buttonFrame.x2
// argument: buttonFrame
set str rand710 attributes
obj get arg1 rand709 rand710
set str rand710 x2
obj get rand709 rand707 rand710
set str rand711 x2 attribute is null
errnull rand707 rand711
// operation: (size / 2)
// variable: size
// number: 2
set num rand712 2
div rand708 rand695 rand712
sub rand706 rand707 rand708
// assignment: y = buttonFrame.getY()
// method: buttonFrame.getY()
// argument: buttonFrame
set str rand715 methods
obj get arg1 rand714 rand715
set str rand715 getY
obj get rand714 rand714 rand715
callgetvar rand713 rand714 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg1 
// assignment: buttons = win.buttons
// attribute: win.buttons
// argument: win
set str rand718 attributes
obj get arg2 rand717 rand718
set str rand718 buttons
obj get rand717 rand716 rand718
// arg_branch: for (i, buttons.length) {\nbuttons[i].update(x, y, realSize, theme, win, surface);\nx -= space;\n}
// variable: i
set num rand722 1
set num rand723 0
// attribute: buttons.length
// variable: buttons
len rand719 rand716
: rand720
sml rand724 rand723 rand719
jn rand721 rand724
// segment: buttons[i].update(x, y, realSize, theme, win, surface);\nx -= space;
// method: buttons[i].update(x, y, realSize, theme, win, surface)
// key: buttons[i]
// variable: i
// variable: buttons
obj get rand716 rand725 rand723
set str rand726  doesnt exist on buttons
add rand726 rand723 rand726
ernull rand725 rand726
// variable: x
// variable: y
// variable: realSize
// argument: theme
// argument: win
// argument: surface
set str rand728 methods
obj get rand725 rand727 rand728
set str rand728 update
obj get rand727 rand727 rand728
callvar rand727 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 rand725 rand706 rand713 rand702 arg0 arg2 arg3
// assignment: x -= space
// variable: space
dupe rand729 rand705
sub rand706 rand706 rand729
jai rand720 rand723
: rand721
ret
~
~ getButtonWidthX
// segment: num size = miscData["topbarHeight"] - miscData["borderRadius"];\nnum realSize = miscData["buttonSize"];\nnum gap = miscData["buttonGap"];\nnum space = size + gap;\n\nx = right - (size / 2);\n\nx -= win.buttons.length - 1 * space + size - 1.5;\n\nreturn x;
// assignment: num size = miscData["topbarHeight"] - miscData["borderRadius"]
// operation: miscData["topbarHeight"]-miscData["borderRadius"]
// key: miscData["topbarHeight"]
// string: "topbarHeight"
set str rand737 topbarHeight
// argument: miscData
obj get arg2 rand735 rand737
set str rand738  doesnt exist on miscData
add rand738 rand737 rand738
ernull rand735 rand738
// key: miscData["borderRadius"]
// string: "borderRadius"
set str rand739 borderRadius
// argument: miscData
obj get arg2 rand736 rand739
set str rand740  doesnt exist on miscData
add rand740 rand739 rand740
ernull rand736 rand740
sub rand734 rand735 rand736
// assignment: num realSize = miscData["buttonSize"]
// key: miscData["buttonSize"]
// string: "buttonSize"
set str rand742 buttonSize
// argument: miscData
obj get arg2 rand741 rand742
set str rand743  doesnt exist on miscData
add rand743 rand742 rand743
ernull rand741 rand743
// assignment: num gap = miscData["buttonGap"]
// key: miscData["buttonGap"]
// string: "buttonGap"
set str rand745 buttonGap
// argument: miscData
obj get arg2 rand744 rand745
set str rand746  doesnt exist on miscData
add rand746 rand745 rand746
ernull rand744 rand746
// assignment: num space = size + gap
// operation: size+gap
// variable: size
// variable: gap
add rand747 rand734 rand744
// assignment: x = right - (size / 2)
// operation: right-(size / 2)
// argument: right
// operation: (size / 2)
// variable: size
// number: 2
set num rand750 2
div rand749 rand734 rand750
sub rand748 arg0 rand749
// assignment: x -= win.buttons.length - 1 * space + size - 1.5
// operation: win.buttons.length-1*space+size-1.5
// operation: win.buttons.length-1*space+size
// operation: win.buttons.length-1*space
// operation: win.buttons.length-1
// attribute: win.buttons.length
// attribute: win.buttons
// argument: win
set str rand760 attributes
obj get arg1 rand759 rand760
set str rand760 buttons
obj get rand759 rand758 rand760
len rand756 rand758
// number: 1
set num rand757 1
sub rand755 rand756 rand757
// variable: space
mul rand754 rand755 rand747
// variable: size
add rand752 rand754 rand734
// number: 1.5
set num rand753 1.5
sub rand751 rand752 rand753
sub rand748 rand748 rand751
// statement: return x
// variable: x
ret rand748
~
~ updateTopbar
// segment: num borderRad = miscData["borderRadius"];\nnum height = miscData["topbarHeight"];\nnum textSize = 10;\n\nFrame topbarFrame = graphics:cloneFrame(winFrame);\ntopbarFrame.y1 = topbarFrame.y2 - height + borderRad;\n\nnum buttonSize = miscData["buttonSize"];\nnum buttonsX = getButtonWidthX(topbarFrame.x2, win, miscData);\n\n\nsurface.setColor(theme.primary);\nsurface.rect(topbarFrame.x1, topbarFrame.y1, topbarFrame.x2, topbarFrame.y2, borderRad);\n\nFrame titleFrame = graphics:cloneFrame(topbarFrame);\ntitleFrame.x2 = buttonsX;\n\n\n\n\nsurface.setColor(theme.text);\nsurface.text(win.title, textSize, titleFrame.getX() - (win.title.length * textSize * .5), titleFrame.getY() - 6.5);\n\n\nsurface.setColor(theme.secondary);\nsurface.path([\n[ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ],\n[ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ],\n], 2);\n\n\nFrame buttonFrame = graphics:cloneFrame(topbarFrame);\nbuttonFrame.x1 = titleFrame.x2;\nupdateButtons(theme, buttonFrame, win, surface, miscData);
// assignment: num borderRad = miscData["borderRadius"]
// key: miscData["borderRadius"]
// string: "borderRadius"
set str rand768 borderRadius
// argument: miscData
obj get arg4 rand767 rand768
set str rand769  doesnt exist on miscData
add rand769 rand768 rand769
ernull rand767 rand769
// assignment: num height = miscData["topbarHeight"]
// key: miscData["topbarHeight"]
// string: "topbarHeight"
set str rand771 topbarHeight
// argument: miscData
obj get arg4 rand770 rand771
set str rand772  doesnt exist on miscData
add rand772 rand771 rand772
ernull rand770 rand772
// assignment: num textSize = 10
// number: 10
set num rand773 10
// assignment: Frame topbarFrame = graphics:cloneFrame(winFrame)
// execution: graphics:cloneFrame(winFrame)
// argument: winFrame
callget rand774 graphics:cloneFrame arg1
// assignment: topbarFrame.y1 = topbarFrame.y2 - height + borderRad
// variable: topbarFrame
// attribute: topbarFrame.y1
// variable: topbarFrame
set str rand778 attributes
obj get rand774 rand777 rand778
set str rand778 y1
obj get rand777 rand776 rand778
// operation: topbarFrame.y2-height+borderRad
// operation: topbarFrame.y2-height
// attribute: topbarFrame.y2
// variable: topbarFrame
set str rand782 attributes
obj get rand774 rand781 rand782
set str rand782 y2
obj get rand781 rand780 rand782
set str rand783 y2 attribute is null
errnull rand780 rand783
// variable: height
sub rand779 rand780 rand770
// variable: borderRad
add rand776 rand779 rand767
obj set rand777 rand778 rand776
// assignment: num buttonSize = miscData["buttonSize"]
// key: miscData["buttonSize"]
// string: "buttonSize"
set str rand785 buttonSize
// argument: miscData
obj get arg4 rand784 rand785
set str rand786  doesnt exist on miscData
add rand786 rand785 rand786
ernull rand784 rand786
// assignment: num buttonsX = getButtonWidthX(topbarFrame.x2, win, miscData)
// execution: getButtonWidthX(topbarFrame.x2, win, miscData)
// attribute: topbarFrame.x2
// variable: topbarFrame
set str rand790 attributes
obj get rand774 rand789 rand790
set str rand790 x2
obj get rand789 rand788 rand790
set str rand791 x2 attribute is null
errnull rand788 rand791
// argument: win
// argument: miscData
callget rand787 getButtonWidthX rand788 arg2 arg4
// method: surface.setColor(theme.primary)
// argument: surface
// attribute: theme.primary
// argument: theme
set str rand796 attributes
obj get arg0 rand795 rand796
set str rand796 primary
obj get rand795 rand794 rand796
set str rand793 methods
obj get arg3 rand792 rand793
set str rand793 setColor
obj get rand792 rand792 rand793
callvar rand792 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 arg3 rand794
// method: surface.rect(topbarFrame.x1, topbarFrame.y1, topbarFrame.x2, topbarFrame.y2, borderRad)
// argument: surface
// attribute: topbarFrame.x1
// variable: topbarFrame
set str rand801 attributes
obj get rand774 rand800 rand801
set str rand801 x1
obj get rand800 rand799 rand801
set str rand802 x1 attribute is null
errnull rand799 rand802
// attribute: topbarFrame.y1
// variable: topbarFrame
set str rand805 attributes
obj get rand774 rand804 rand805
set str rand805 y1
obj get rand804 rand803 rand805
set str rand806 y1 attribute is null
errnull rand803 rand806
// attribute: topbarFrame.x2
// variable: topbarFrame
set str rand809 attributes
obj get rand774 rand808 rand809
set str rand809 x2
obj get rand808 rand807 rand809
set str rand810 x2 attribute is null
errnull rand807 rand810
// attribute: topbarFrame.y2
// variable: topbarFrame
set str rand813 attributes
obj get rand774 rand812 rand813
set str rand813 y2
obj get rand812 rand811 rand813
set str rand814 y2 attribute is null
errnull rand811 rand814
// variable: borderRad
set str rand798 methods
obj get arg3 rand797 rand798
set str rand798 rect
obj get rand797 rand797 rand798
callvar rand797 mthd::rect:1441a7909c087dbbe7ce59881b9df8b9 arg3 rand799 rand803 rand807 rand811 rand767
// assignment: Frame titleFrame = graphics:cloneFrame(topbarFrame)
// execution: graphics:cloneFrame(topbarFrame)
// variable: topbarFrame
callget rand815 graphics:cloneFrame rand774
// assignment: titleFrame.x2 = buttonsX
// variable: titleFrame
// attribute: titleFrame.x2
// variable: titleFrame
set str rand818 attributes
obj get rand815 rand817 rand818
set str rand818 x2
obj get rand817 rand816 rand818
// variable: buttonsX
dupe rand816 rand787
obj set rand817 rand818 rand816
// method: surface.setColor(theme.text)
// argument: surface
// attribute: theme.text
// argument: theme
set str rand823 attributes
obj get arg0 rand822 rand823
set str rand823 text
obj get rand822 rand821 rand823
set str rand820 methods
obj get arg3 rand819 rand820
set str rand820 setColor
obj get rand819 rand819 rand820
callvar rand819 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 arg3 rand821
// method: surface.text(win.title, textSize, titleFrame.getX() - (win.title.length * textSize * .5), titleFrame.getY() - 6.5)
// argument: surface
// attribute: win.title
// argument: win
set str rand828 attributes
obj get arg2 rand827 rand828
set str rand828 title
obj get rand827 rand826 rand828
// variable: textSize
// operation: titleFrame.getX() - (win.title.length * textSize * .5)
// method: titleFrame.getX()
// variable: titleFrame
set str rand833 methods
obj get rand815 rand832 rand833
set str rand833 getX
obj get rand832 rand832 rand833
callgetvar rand830 rand832 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 rand815 
// operation: (win.title.length * textSize * .5)
// operation: win.title.length*textSize
// attribute: win.title.length
// attribute: win.title
// argument: win
set str rand839 attributes
obj get arg2 rand838 rand839
set str rand839 title
obj get rand838 rand837 rand839
len rand836 rand837
// variable: textSize
mul rand834 rand836 rand773
// number: .5
set num rand835 0.5
mul rand831 rand834 rand835
sub rand829 rand830 rand831
// operation: titleFrame.getY() - 6.5
// method: titleFrame.getY()
// variable: titleFrame
set str rand844 methods
obj get rand815 rand843 rand844
set str rand844 getY
obj get rand843 rand843 rand844
callgetvar rand841 rand843 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 rand815 
// number: 6.5
set num rand842 6.5
sub rand840 rand841 rand842
// number: 90
set num rand845 90
// number: 0
set num rand846 0
set str rand825 methods
obj get arg3 rand824 rand825
set str rand825 text
obj get rand824 rand824 rand825
callvar rand824 mthd::text:1441a7909c087dbbe7ce59881b9df8b9 arg3 rand826 rand773 rand829 rand840 rand845 rand846
// method: surface.setColor(theme.secondary)
// argument: surface
// attribute: theme.secondary
// argument: theme
set str rand851 attributes
obj get arg0 rand850 rand851
set str rand851 secondary
obj get rand850 rand849 rand851
set str rand848 methods
obj get arg3 rand847 rand848
set str rand848 setColor
obj get rand847 rand847 rand848
callvar rand847 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 arg3 rand849
// method: surface.path([\n[ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ],\n[ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ],\n], 2)
// argument: surface
// array: [\n[ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ],\n[ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ],\n]
set obj rand854 []
// array: [ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ]
set obj rand855 []
// attribute: titleFrame.x2
// variable: titleFrame
set str rand858 attributes
obj get rand815 rand857 rand858
set str rand858 x2
obj get rand857 rand856 rand858
set str rand859 x2 attribute is null
errnull rand856 rand859
arr add rand855 rand856
// operation: titleFrame.y1 - half borderRad + 5
// operation: titleFrame.y1-half borderRad
// attribute: titleFrame.y1
// variable: titleFrame
set str rand866 attributes
obj get rand815 rand865 rand866
set str rand866 y1
obj get rand865 rand863 rand866
set str rand867 y1 attribute is null
errnull rand863 rand867
// statement: half borderRad
// variable: borderRad
set num rand868 2
div rand864 rand767 rand868
sub rand861 rand863 rand864
// number: 5
set num rand862 5
add rand860 rand861 rand862
arr add rand855 rand860
arr add rand854 rand855
// array: [ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ]
set obj rand869 []
// attribute: titleFrame.x2
// variable: titleFrame
set str rand872 attributes
obj get rand815 rand871 rand872
set str rand872 x2
obj get rand871 rand870 rand872
set str rand873 x2 attribute is null
errnull rand870 rand873
arr add rand869 rand870
// operation: titleFrame.y2 + half borderRad - 5
// operation: titleFrame.y2+half borderRad
// attribute: titleFrame.y2
// variable: titleFrame
set str rand880 attributes
obj get rand815 rand879 rand880
set str rand880 y2
obj get rand879 rand877 rand880
set str rand881 y2 attribute is null
errnull rand877 rand881
// statement: half borderRad
// variable: borderRad
set num rand882 2
div rand878 rand767 rand882
add rand875 rand877 rand878
// number: 5
set num rand876 5
sub rand874 rand875 rand876
arr add rand869 rand874
arr add rand854 rand869
// number: 2
set num rand883 2
// constant: false
set bool rand884 false
set str rand853 methods
obj get arg3 rand852 rand853
set str rand853 path
obj get rand852 rand852 rand853
callvar rand852 mthd::path:1441a7909c087dbbe7ce59881b9df8b9 arg3 rand854 rand883 rand884
// assignment: Frame buttonFrame = graphics:cloneFrame(topbarFrame)
// execution: graphics:cloneFrame(topbarFrame)
// variable: topbarFrame
callget rand885 graphics:cloneFrame rand774
// assignment: buttonFrame.x1 = titleFrame.x2
// variable: buttonFrame
// attribute: buttonFrame.x1
// variable: buttonFrame
set str rand889 attributes
obj get rand885 rand888 rand889
set str rand889 x1
obj get rand888 rand887 rand889
// attribute: titleFrame.x2
// variable: titleFrame
set str rand891 attributes
obj get rand815 rand890 rand891
set str rand891 x2
obj get rand890 rand887 rand891
set str rand892 x2 attribute is null
errnull rand887 rand892
obj set rand888 rand889 rand887
// execution: updateButtons(theme, buttonFrame, win, surface, miscData)
// argument: theme
// variable: buttonFrame
// argument: win
// argument: surface
// argument: miscData
call updateButtons arg0 rand885 arg2 arg3 arg4
ret
~
~ main
// branch: forever {\nSurface surface = graphicsState!.drawSurface;\nTheme theme = state.config.theme;\n\nsurface.clear();\n\nnum borderRadius = 15;\nnum borderThickness = 5;\n\nnum topbarHeight = 35;\nnum buttonSize = 13.5;\nnum buttonGap = 5;\n\nArr<str> winKeys = windows.keys();\nfor (i, winKeys.length) {\nstr winKey = winKeys[i];\nWindow win = windows[winKey];\nWindowRenderSettings settings = win.renderSettings;\nFrame frame = win.frame;\nwin.contentFrame = graphics:cloneFrame(win.frame);\nwin.contentFrame.y2 -= topbarHeight;\n\nif (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}\n\n\n\n\nif (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}\n}\n}
quitTo rand897
: rand897
// segment: Surface surface = graphicsState!.drawSurface;\nTheme theme = state.config.theme;\n\nsurface.clear();\n\nnum borderRadius = 15;\nnum borderThickness = 5;\n\nnum topbarHeight = 35;\nnum buttonSize = 13.5;\nnum buttonGap = 5;\n\nArr<str> winKeys = windows.keys();\nfor (i, winKeys.length) {\nstr winKey = winKeys[i];\nWindow win = windows[winKey];\nWindowRenderSettings settings = win.renderSettings;\nFrame frame = win.frame;\nwin.contentFrame = graphics:cloneFrame(win.frame);\nwin.contentFrame.y2 -= topbarHeight;\n\nif (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}\n\n\n\n\nif (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}\n}
// assignment: Surface surface = graphicsState!.drawSurface
// attribute: graphicsState!.drawSurface
// argument: graphicsState
set str rand900 attributes
obj get arg1 rand899 rand900
set str rand900 drawSurface
obj get rand899 rand898 rand900
// assignment: Theme theme = state.config.theme
// attribute: state.config.theme
// attribute: state.config
// argument: state
set str rand905 attributes
obj get arg0 rand904 rand905
set str rand905 config
obj get rand904 rand902 rand905
set str rand906 attributes
obj get rand902 rand903 rand906
set str rand906 theme
obj get rand903 rand901 rand906
// method: surface.clear()
// variable: surface
set str rand908 methods
obj get rand898 rand907 rand908
set str rand908 clear
obj get rand907 rand907 rand908
callvar rand907 mthd::clear:1441a7909c087dbbe7ce59881b9df8b9 rand898 
// assignment: num borderRadius = 15
// number: 15
set num rand909 15
// assignment: num borderThickness = 5
// number: 5
set num rand910 5
// assignment: num topbarHeight = 35
// number: 35
set num rand911 35
// assignment: num buttonSize = 13.5
// number: 13.5
set num rand912 13.5
// assignment: num buttonGap = 5
// number: 5
set num rand913 5
// assignment: Arr<str> winKeys = windows.keys()
// method: windows.keys()
// argument: windows
obj keys rand914 arg2
// arg_branch: for (i, winKeys.length) {\nstr winKey = winKeys[i];\nWindow win = windows[winKey];\nWindowRenderSettings settings = win.renderSettings;\nFrame frame = win.frame;\nwin.contentFrame = graphics:cloneFrame(win.frame);\nwin.contentFrame.y2 -= topbarHeight;\n\nif (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}\n\n\n\n\nif (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}\n}
// variable: i
set num rand918 1
set num rand919 0
// attribute: winKeys.length
// variable: winKeys
len rand915 rand914
: rand916
sml rand920 rand919 rand915
jn rand917 rand920
// segment: str winKey = winKeys[i];\nWindow win = windows[winKey];\nWindowRenderSettings settings = win.renderSettings;\nFrame frame = win.frame;\nwin.contentFrame = graphics:cloneFrame(win.frame);\nwin.contentFrame.y2 -= topbarHeight;\n\nif (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}\n\n\n\n\nif (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}
// assignment: str winKey = winKeys[i]
// key: winKeys[i]
// variable: i
// variable: winKeys
obj get rand914 rand921 rand919
set str rand922  doesnt exist on winKeys
add rand922 rand919 rand922
ernull rand921 rand922
// assignment: Window win = windows[winKey]
// key: windows[winKey]
// variable: winKey
// argument: windows
obj get arg2 rand923 rand921
set str rand924  doesnt exist on windows
add rand924 rand921 rand924
ernull rand923 rand924
// assignment: WindowRenderSettings settings = win.renderSettings
// attribute: win.renderSettings
// variable: win
set str rand927 attributes
obj get rand923 rand926 rand927
set str rand927 renderSettings
obj get rand926 rand925 rand927
// assignment: Frame frame = win.frame
// attribute: win.frame
// variable: win
set str rand930 attributes
obj get rand923 rand929 rand930
set str rand930 frame
obj get rand929 rand928 rand930
set str rand931 frame attribute is null
errnull rand928 rand931
// assignment: win.contentFrame = graphics:cloneFrame(win.frame)
// variable: win
// attribute: win.contentFrame
// variable: win
set str rand935 attributes
obj get rand923 rand934 rand935
set str rand935 contentFrame
obj get rand934 rand933 rand935
// execution: graphics:cloneFrame(win.frame)
// attribute: win.frame
// variable: win
set str rand938 attributes
obj get rand923 rand937 rand938
set str rand938 frame
obj get rand937 rand936 rand938
set str rand939 frame attribute is null
errnull rand936 rand939
callget rand933 graphics:cloneFrame rand936
obj set rand934 rand935 rand933
// assignment: win.contentFrame.y2 -= topbarHeight
// attribute: win.contentFrame
// variable: win
set str rand942 attributes
obj get rand923 rand941 rand942
set str rand942 contentFrame
obj get rand941 rand940 rand942
set str rand943 contentFrame attribute is null
errnull rand940 rand943
// attribute: win.contentFrame.y2
// attribute: win.contentFrame
// variable: win
set str rand948 attributes
obj get rand923 rand947 rand948
set str rand948 contentFrame
obj get rand947 rand945 rand948
set str rand949 contentFrame attribute is null
errnull rand945 rand949
set str rand950 attributes
obj get rand945 rand946 rand950
set str rand950 y2
obj get rand946 rand944 rand950
set str rand951 y2 attribute is null
errnull rand944 rand951
// variable: topbarHeight
dupe rand952 rand911
sub rand944 rand944 rand952
obj set rand946 rand950 rand944
// arg_branch: if (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}
// attribute: settings.renderBase
// variable: settings
set str rand956 attributes
obj get rand925 rand955 rand956
set str rand956 renderBase
obj get rand955 rand954 rand956
jn rand957 rand954
// segment: surface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);
// method: surface.setColor(theme.accent)
// variable: surface
// attribute: theme.accent
// variable: theme
set str rand963 attributes
obj get rand901 rand962 rand963
set str rand963 accent
obj get rand962 rand961 rand963
set str rand960 methods
obj get rand898 rand959 rand960
set str rand960 setColor
obj get rand959 rand959 rand960
callvar rand959 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 rand898 rand961
// method: surface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness)
// variable: surface
// attribute: frame.x1
// variable: frame
set str rand968 attributes
obj get rand928 rand967 rand968
set str rand968 x1
obj get rand967 rand966 rand968
set str rand969 x1 attribute is null
errnull rand966 rand969
// attribute: frame.y1
// variable: frame
set str rand972 attributes
obj get rand928 rand971 rand972
set str rand972 y1
obj get rand971 rand970 rand972
set str rand973 y1 attribute is null
errnull rand970 rand973
// attribute: frame.x2
// variable: frame
set str rand976 attributes
obj get rand928 rand975 rand976
set str rand976 x2
obj get rand975 rand974 rand976
set str rand977 x2 attribute is null
errnull rand974 rand977
// attribute: frame.y2
// variable: frame
set str rand980 attributes
obj get rand928 rand979 rand980
set str rand980 y2
obj get rand979 rand978 rand980
set str rand981 y2 attribute is null
errnull rand978 rand981
// operation: borderRadius + borderThickness
// variable: borderRadius
// variable: borderThickness
add rand982 rand909 rand910
set str rand965 methods
obj get rand898 rand964 rand965
set str rand965 rect
obj get rand964 rand964 rand965
callvar rand964 mthd::rect:1441a7909c087dbbe7ce59881b9df8b9 rand898 rand966 rand970 rand974 rand978 rand982
// method: surface.setColor(theme.background)
// variable: surface
// attribute: theme.background
// variable: theme
set str rand987 attributes
obj get rand901 rand986 rand987
set str rand987 background
obj get rand986 rand985 rand987
set str rand984 methods
obj get rand898 rand983 rand984
set str rand984 setColor
obj get rand983 rand983 rand984
callvar rand983 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 rand898 rand985
// method: surface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius)
// variable: surface
// attribute: frame.x1
// variable: frame
set str rand992 attributes
obj get rand928 rand991 rand992
set str rand992 x1
obj get rand991 rand990 rand992
set str rand993 x1 attribute is null
errnull rand990 rand993
// attribute: frame.y1
// variable: frame
set str rand996 attributes
obj get rand928 rand995 rand996
set str rand996 y1
obj get rand995 rand994 rand996
set str rand997 y1 attribute is null
errnull rand994 rand997
// attribute: frame.x2
// variable: frame
set str rand1000 attributes
obj get rand928 rand999 rand1000
set str rand1000 x2
obj get rand999 rand998 rand1000
set str rand1001 x2 attribute is null
errnull rand998 rand1001
// attribute: frame.y2
// variable: frame
set str rand1004 attributes
obj get rand928 rand1003 rand1004
set str rand1004 y2
obj get rand1003 rand1002 rand1004
set str rand1005 y2 attribute is null
errnull rand1002 rand1005
// variable: borderRadius
set str rand989 methods
obj get rand898 rand988 rand989
set str rand989 rect
obj get rand988 rand988 rand989
callvar rand988 mthd::rect:1441a7909c087dbbe7ce59881b9df8b9 rand898 rand990 rand994 rand998 rand1002 rand909
: rand957
// arg_branch: if (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}
// attribute: settings.renderMenuBar
// variable: settings
set str rand1008 attributes
obj get rand925 rand1007 rand1008
set str rand1008 renderMenuBar
obj get rand1007 rand1006 rand1008
jn rand1009 rand1006
// segment: updateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});
// execution: updateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n})
// variable: theme
// variable: frame
// variable: win
// variable: surface
// object: {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n}
set obj rand1011 {}
// variable: topbarHeight
set str rand1012 topbarHeight
obj set rand1011 rand1012 rand911
// variable: borderRadius
set str rand1013 borderRadius
obj set rand1011 rand1013 rand909
// variable: buttonSize
set str rand1014 buttonSize
obj set rand1011 rand1014 rand912
// variable: buttonGap
set str rand1015 buttonGap
obj set rand1011 rand1015 rand913
call updateTopbar rand901 rand928 rand923 rand898 rand1011
: rand1009
jai rand916 rand919
: rand917
quitTo rand897
ret
~
// segment: import graphics, state, window;\n\nvoid updateButtons(Theme theme, Frame buttonFrame, Window win, Surface surface, Obj<num> miscData) {\nnum gap = miscData["buttonGap"];\n\nnum size = miscData["topbarHeight"] - miscData["borderRadius"];\nnum realSize = miscData["buttonSize"];\nnum space = size + gap;\n\nx = buttonFrame.x2 - (size / 2);\ny = buttonFrame.getY();\n\nbuttons = win.buttons;\nfor (i, buttons.length) {\nbuttons[i].update(x, y, realSize, theme, win, surface);\nx -= space;\n}\n}\n\nnum getButtonWidthX(num right, Window win, Obj<num> miscData) {\nnum size = miscData["topbarHeight"] - miscData["borderRadius"];\nnum realSize = miscData["buttonSize"];\nnum gap = miscData["buttonGap"];\nnum space = size + gap;\n\nx = right - (size / 2);\n\nx -= win.buttons.length - 1 * space + size - 1.5;\n\nreturn x;\n}\n\nvoid updateTopbar(Theme theme, Frame winFrame, Window win, Surface surface, Obj<num> miscData) {\nnum borderRad = miscData["borderRadius"];\nnum height = miscData["topbarHeight"];\nnum textSize = 10;\n\nFrame topbarFrame = graphics:cloneFrame(winFrame);\ntopbarFrame.y1 = topbarFrame.y2 - height + borderRad;\n\nnum buttonSize = miscData["buttonSize"];\nnum buttonsX = getButtonWidthX(topbarFrame.x2, win, miscData);\n\n\nsurface.setColor(theme.primary);\nsurface.rect(topbarFrame.x1, topbarFrame.y1, topbarFrame.x2, topbarFrame.y2, borderRad);\n\nFrame titleFrame = graphics:cloneFrame(topbarFrame);\ntitleFrame.x2 = buttonsX;\n\n/*\nsurface.setColor("#f00");\nsurface.path([\n[topbarFrame.x1, topbarFrame.y1],\n[topbarFrame.x2, topbarFrame.y1],\n[topbarFrame.x2, topbarFrame.y2],\n[topbarFrame.x1, topbarFrame.y2]\n], 1, true);\nsurface.setColor("#0f0");\nsurface.path([\n[titleFrame.x1, titleFrame.y1],\n[titleFrame.x2, titleFrame.y1],\n[titleFrame.x2, titleFrame.y2],\n[titleFrame.x1, titleFrame.y2]\n], 1, true);\n*/\n\n// title\nsurface.setColor(theme.text);\nsurface.text(win.title, textSize, titleFrame.getX() - (win.title.length * textSize * .5), titleFrame.getY() - 6.5);\n\n// seperator\nsurface.setColor(theme.secondary);\nsurface.path([\n[ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ],\n[ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ],\n], 2);\n\n// buttons\nFrame buttonFrame = graphics:cloneFrame(topbarFrame);\nbuttonFrame.x1 = titleFrame.x2;\nupdateButtons(theme, buttonFrame, win, surface, miscData);\n}\n\nvoid main(State state, GraphicsState graphicsState, Obj<Window> windows) {\nforever {\nSurface surface = graphicsState!.drawSurface;\nTheme theme = state.config.theme;\n\nsurface.clear();\n\nnum borderRadius = 15; // 15\nnum borderThickness = 5; // 5\n\nnum topbarHeight = 35; // 35\nnum buttonSize = 13.5; // 13.5\nnum buttonGap = 5;\n\nArr<str> winKeys = windows.keys();\nfor (i, winKeys.length) {\nstr winKey = winKeys[i];\nWindow win = windows[winKey];\nWindowRenderSettings settings = win.renderSettings;\nFrame frame = win.frame;\nwin.contentFrame = graphics:cloneFrame(win.frame);\nwin.contentFrame.y2 -= topbarHeight;\n\nif (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}\n\n// content tester\n//surface.rect(win.contentFrame.x1, win.contentFrame.y1, win.contentFrame.x2, win.contentFrame.y2, 1);\n\nif (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}\n}\n}\n}
// import: import graphics, state, window
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: num sin(num deg) { return raw("sin .target arg0") }
// function: num cos(num deg) { return raw("cos .target arg0") }
// function: num tan(num deg) { return raw("tan .target arg0") }
// function: num round(num deg) { return raw("round .target arg0") }
// function: num floor(num deg) { return raw("floor .target arg0") }
// function: num ceiling(num deg) { return raw("ceiling .target arg0") }
// function: num lerp(num a, num b, num t) { return b - a * t + a }
// function: num mid(num a, num b) { return a + b / 2 }
// struct_def: struct Frame {\nnum x1;\nnum y1;\nnum x2;\nnum y2;\n\nvoid constructor(num x1, num y1, num x2, num y2) {\nself.x1 = x1;\nself.y1 = y1;\nself.x2 = x2;\nself.y2 = y2;\n}\n\nnum getX() { return math:mid(self.x1,self.x2) }\nnum getY() { return math:mid(self.y1,self.y2) }\nnum getW() { return self.x2 - self.x1 }\nnum getH() { return self.y2 - self.y1 }\n\nArr<num:2> getTL() { return [self.x1,self.y2] }\nArr<num:2> getT() { return [self.getX(),self.y2] }\nArr<num:2> getTR() { return [self.x2,self.y2] }\nArr<num:2> getL() { return [self.x1,self.getY()] }\nArr<num:2> getM() { return [self.getX(),self.getY()] }\nArr<num:2> getR() { return [self.x2,self.getY()] }\nArr<num:2> getBL() { return [self.x1,self.y1] }\nArr<num:2> getB() { return [self.getX(),self.y1] }\nArr<num:2> getBR() { return [self.x2,self.y1] }\n\nstr toString() {\nreturn "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"\n}\n}
// function: Frame getDefaultFrame() {\nscreenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);\n}
// function: Frame cloneFrame(Frame original) {\nreturn new Frame(original.x1, original.y1, original.x2, original.y2);\n}
// struct_def: struct Surface {\nstr type;\nFrame frame;\n\nvoid constructor(str type = "pen", Frame frame = getDefaultFrame()) {\nself.type = type;\nself.frame = frame;\n}\n\nvoid clear() {\nif (self.type == "pen") {\nraw("pen clear");\nreturn;\n}\n\nio:throw("cannot use clear method on" + self.type + "surface");\n}\nvoid line(num x1, num y1, num x2, num y2, num w) {\nif (self.type == "pen") {\nraw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");\nreturn;\n}\n\nio:throw("cannot use line method on" + self.type + "surface");\n}\n\nvoid path(Arr<Arr<num:2>> points, num w, bool loop = false) {\nnum len = points.length;\nif (!loop) {\nlen -= 1;\n}\nfor (i, len) {\nArr<num:2> point = points[i];\nArr<num:2> npoint = points[i + 1 % points.length];\nself.line(point[0], point[1], npoint[0], npoint[1], w);\n}\n}\nvoid tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {\nif (self.type == "pen") {\nraw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");\nreturn;\n}\n\nio:throw("cannot use tri method on" + self.type + "surface");\n}\nvoid quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {\n\nself.tri(x1,y1, x2,y2, x3,y3, border);\nself.tri(x2,y2, x3,y3, x4,y4, border);\n}\nvoid rect(num x1, num y1, num x2, num y2, num border) {\nself.quad(\nx1, y1,\nx1, y2,\nx2, y1,\nx2, y2,\nborder\n)\n}\nvoid square(num x, num y, num w, num h, num border) {\nhalfW = w / 2;\nhalfH = h / 2;\nself.quad(\nx - halfW, y - halfH,\nx - halfW, y + halfH,\nx + halfW, y - halfH,\nx + halfW, y + halfH,\nborder\n);\n}\nvoid icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use icon method on" + self.type + "surface");\n}\nvoid text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen text arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use text method on" + self.type + "surface");\n}\n\nvoid loadFontFromUrl(str url) {\nif (self.type == "pen") {\nraw("pen loadfonturl arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontFromUrl method on" + self.type + "surface");\n}\nvoid loadFontData(Obj<str> data) {\nif (self.type == "pen") {\nraw("pen loadfontdata arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontData method on" + self.type + "surface");\n}\n\nvoid setColor(str color) {\nif (self.type == "pen") {\nraw("pen color arg1");\nreturn;\n}\n\nio:throw("cannot use setColor method on" + self.type + "surface");\n}\n}
// struct_def: struct Display {\nSurface surface;\n\nvoid constructor(Frame frame) {\nself.surface = new Surface("pen", frame);\n}\n}
// struct_def: struct GraphicsState {\nSurface drawSurface;\nArr<Display> displays;\n\nvoid constructor() {\nself.newDisplay(getDefaultFrame());\nself.drawSurface = new Surface();\n}\n\nvoid newDisplay(Frame frame) {\nif (self?.displays) {\nself!.displays.append(new Display(frame));\n} else {\nself.displays = [new Display(frame)];\n}\n}\nvoid clearDisplays() {\nself.displays = [];\n}\n}
// struct_def: struct Icon {\nstr color;\nstr kind = "icn";\nstr type;\nstr data = "";\n\nvoid draw(Surface surface, num x, num y, num size) {\nif (self.kind == "icn") {\nsurface.icon(self.data, size, x, y);\n}\n}\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// struct_def: struct Theme {\nstr accent = "#a600ff";\n\nstr primary = "#1a1d28";\nstr secondary = "#313f4e";\nstr tertiary = "#4f617d";\n\nstr text = "#b3cbf9";\n\nstr background = "#090a0b";\nstr selected = "#0059ff";\n}
// struct_def: struct Config {\n\nstr fontUrl = "https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff";\n\n\nstr embeddedCommandChar = "";\n\nTheme theme = new Theme();\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct TimeState {\nnum frame = 0;\n\nnum uptime = 0;\nnum start = io:getCurrentMs();\nnum current = 0;\n\nvoid update() {\nself.current = io:getCurrentMs();\nself.uptime = self.current - self.start;\n}\n\nvoid updateFrame() {\nself.frame ++;\nself.update();\n}\n}
// struct_def: struct State {\nstr type = "terminal";\n\nbool needsInit = false;\nnum wait = 0;\n\nTimeState time = new TimeState();\n\nConfig config = new Config();\n\nInputState inputState = new InputState();\n}
// function: State getDefault() {\nreturn new State();\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: num sin(num deg) { return raw("sin .target arg0") }
// function: num cos(num deg) { return raw("cos .target arg0") }
// function: num tan(num deg) { return raw("tan .target arg0") }
// function: num round(num deg) { return raw("round .target arg0") }
// function: num floor(num deg) { return raw("floor .target arg0") }
// function: num ceiling(num deg) { return raw("ceiling .target arg0") }
// function: num lerp(num a, num b, num t) { return b - a * t + a }
// function: num mid(num a, num b) { return a + b / 2 }
// struct_def: struct Frame {\nnum x1;\nnum y1;\nnum x2;\nnum y2;\n\nvoid constructor(num x1, num y1, num x2, num y2) {\nself.x1 = x1;\nself.y1 = y1;\nself.x2 = x2;\nself.y2 = y2;\n}\n\nnum getX() { return math:mid(self.x1,self.x2) }\nnum getY() { return math:mid(self.y1,self.y2) }\nnum getW() { return self.x2 - self.x1 }\nnum getH() { return self.y2 - self.y1 }\n\nArr<num:2> getTL() { return [self.x1,self.y2] }\nArr<num:2> getT() { return [self.getX(),self.y2] }\nArr<num:2> getTR() { return [self.x2,self.y2] }\nArr<num:2> getL() { return [self.x1,self.getY()] }\nArr<num:2> getM() { return [self.getX(),self.getY()] }\nArr<num:2> getR() { return [self.x2,self.getY()] }\nArr<num:2> getBL() { return [self.x1,self.y1] }\nArr<num:2> getB() { return [self.getX(),self.y1] }\nArr<num:2> getBR() { return [self.x2,self.y1] }\n\nstr toString() {\nreturn "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"\n}\n}
// function: Frame getDefaultFrame() {\nscreenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);\n}
// function: Frame cloneFrame(Frame original) {\nreturn new Frame(original.x1, original.y1, original.x2, original.y2);\n}
// struct_def: struct Surface {\nstr type;\nFrame frame;\n\nvoid constructor(str type = "pen", Frame frame = getDefaultFrame()) {\nself.type = type;\nself.frame = frame;\n}\n\nvoid clear() {\nif (self.type == "pen") {\nraw("pen clear");\nreturn;\n}\n\nio:throw("cannot use clear method on" + self.type + "surface");\n}\nvoid line(num x1, num y1, num x2, num y2, num w) {\nif (self.type == "pen") {\nraw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");\nreturn;\n}\n\nio:throw("cannot use line method on" + self.type + "surface");\n}\n\nvoid path(Arr<Arr<num:2>> points, num w, bool loop = false) {\nnum len = points.length;\nif (!loop) {\nlen -= 1;\n}\nfor (i, len) {\nArr<num:2> point = points[i];\nArr<num:2> npoint = points[i + 1 % points.length];\nself.line(point[0], point[1], npoint[0], npoint[1], w);\n}\n}\nvoid tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {\nif (self.type == "pen") {\nraw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");\nreturn;\n}\n\nio:throw("cannot use tri method on" + self.type + "surface");\n}\nvoid quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {\n\nself.tri(x1,y1, x2,y2, x3,y3, border);\nself.tri(x2,y2, x3,y3, x4,y4, border);\n}\nvoid rect(num x1, num y1, num x2, num y2, num border) {\nself.quad(\nx1, y1,\nx1, y2,\nx2, y1,\nx2, y2,\nborder\n)\n}\nvoid square(num x, num y, num w, num h, num border) {\nhalfW = w / 2;\nhalfH = h / 2;\nself.quad(\nx - halfW, y - halfH,\nx - halfW, y + halfH,\nx + halfW, y - halfH,\nx + halfW, y + halfH,\nborder\n);\n}\nvoid icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use icon method on" + self.type + "surface");\n}\nvoid text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen text arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use text method on" + self.type + "surface");\n}\n\nvoid loadFontFromUrl(str url) {\nif (self.type == "pen") {\nraw("pen loadfonturl arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontFromUrl method on" + self.type + "surface");\n}\nvoid loadFontData(Obj<str> data) {\nif (self.type == "pen") {\nraw("pen loadfontdata arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontData method on" + self.type + "surface");\n}\n\nvoid setColor(str color) {\nif (self.type == "pen") {\nraw("pen color arg1");\nreturn;\n}\n\nio:throw("cannot use setColor method on" + self.type + "surface");\n}\n}
// struct_def: struct Display {\nSurface surface;\n\nvoid constructor(Frame frame) {\nself.surface = new Surface("pen", frame);\n}\n}
// struct_def: struct GraphicsState {\nSurface drawSurface;\nArr<Display> displays;\n\nvoid constructor() {\nself.newDisplay(getDefaultFrame());\nself.drawSurface = new Surface();\n}\n\nvoid newDisplay(Frame frame) {\nif (self?.displays) {\nself!.displays.append(new Display(frame));\n} else {\nself.displays = [new Display(frame)];\n}\n}\nvoid clearDisplays() {\nself.displays = [];\n}\n}
// struct_def: struct Icon {\nstr color;\nstr kind = "icn";\nstr type;\nstr data = "";\n\nvoid draw(Surface surface, num x, num y, num size) {\nif (self.kind == "icn") {\nsurface.icon(self.data, size, x, y);\n}\n}\n}
// function: Arr<str> splitChar(str text, str splitter, Arr<str> rules) {\nArr<str> tokens = [""];\n\n\nbool inDoubleQuotes = false;\n\n\nbool intactQuotes = rules.contains("intactQuotes");\n\nfor (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}\n\nreturn tokens;\n}
// function: str deEscape(str text) {\nstr newStr = "";\nfor (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}\nreturn newStr;\n}
// function: bool inBox(num x, num y, num x1, num y1, num x2, num y2) {\nreturn x > x1 && y > y1 && x < x2 && y < y2;\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct WindowFunction {\nstr preset;\n}
// struct_def: struct WindowButton {\nWindowFunction function;\nIcon icon;\n\nvoid constructor(Icon icon) {\nself.icon = icon;\n}\n\nvoid update(num x, num y, num size, Theme theme, Window win, Surface surface) {\nnum hSize = size / 2;\nbool hovered = utils:inBox(input:getMouseX(), input:getMouseY(), x - hSize, y - hSize, x + hSize, y + hSize);\nsurface.setColor(hovered ? theme.tertiary : theme.secondary);\nsurface.square(x, y, size, size, 10);\nif (self?.icon) {\nself.icon.draw(surface, x, y, size);\n}\n}\n}
// struct_def: struct WindowRenderSettings {\nbool renderBase = true;\nbool renderMenuBar = true;\n\n\n}
// struct_def: struct Window {\nSurface surface;\nFrame frame;\nFrame contentFrame;\n\nArr<WindowButton> buttons = [\nnew WindowButton(new Icon())\n];\n\nstr title = "Window";\n\nWindowRenderSettings renderSettings = new WindowRenderSettings();\n\nvoid constructor(Frame frame) {\nself.frame = frame;\nself.surface = new Surface("pen", self!.frame);\n}\n}
// function: void updateButtons(Theme theme, Frame buttonFrame, Window win, Surface surface, Obj<num> miscData) {\nnum gap = miscData["buttonGap"];\n\nnum size = miscData["topbarHeight"] - miscData["borderRadius"];\nnum realSize = miscData["buttonSize"];\nnum space = size + gap;\n\nx = buttonFrame.x2 - (size / 2);\ny = buttonFrame.getY();\n\nbuttons = win.buttons;\nfor (i, buttons.length) {\nbuttons[i].update(x, y, realSize, theme, win, surface);\nx -= space;\n}\n}
// function: num getButtonWidthX(num right, Window win, Obj<num> miscData) {\nnum size = miscData["topbarHeight"] - miscData["borderRadius"];\nnum realSize = miscData["buttonSize"];\nnum gap = miscData["buttonGap"];\nnum space = size + gap;\n\nx = right - (size / 2);\n\nx -= win.buttons.length - 1 * space + size - 1.5;\n\nreturn x;\n}
// function: void updateTopbar(Theme theme, Frame winFrame, Window win, Surface surface, Obj<num> miscData) {\nnum borderRad = miscData["borderRadius"];\nnum height = miscData["topbarHeight"];\nnum textSize = 10;\n\nFrame topbarFrame = graphics:cloneFrame(winFrame);\ntopbarFrame.y1 = topbarFrame.y2 - height + borderRad;\n\nnum buttonSize = miscData["buttonSize"];\nnum buttonsX = getButtonWidthX(topbarFrame.x2, win, miscData);\n\n\nsurface.setColor(theme.primary);\nsurface.rect(topbarFrame.x1, topbarFrame.y1, topbarFrame.x2, topbarFrame.y2, borderRad);\n\nFrame titleFrame = graphics:cloneFrame(topbarFrame);\ntitleFrame.x2 = buttonsX;\n\n\n\n\nsurface.setColor(theme.text);\nsurface.text(win.title, textSize, titleFrame.getX() - (win.title.length * textSize * .5), titleFrame.getY() - 6.5);\n\n\nsurface.setColor(theme.secondary);\nsurface.path([\n[ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ],\n[ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ],\n], 2);\n\n\nFrame buttonFrame = graphics:cloneFrame(topbarFrame);\nbuttonFrame.x1 = titleFrame.x2;\nupdateButtons(theme, buttonFrame, win, surface, miscData);\n}
// function: void main(State state, GraphicsState graphicsState, Obj<Window> windows) {\nforever {\nSurface surface = graphicsState!.drawSurface;\nTheme theme = state.config.theme;\n\nsurface.clear();\n\nnum borderRadius = 15;\nnum borderThickness = 5;\n\nnum topbarHeight = 35;\nnum buttonSize = 13.5;\nnum buttonGap = 5;\n\nArr<str> winKeys = windows.keys();\nfor (i, winKeys.length) {\nstr winKey = winKeys[i];\nWindow win = windows[winKey];\nWindowRenderSettings settings = win.renderSettings;\nFrame frame = win.frame;\nwin.contentFrame = graphics:cloneFrame(win.frame);\nwin.contentFrame.y2 -= topbarHeight;\n\nif (settings.renderBase) {\nsurface.setColor(theme.accent);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);\nsurface.setColor(theme.background);\nsurface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);\n}\n\n\n\n\nif (settings.renderMenuBar) {\nupdateTopbar(theme, frame, win, surface, {\ntopbarHeight,\nborderRadius,\nbuttonSize,\nbuttonGap\n});\n}\n}\n}\n}
