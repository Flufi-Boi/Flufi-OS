~ io:throw
// segment: raw("err arg0");
// execution: raw("err arg0")
err arg0
ret
~
~ io:getScreenSize
// segment: num width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];
// assignment: num width = raw("const screen_width .target")
// execution: raw("const screen_width .target")
const screen_width rand5
// assignment: num height = raw("const screen_height .target")
// execution: raw("const screen_height .target")
const screen_height rand6
// statement: return [width, height]
// array: [width, height]
set obj rand7 []
// variable: width
arr add rand7 rand5
// variable: height
arr add rand7 rand6
ret rand7
~
~ io:getCurrentMs
// segment: return raw("const ms .target");
// statement: return raw("const ms .target")
// execution: raw("const ms .target")
const ms rand10
ret rand10
~
~ input:getMouseX
// segment: return raw("const mousex .target");
// statement: return raw("const mousex .target")
// execution: raw("const mousex .target")
const mousex rand17
ret rand17
~
~ input:getMouseY
// segment: return raw("const mousey .target");
// statement: return raw("const mousey .target")
// execution: raw("const mousey .target")
const mousey rand20
ret rand20
~
~ input:getKeys
// segment: return raw("keyhistory getkeys .target");
// statement: return raw("keyhistory getkeys .target")
// execution: raw("keyhistory getkeys .target")
keyhistory getkeys rand23
ret rand23
~
~ input:shiftKeys
// segment: return raw("keyhistory shift .target");
// statement: return raw("keyhistory shift .target")
// execution: raw("keyhistory shift .target")
keyhistory shift rand26
ret rand26
~
~ input:getDown
// segment: return raw("keyhistory getdown .target");
// statement: return raw("keyhistory getdown .target")
// execution: raw("keyhistory getdown .target")
keyhistory getdown rand29
ret rand29
~
~ input:clearKeys
// segment: raw("keyhistory delkeys");
// execution: raw("keyhistory delkeys")
keyhistory delkeys
ret
~
~ input:isSpecialKey
// segment: specialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;
// assignment: specialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n]
// array: [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n]
set obj rand35 ["Backspace","Tab","Enter","Shift","Control","Alt","CapsLock","Escape","Space","PageUp","PageDown","End","Home","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Insert","Delete","Meta","ContextMenu","AltGraph","ScrollLock","NumLock","Pause","Clear","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12"]
// arg_branch: if (specialChars.contains(key)) {\nreturn true;\n}
// method: specialChars.contains(key)
// variable: specialChars
// argument: key
arr has rand36 rand35 arg0
jn rand37 rand36
// segment: return true;
// statement: return true
// constant: true
set bool rand39 true
ret rand39
: rand37
// statement: return false
// constant: false
set bool rand40 false
ret rand40
~
~ state:getDefault
// segment: return new State();
// statement: return new State()
// instance: new State()
set obj rand51 {"methods":{},"attributes":{"type":"terminal","wait":0}}
set str rand54 attributes
obj get rand51 rand55 rand54
// constant: false
set bool rand56 false
set str rand57 needsInit
obj set rand55 rand57 rand56
// instance: new TimeState()
set obj rand58 {"methods":{"update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.current = io:getCurrentMs();\\nself.uptime = self.current - self.start;\n// assignment: self.current = io:getCurrentMs()\n// constant: self\n// attribute: self.current\n// constant: self\nset str rand64 attributes\nobj get arg0 rand63 rand64\nset str rand64 current\nobj get rand63 rand62 rand64\n// execution: io:getCurrentMs()\ncallget rand62 io:getCurrentMs \nobj set rand63 rand64 rand62\n// assignment: self.uptime = self.current - self.start\n// constant: self\n// attribute: self.uptime\n// constant: self\nset str rand68 attributes\nobj get arg0 rand67 rand68\nset str rand68 uptime\nobj get rand67 rand66 rand68\n// operation: self.current-self.start\n// attribute: self.current\n// constant: self\nset str rand72 attributes\nobj get arg0 rand71 rand72\nset str rand72 current\nobj get rand71 rand69 rand72\n// attribute: self.start\n// constant: self\nset str rand74 attributes\nobj get arg0 rand73 rand74\nset str rand74 start\nobj get rand73 rand70 rand74\nsub rand66 rand69 rand70\nobj set rand67 rand68 rand66\nret\n~","updateFrame":"~ mthd::updateFrame:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.frame ++;\\nself.update();\n// assignment: self.frame ++\n// constant: self\n// attribute: self.frame\n// constant: self\nset str rand77 attributes\nobj get arg0 rand76 rand77\nset str rand77 frame\nobj get rand76 rand75 rand77\nset num rand79 1\nadd rand75 rand75 rand79\nobj set rand76 rand77 rand75\n// method: self.update()\n// constant: self\nset str rand82 methods\nobj get arg0 rand81 rand82\nset str rand82 update\nobj get rand81 rand81 rand82\ncallvar rand81 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 arg0 \nret\n~"},"attributes":{"frame":0,"uptime":0,"current":0}}
set str rand83 attributes
obj get rand58 rand84 rand83
// execution: io:getCurrentMs()
callget rand85 io:getCurrentMs 
set str rand86 start
obj set rand84 rand86 rand85
set str rand87 time
obj set rand55 rand87 rand58
// instance: new Config()
set obj rand88 {"methods":{},"attributes":{"fontUrl":"https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff","embeddedCommandChar":"î¡ˆ"}}
set str rand91 attributes
obj get rand88 rand92 rand91
// instance: new Theme()
set obj rand93 {"methods":{},"attributes":{"accent":"#a600ff","primary":"#1a1d28","secondary":"#313f4e","tertiary":"#4f617d","text":"#b3cbf9","background":"#090a0b","selected":"#0059ff"}}
set str rand96 theme
obj set rand92 rand96 rand93
set str rand97 config
obj set rand55 rand97 rand88
// instance: new InputState()
set obj rand98 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: clearKeys();\n// execution: clearKeys()\ncall input:clearKeys \nret\n~","update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.map.update();\n// method: self.map.update()\n// attribute: self.map\n// constant: self\nset str rand103 attributes\nobj get arg0 rand102 rand103\nset str rand103 map\nobj get rand102 rand101 rand103\nset str rand105 methods\nobj get rand101 rand104 rand105\nset str rand105 update\nobj get rand104 rand104 rand105\ncallvar rand104 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 rand101 \nret\n~"},"attributes":{}}
set str rand106 attributes
obj get rand98 rand107 rand106
// instance: new KeyMap()
set obj rand108 {"methods":{"update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: Arr<Obj<str>> keys = getKeys();\\nfor(i, keys.length) {\\nObj<str> key = shiftKeys();\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.keys.append(data);\\n} else {\\nself.special.append(data);\\n}\\n}\\n\\nself.downKeys = [];\\nself.downSpecial = [];\\nArr<Obj<str>> down = getDown();\\nfor (i, down.length) {\\nObj<str> key = down[i];\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n} else {\\nself.downSpecial.append(data);\\n}\\n}\n// assignment: Arr<Obj<str>> keys = getKeys()\n// execution: getKeys()\ncallget rand111 input:getKeys \n// arg_branch: for(i, keys.length) {\\nObj<str> key = shiftKeys();\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.keys.append(data);\\n} else {\\nself.special.append(data);\\n}\\n}\n// variable: i\nset num rand115 1\nset num rand116 0\n// attribute: keys.length\n// variable: keys\nlen rand112 rand111\n: rand113\nsml rand117 rand116 rand112\njn rand114 rand117\n// segment: Obj<str> key = shiftKeys();\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.keys.append(data);\\n} else {\\nself.special.append(data);\\n}\n// assignment: Obj<str> key = shiftKeys()\n// execution: shiftKeys()\ncallget rand118 input:shiftKeys \n// assignment: str data = key[\"data\"]\n// key: key[\"data\"]\n// string: \"data\"\nset str rand120 data\n// variable: key\nobj get rand118 rand119 rand120\nset str rand121  doesnt exist on key\nadd rand121 rand120 rand121\nernull rand119 rand121\n// arg_branch: if (!isSpecialKey(data)) {\\nself.keys.append(data);\\n}\n// operation: !isSpecialKey(data)\n// execution: isSpecialKey(data)\n// variable: data\ncallget rand123 input:isSpecialKey rand119\ninv rand122 rand123\njn rand124 rand122\n// segment: self.keys.append(data);\n// method: self.keys.append(data)\n// attribute: self.keys\n// constant: self\nset str rand128 attributes\nobj get arg0 rand127 rand128\nset str rand128 keys\nobj get rand127 rand126 rand128\n// variable: data\ndupe rand129 rand119\narr add rand126 rand129\n: rand124\njp rand131\n: rand124\n// segment: self.special.append(data);\n// method: self.special.append(data)\n// attribute: self.special\n// constant: self\nset str rand134 attributes\nobj get arg0 rand133 rand134\nset str rand134 special\nobj get rand133 rand132 rand134\n// variable: data\ndupe rand135 rand119\narr add rand132 rand135\n: rand131\njai rand113 rand116\n: rand114\n// assignment: self.downKeys = []\n// constant: self\n// attribute: self.downKeys\n// constant: self\nset str rand139 attributes\nobj get arg0 rand138 rand139\nset str rand139 downKeys\nobj get rand138 rand137 rand139\n// array: []\nset obj rand137 []\nobj set rand138 rand139 rand137\n// assignment: self.downSpecial = []\n// constant: self\n// attribute: self.downSpecial\n// constant: self\nset str rand143 attributes\nobj get arg0 rand142 rand143\nset str rand143 downSpecial\nobj get rand142 rand141 rand143\n// array: []\nset obj rand141 []\nobj set rand142 rand143 rand141\n// assignment: Arr<Obj<str>> down = getDown()\n// execution: getDown()\ncallget rand144 input:getDown \n// arg_branch: for (i, down.length) {\\nObj<str> key = down[i];\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n} else {\\nself.downSpecial.append(data);\\n}\\n}\n// variable: i\nset num rand148 1\nset num rand149 0\n// attribute: down.length\n// variable: down\nlen rand145 rand144\n: rand146\nsml rand150 rand149 rand145\njn rand147 rand150\n// segment: Obj<str> key = down[i];\\n\\nstr data = key[\"data\"];\\nif (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n} else {\\nself.downSpecial.append(data);\\n}\n// assignment: Obj<str> key = down[i]\n// key: down[i]\n// variable: i\n// variable: down\nobj get rand144 rand151 rand149\nset str rand152  doesnt exist on down\nadd rand152 rand149 rand152\nernull rand151 rand152\n// assignment: str data = key[\"data\"]\n// key: key[\"data\"]\n// string: \"data\"\nset str rand154 data\n// variable: key\nobj get rand151 rand153 rand154\nset str rand155  doesnt exist on key\nadd rand155 rand154 rand155\nernull rand153 rand155\n// arg_branch: if (!isSpecialKey(data)) {\\nself.downKeys.append(data);\\n}\n// operation: !isSpecialKey(data)\n// execution: isSpecialKey(data)\n// variable: data\ncallget rand157 input:isSpecialKey rand153\ninv rand156 rand157\njn rand158 rand156\n// segment: self.downKeys.append(data);\n// method: self.downKeys.append(data)\n// attribute: self.downKeys\n// constant: self\nset str rand162 attributes\nobj get arg0 rand161 rand162\nset str rand162 downKeys\nobj get rand161 rand160 rand162\n// variable: data\ndupe rand163 rand153\narr add rand160 rand163\n: rand158\njp rand165\n: rand158\n// segment: self.downSpecial.append(data);\n// method: self.downSpecial.append(data)\n// attribute: self.downSpecial\n// constant: self\nset str rand168 attributes\nobj get arg0 rand167 rand168\nset str rand168 downSpecial\nobj get rand167 rand166 rand168\n// variable: data\ndupe rand169 rand153\narr add rand166 rand169\n: rand165\njai rand146 rand149\n: rand147\nret\n~"},"attributes":{}}
set str rand170 attributes
obj get rand108 rand171 rand170
// array: []
set obj rand172 []
set str rand173 keys
obj set rand171 rand173 rand172
// array: []
set obj rand174 []
set str rand175 special
obj set rand171 rand175 rand174
// array: []
set obj rand176 []
set str rand177 downKeys
obj set rand171 rand177 rand176
// array: []
set obj rand178 []
set str rand179 downSpecial
obj set rand171 rand179 rand178
set str rand180 map
obj set rand107 rand180 rand108
set str rand100 methods
obj get rand98 rand99 rand100
set str rand100 .cns
obj get rand99 rand99 rand100
callvar rand99 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand98 
set str rand181 inputState
obj set rand55 rand181 rand98
ret rand51
~
~ math:sin
// statement: return raw("sin .target arg0")
// execution: raw("sin .target arg0")
sin rand185 arg0
ret rand185
~
~ math:cos
// statement: return raw("cos .target arg0")
// execution: raw("cos .target arg0")
cos rand189 arg0
ret rand189
~
~ math:tan
// statement: return raw("tan .target arg0")
// execution: raw("tan .target arg0")
tan rand193 arg0
ret rand193
~
~ math:round
// statement: return raw("round .target arg0")
// execution: raw("round .target arg0")
round rand197 arg0
ret rand197
~
~ math:floor
// statement: return raw("floor .target arg0")
// execution: raw("floor .target arg0")
floor rand201 arg0
ret rand201
~
~ math:ceiling
// statement: return raw("ceiling .target arg0")
// execution: raw("ceiling .target arg0")
ceiling rand205 arg0
ret rand205
~
~ math:lerp
// statement: return b - a * t + a
// operation: b - a * t + a
// operation: b-a*t
// operation: b-a
// argument: b
// argument: a
sub rand213 arg1 arg0
// argument: t
mul rand212 rand213 arg2
// argument: a
add rand211 rand212 arg0
ret rand211
~
~ math:mid
// statement: return a + b / 2
// operation: a + b / 2
// operation: a+b
// argument: a
// argument: b
add rand219 arg0 arg1
// number: 2
set num rand220 2
div rand218 rand219 rand220
ret rand218
~
~ graphics:getDefaultFrame
// segment: screenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);
// assignment: screenSize = io:getScreenSize()
// execution: io:getScreenSize()
callget rand225 io:getScreenSize 
// statement: return new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5)
// instance: new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5)
// operation: screenSize[0] * -.5
// key: screenSize[0]
// number: 0
set num rand230 0
// variable: screenSize
obj get rand225 rand228 rand230
set str rand231  doesnt exist on screenSize
add rand231 rand230 rand231
ernull rand228 rand231
// number: -.5
set num rand229 -0.5
mul rand227 rand228 rand229
// operation: screenSize[1] * -.5
// key: screenSize[1]
// number: 1
set num rand235 1
// variable: screenSize
obj get rand225 rand233 rand235
set str rand236  doesnt exist on screenSize
add rand236 rand235 rand236
ernull rand233 rand236
// number: -.5
set num rand234 -0.5
mul rand232 rand233 rand234
// operation: screenSize[0] * .5
// key: screenSize[0]
// number: 0
set num rand240 0
// variable: screenSize
obj get rand225 rand238 rand240
set str rand241  doesnt exist on screenSize
add rand241 rand240 rand241
ernull rand238 rand241
// number: .5
set num rand239 0.5
mul rand237 rand238 rand239
// operation: screenSize[1] * .5
// key: screenSize[1]
// number: 1
set num rand245 1
// variable: screenSize
obj get rand225 rand243 rand245
set str rand246  doesnt exist on screenSize
add rand246 rand245 rand246
ernull rand243 rand246
// number: .5
set num rand244 0.5
mul rand242 rand243 rand244
set obj rand226 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.x1 = x1;\\nself.y1 = y1;\\nself.x2 = x2;\\nself.y2 = y2;\n// assignment: self.x1 = x1\n// constant: self\n// attribute: self.x1\n// constant: self\nset str rand255 attributes\nobj get arg0 rand254 rand255\nset str rand255 x1\nobj get rand254 rand253 rand255\n// argument: x1\ndupe rand253 arg1\nobj set rand254 rand255 rand253\n// assignment: self.y1 = y1\n// constant: self\n// attribute: self.y1\n// constant: self\nset str rand258 attributes\nobj get arg0 rand257 rand258\nset str rand258 y1\nobj get rand257 rand256 rand258\n// argument: y1\ndupe rand256 arg2\nobj set rand257 rand258 rand256\n// assignment: self.x2 = x2\n// constant: self\n// attribute: self.x2\n// constant: self\nset str rand261 attributes\nobj get arg0 rand260 rand261\nset str rand261 x2\nobj get rand260 rand259 rand261\n// argument: x2\ndupe rand259 arg3\nobj set rand260 rand261 rand259\n// assignment: self.y2 = y2\n// constant: self\n// attribute: self.y2\n// constant: self\nset str rand264 attributes\nobj get arg0 rand263 rand264\nset str rand264 y2\nobj get rand263 rand262 rand264\n// argument: y2\ndupe rand262 arg4\nobj set rand263 rand264 rand262\nret\n~","getX":"~ mthd::getX:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.x1,self.x2)\n// execution: math:mid(self.x1,self.x2)\n// attribute: self.x1\n// constant: self\nset str rand268 attributes\nobj get arg0 rand267 rand268\nset str rand268 x1\nobj get rand267 rand266 rand268\nset str rand269 x1 attribute is null\nerrnull rand266 rand269\n// attribute: self.x2\n// constant: self\nset str rand272 attributes\nobj get arg0 rand271 rand272\nset str rand272 x2\nobj get rand271 rand270 rand272\nset str rand273 x2 attribute is null\nerrnull rand270 rand273\ncallget rand265 math:mid rand266 rand270\nret rand265\nret\n~","getY":"~ mthd::getY:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.y1,self.y2)\n// execution: math:mid(self.y1,self.y2)\n// attribute: self.y1\n// constant: self\nset str rand277 attributes\nobj get arg0 rand276 rand277\nset str rand277 y1\nobj get rand276 rand275 rand277\nset str rand278 y1 attribute is null\nerrnull rand275 rand278\n// attribute: self.y2\n// constant: self\nset str rand281 attributes\nobj get arg0 rand280 rand281\nset str rand281 y2\nobj get rand280 rand279 rand281\nset str rand282 y2 attribute is null\nerrnull rand279 rand282\ncallget rand274 math:mid rand275 rand279\nret rand274\nret\n~","getW":"~ mthd::getW:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.x2 - self.x1\n// operation: self.x2 - self.x1\n// attribute: self.x2\n// constant: self\nset str rand287 attributes\nobj get arg0 rand286 rand287\nset str rand287 x2\nobj get rand286 rand284 rand287\nset str rand288 x2 attribute is null\nerrnull rand284 rand288\n// attribute: self.x1\n// constant: self\nset str rand290 attributes\nobj get arg0 rand289 rand290\nset str rand290 x1\nobj get rand289 rand285 rand290\nset str rand291 x1 attribute is null\nerrnull rand285 rand291\nsub rand283 rand284 rand285\nret rand283\nret\n~","getH":"~ mthd::getH:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.y2 - self.y1\n// operation: self.y2 - self.y1\n// attribute: self.y2\n// constant: self\nset str rand296 attributes\nobj get arg0 rand295 rand296\nset str rand296 y2\nobj get rand295 rand293 rand296\nset str rand297 y2 attribute is null\nerrnull rand293 rand297\n// attribute: self.y1\n// constant: self\nset str rand299 attributes\nobj get arg0 rand298 rand299\nset str rand299 y1\nobj get rand298 rand294 rand299\nset str rand300 y1 attribute is null\nerrnull rand294 rand300\nsub rand292 rand293 rand294\nret rand292\nret\n~","getTL":"~ mthd::getTL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y2]\n// array: [self.x1,self.y2]\nset obj rand301 []\n// attribute: self.x1\n// constant: self\nset str rand304 attributes\nobj get arg0 rand303 rand304\nset str rand304 x1\nobj get rand303 rand302 rand304\nset str rand305 x1 attribute is null\nerrnull rand302 rand305\narr add rand301 rand302\n// attribute: self.y2\n// constant: self\nset str rand308 attributes\nobj get arg0 rand307 rand308\nset str rand308 y2\nobj get rand307 rand306 rand308\nset str rand309 y2 attribute is null\nerrnull rand306 rand309\narr add rand301 rand306\nret rand301\nret\n~","getT":"~ mthd::getT:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y2]\n// array: [self.getX(),self.y2]\nset obj rand310 []\n// method: self.getX()\n// constant: self\nset str rand313 methods\nobj get arg0 rand312 rand313\nset str rand313 getX\nobj get rand312 rand312 rand313\ncallgetvar rand311 rand312 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand310 rand311\n// attribute: self.y2\n// constant: self\nset str rand316 attributes\nobj get arg0 rand315 rand316\nset str rand316 y2\nobj get rand315 rand314 rand316\nset str rand317 y2 attribute is null\nerrnull rand314 rand317\narr add rand310 rand314\nret rand310\nret\n~","getTR":"~ mthd::getTR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y2]\n// array: [self.x2,self.y2]\nset obj rand318 []\n// attribute: self.x2\n// constant: self\nset str rand321 attributes\nobj get arg0 rand320 rand321\nset str rand321 x2\nobj get rand320 rand319 rand321\nset str rand322 x2 attribute is null\nerrnull rand319 rand322\narr add rand318 rand319\n// attribute: self.y2\n// constant: self\nset str rand325 attributes\nobj get arg0 rand324 rand325\nset str rand325 y2\nobj get rand324 rand323 rand325\nset str rand326 y2 attribute is null\nerrnull rand323 rand326\narr add rand318 rand323\nret rand318\nret\n~","getL":"~ mthd::getL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.getY()]\n// array: [self.x1,self.getY()]\nset obj rand327 []\n// attribute: self.x1\n// constant: self\nset str rand330 attributes\nobj get arg0 rand329 rand330\nset str rand330 x1\nobj get rand329 rand328 rand330\nset str rand331 x1 attribute is null\nerrnull rand328 rand331\narr add rand327 rand328\n// method: self.getY()\n// constant: self\nset str rand334 methods\nobj get arg0 rand333 rand334\nset str rand334 getY\nobj get rand333 rand333 rand334\ncallgetvar rand332 rand333 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand327 rand332\nret rand327\nret\n~","getM":"~ mthd::getM:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.getY()]\n// array: [self.getX(),self.getY()]\nset obj rand335 []\n// method: self.getX()\n// constant: self\nset str rand338 methods\nobj get arg0 rand337 rand338\nset str rand338 getX\nobj get rand337 rand337 rand338\ncallgetvar rand336 rand337 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand335 rand336\n// method: self.getY()\n// constant: self\nset str rand341 methods\nobj get arg0 rand340 rand341\nset str rand341 getY\nobj get rand340 rand340 rand341\ncallgetvar rand339 rand340 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand335 rand339\nret rand335\nret\n~","getR":"~ mthd::getR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.getY()]\n// array: [self.x2,self.getY()]\nset obj rand342 []\n// attribute: self.x2\n// constant: self\nset str rand345 attributes\nobj get arg0 rand344 rand345\nset str rand345 x2\nobj get rand344 rand343 rand345\nset str rand346 x2 attribute is null\nerrnull rand343 rand346\narr add rand342 rand343\n// method: self.getY()\n// constant: self\nset str rand349 methods\nobj get arg0 rand348 rand349\nset str rand349 getY\nobj get rand348 rand348 rand349\ncallgetvar rand347 rand348 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand342 rand347\nret rand342\nret\n~","getBL":"~ mthd::getBL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y1]\n// array: [self.x1,self.y1]\nset obj rand350 []\n// attribute: self.x1\n// constant: self\nset str rand353 attributes\nobj get arg0 rand352 rand353\nset str rand353 x1\nobj get rand352 rand351 rand353\nset str rand354 x1 attribute is null\nerrnull rand351 rand354\narr add rand350 rand351\n// attribute: self.y1\n// constant: self\nset str rand357 attributes\nobj get arg0 rand356 rand357\nset str rand357 y1\nobj get rand356 rand355 rand357\nset str rand358 y1 attribute is null\nerrnull rand355 rand358\narr add rand350 rand355\nret rand350\nret\n~","getB":"~ mthd::getB:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y1]\n// array: [self.getX(),self.y1]\nset obj rand359 []\n// method: self.getX()\n// constant: self\nset str rand362 methods\nobj get arg0 rand361 rand362\nset str rand362 getX\nobj get rand361 rand361 rand362\ncallgetvar rand360 rand361 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand359 rand360\n// attribute: self.y1\n// constant: self\nset str rand365 attributes\nobj get arg0 rand364 rand365\nset str rand365 y1\nobj get rand364 rand363 rand365\nset str rand366 y1 attribute is null\nerrnull rand363 rand366\narr add rand359 rand363\nret rand359\nret\n~","getBR":"~ mthd::getBR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y1]\n// array: [self.x2,self.y1]\nset obj rand367 []\n// attribute: self.x2\n// constant: self\nset str rand370 attributes\nobj get arg0 rand369 rand370\nset str rand370 x2\nobj get rand369 rand368 rand370\nset str rand371 x2 attribute is null\nerrnull rand368 rand371\narr add rand367 rand368\n// attribute: self.y1\n// constant: self\nset str rand374 attributes\nobj get arg0 rand373 rand374\nset str rand374 y1\nobj get rand373 rand372 rand374\nset str rand375 y1 attribute is null\nerrnull rand372 rand375\narr add rand367 rand372\nret rand367\nret\n~","toString":"~ mthd::toString:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2~++self.y2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"\n// operation: \"Frame{\"++self.x1~++self.y1\n// operation: \"Frame{\"++self.x1\n// string: \"Frame{\"\nset str rand387 Frame{\n// attribute: self.x1\n// constant: self\nset str rand390 attributes\nobj get arg0 rand389 rand390\nset str rand390 x1\nobj get rand389 rand388 rand390\nset str rand391 x1 attribute is null\nerrnull rand388 rand391\nadd rand385 emptystring rand387 rand388\n// attribute: self.y1\n// constant: self\nset str rand393 attributes\nobj get arg0 rand392 rand393\nset str rand393 y1\nobj get rand392 rand386 rand393\nset str rand394 y1 attribute is null\nerrnull rand386 rand394\nadd rand383 emptystring rand385 comma rand386\n// string: \"to\"\nset str rand384 to\nadd rand381 emptystring rand383 space rand384\n// attribute: self.x2\n// constant: self\nset str rand396 attributes\nobj get arg0 rand395 rand396\nset str rand396 x2\nobj get rand395 rand382 rand396\nset str rand397 x2 attribute is null\nerrnull rand382 rand397\nadd rand379 emptystring rand381 space rand382\n// attribute: self.y2\n// constant: self\nset str rand399 attributes\nobj get arg0 rand398 rand399\nset str rand399 y2\nobj get rand398 rand380 rand399\nset str rand400 y2 attribute is null\nerrnull rand380 rand400\nadd rand377 emptystring rand379 comma rand380\n// string: \"}\"\nset str rand378 }\nadd rand376 emptystring rand377 rand378\nret rand376\nret\n~"},"attributes":{}}
set str rand248 methods
obj get rand226 rand247 rand248
set str rand248 .cns
obj get rand247 rand247 rand248
callvar rand247 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand226 rand227 rand232 rand237 rand242
ret rand226
~
~ graphics:cloneFrame
// segment: return new Frame(original.x1, original.y1, original.x2, original.y2);
// statement: return new Frame(original.x1, original.y1, original.x2, original.y2)
// instance: new Frame(original.x1, original.y1, original.x2, original.y2)
// attribute: original.x1
// argument: original
set str rand407 attributes
obj get arg0 rand406 rand407
set str rand407 x1
obj get rand406 rand405 rand407
set str rand408 x1 attribute is null
errnull rand405 rand408
// attribute: original.y1
// argument: original
set str rand411 attributes
obj get arg0 rand410 rand411
set str rand411 y1
obj get rand410 rand409 rand411
set str rand412 y1 attribute is null
errnull rand409 rand412
// attribute: original.x2
// argument: original
set str rand415 attributes
obj get arg0 rand414 rand415
set str rand415 x2
obj get rand414 rand413 rand415
set str rand416 x2 attribute is null
errnull rand413 rand416
// attribute: original.y2
// argument: original
set str rand419 attributes
obj get arg0 rand418 rand419
set str rand419 y2
obj get rand418 rand417 rand419
set str rand420 y2 attribute is null
errnull rand417 rand420
set obj rand404 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.x1 = x1;\\nself.y1 = y1;\\nself.x2 = x2;\\nself.y2 = y2;\n// assignment: self.x1 = x1\n// constant: self\n// attribute: self.x1\n// constant: self\nset str rand429 attributes\nobj get arg0 rand428 rand429\nset str rand429 x1\nobj get rand428 rand427 rand429\n// argument: x1\ndupe rand427 arg1\nobj set rand428 rand429 rand427\n// assignment: self.y1 = y1\n// constant: self\n// attribute: self.y1\n// constant: self\nset str rand432 attributes\nobj get arg0 rand431 rand432\nset str rand432 y1\nobj get rand431 rand430 rand432\n// argument: y1\ndupe rand430 arg2\nobj set rand431 rand432 rand430\n// assignment: self.x2 = x2\n// constant: self\n// attribute: self.x2\n// constant: self\nset str rand435 attributes\nobj get arg0 rand434 rand435\nset str rand435 x2\nobj get rand434 rand433 rand435\n// argument: x2\ndupe rand433 arg3\nobj set rand434 rand435 rand433\n// assignment: self.y2 = y2\n// constant: self\n// attribute: self.y2\n// constant: self\nset str rand438 attributes\nobj get arg0 rand437 rand438\nset str rand438 y2\nobj get rand437 rand436 rand438\n// argument: y2\ndupe rand436 arg4\nobj set rand437 rand438 rand436\nret\n~","getX":"~ mthd::getX:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.x1,self.x2)\n// execution: math:mid(self.x1,self.x2)\n// attribute: self.x1\n// constant: self\nset str rand442 attributes\nobj get arg0 rand441 rand442\nset str rand442 x1\nobj get rand441 rand440 rand442\nset str rand443 x1 attribute is null\nerrnull rand440 rand443\n// attribute: self.x2\n// constant: self\nset str rand446 attributes\nobj get arg0 rand445 rand446\nset str rand446 x2\nobj get rand445 rand444 rand446\nset str rand447 x2 attribute is null\nerrnull rand444 rand447\ncallget rand439 math:mid rand440 rand444\nret rand439\nret\n~","getY":"~ mthd::getY:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.y1,self.y2)\n// execution: math:mid(self.y1,self.y2)\n// attribute: self.y1\n// constant: self\nset str rand451 attributes\nobj get arg0 rand450 rand451\nset str rand451 y1\nobj get rand450 rand449 rand451\nset str rand452 y1 attribute is null\nerrnull rand449 rand452\n// attribute: self.y2\n// constant: self\nset str rand455 attributes\nobj get arg0 rand454 rand455\nset str rand455 y2\nobj get rand454 rand453 rand455\nset str rand456 y2 attribute is null\nerrnull rand453 rand456\ncallget rand448 math:mid rand449 rand453\nret rand448\nret\n~","getW":"~ mthd::getW:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.x2 - self.x1\n// operation: self.x2 - self.x1\n// attribute: self.x2\n// constant: self\nset str rand461 attributes\nobj get arg0 rand460 rand461\nset str rand461 x2\nobj get rand460 rand458 rand461\nset str rand462 x2 attribute is null\nerrnull rand458 rand462\n// attribute: self.x1\n// constant: self\nset str rand464 attributes\nobj get arg0 rand463 rand464\nset str rand464 x1\nobj get rand463 rand459 rand464\nset str rand465 x1 attribute is null\nerrnull rand459 rand465\nsub rand457 rand458 rand459\nret rand457\nret\n~","getH":"~ mthd::getH:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.y2 - self.y1\n// operation: self.y2 - self.y1\n// attribute: self.y2\n// constant: self\nset str rand470 attributes\nobj get arg0 rand469 rand470\nset str rand470 y2\nobj get rand469 rand467 rand470\nset str rand471 y2 attribute is null\nerrnull rand467 rand471\n// attribute: self.y1\n// constant: self\nset str rand473 attributes\nobj get arg0 rand472 rand473\nset str rand473 y1\nobj get rand472 rand468 rand473\nset str rand474 y1 attribute is null\nerrnull rand468 rand474\nsub rand466 rand467 rand468\nret rand466\nret\n~","getTL":"~ mthd::getTL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y2]\n// array: [self.x1,self.y2]\nset obj rand475 []\n// attribute: self.x1\n// constant: self\nset str rand478 attributes\nobj get arg0 rand477 rand478\nset str rand478 x1\nobj get rand477 rand476 rand478\nset str rand479 x1 attribute is null\nerrnull rand476 rand479\narr add rand475 rand476\n// attribute: self.y2\n// constant: self\nset str rand482 attributes\nobj get arg0 rand481 rand482\nset str rand482 y2\nobj get rand481 rand480 rand482\nset str rand483 y2 attribute is null\nerrnull rand480 rand483\narr add rand475 rand480\nret rand475\nret\n~","getT":"~ mthd::getT:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y2]\n// array: [self.getX(),self.y2]\nset obj rand484 []\n// method: self.getX()\n// constant: self\nset str rand487 methods\nobj get arg0 rand486 rand487\nset str rand487 getX\nobj get rand486 rand486 rand487\ncallgetvar rand485 rand486 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand484 rand485\n// attribute: self.y2\n// constant: self\nset str rand490 attributes\nobj get arg0 rand489 rand490\nset str rand490 y2\nobj get rand489 rand488 rand490\nset str rand491 y2 attribute is null\nerrnull rand488 rand491\narr add rand484 rand488\nret rand484\nret\n~","getTR":"~ mthd::getTR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y2]\n// array: [self.x2,self.y2]\nset obj rand492 []\n// attribute: self.x2\n// constant: self\nset str rand495 attributes\nobj get arg0 rand494 rand495\nset str rand495 x2\nobj get rand494 rand493 rand495\nset str rand496 x2 attribute is null\nerrnull rand493 rand496\narr add rand492 rand493\n// attribute: self.y2\n// constant: self\nset str rand499 attributes\nobj get arg0 rand498 rand499\nset str rand499 y2\nobj get rand498 rand497 rand499\nset str rand500 y2 attribute is null\nerrnull rand497 rand500\narr add rand492 rand497\nret rand492\nret\n~","getL":"~ mthd::getL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.getY()]\n// array: [self.x1,self.getY()]\nset obj rand501 []\n// attribute: self.x1\n// constant: self\nset str rand504 attributes\nobj get arg0 rand503 rand504\nset str rand504 x1\nobj get rand503 rand502 rand504\nset str rand505 x1 attribute is null\nerrnull rand502 rand505\narr add rand501 rand502\n// method: self.getY()\n// constant: self\nset str rand508 methods\nobj get arg0 rand507 rand508\nset str rand508 getY\nobj get rand507 rand507 rand508\ncallgetvar rand506 rand507 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand501 rand506\nret rand501\nret\n~","getM":"~ mthd::getM:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.getY()]\n// array: [self.getX(),self.getY()]\nset obj rand509 []\n// method: self.getX()\n// constant: self\nset str rand512 methods\nobj get arg0 rand511 rand512\nset str rand512 getX\nobj get rand511 rand511 rand512\ncallgetvar rand510 rand511 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand509 rand510\n// method: self.getY()\n// constant: self\nset str rand515 methods\nobj get arg0 rand514 rand515\nset str rand515 getY\nobj get rand514 rand514 rand515\ncallgetvar rand513 rand514 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand509 rand513\nret rand509\nret\n~","getR":"~ mthd::getR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.getY()]\n// array: [self.x2,self.getY()]\nset obj rand516 []\n// attribute: self.x2\n// constant: self\nset str rand519 attributes\nobj get arg0 rand518 rand519\nset str rand519 x2\nobj get rand518 rand517 rand519\nset str rand520 x2 attribute is null\nerrnull rand517 rand520\narr add rand516 rand517\n// method: self.getY()\n// constant: self\nset str rand523 methods\nobj get arg0 rand522 rand523\nset str rand523 getY\nobj get rand522 rand522 rand523\ncallgetvar rand521 rand522 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand516 rand521\nret rand516\nret\n~","getBL":"~ mthd::getBL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y1]\n// array: [self.x1,self.y1]\nset obj rand524 []\n// attribute: self.x1\n// constant: self\nset str rand527 attributes\nobj get arg0 rand526 rand527\nset str rand527 x1\nobj get rand526 rand525 rand527\nset str rand528 x1 attribute is null\nerrnull rand525 rand528\narr add rand524 rand525\n// attribute: self.y1\n// constant: self\nset str rand531 attributes\nobj get arg0 rand530 rand531\nset str rand531 y1\nobj get rand530 rand529 rand531\nset str rand532 y1 attribute is null\nerrnull rand529 rand532\narr add rand524 rand529\nret rand524\nret\n~","getB":"~ mthd::getB:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y1]\n// array: [self.getX(),self.y1]\nset obj rand533 []\n// method: self.getX()\n// constant: self\nset str rand536 methods\nobj get arg0 rand535 rand536\nset str rand536 getX\nobj get rand535 rand535 rand536\ncallgetvar rand534 rand535 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand533 rand534\n// attribute: self.y1\n// constant: self\nset str rand539 attributes\nobj get arg0 rand538 rand539\nset str rand539 y1\nobj get rand538 rand537 rand539\nset str rand540 y1 attribute is null\nerrnull rand537 rand540\narr add rand533 rand537\nret rand533\nret\n~","getBR":"~ mthd::getBR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y1]\n// array: [self.x2,self.y1]\nset obj rand541 []\n// attribute: self.x2\n// constant: self\nset str rand544 attributes\nobj get arg0 rand543 rand544\nset str rand544 x2\nobj get rand543 rand542 rand544\nset str rand545 x2 attribute is null\nerrnull rand542 rand545\narr add rand541 rand542\n// attribute: self.y1\n// constant: self\nset str rand548 attributes\nobj get arg0 rand547 rand548\nset str rand548 y1\nobj get rand547 rand546 rand548\nset str rand549 y1 attribute is null\nerrnull rand546 rand549\narr add rand541 rand546\nret rand541\nret\n~","toString":"~ mthd::toString:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2~++self.y2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"\n// operation: \"Frame{\"++self.x1~++self.y1\n// operation: \"Frame{\"++self.x1\n// string: \"Frame{\"\nset str rand561 Frame{\n// attribute: self.x1\n// constant: self\nset str rand564 attributes\nobj get arg0 rand563 rand564\nset str rand564 x1\nobj get rand563 rand562 rand564\nset str rand565 x1 attribute is null\nerrnull rand562 rand565\nadd rand559 emptystring rand561 rand562\n// attribute: self.y1\n// constant: self\nset str rand567 attributes\nobj get arg0 rand566 rand567\nset str rand567 y1\nobj get rand566 rand560 rand567\nset str rand568 y1 attribute is null\nerrnull rand560 rand568\nadd rand557 emptystring rand559 comma rand560\n// string: \"to\"\nset str rand558 to\nadd rand555 emptystring rand557 space rand558\n// attribute: self.x2\n// constant: self\nset str rand570 attributes\nobj get arg0 rand569 rand570\nset str rand570 x2\nobj get rand569 rand556 rand570\nset str rand571 x2 attribute is null\nerrnull rand556 rand571\nadd rand553 emptystring rand555 space rand556\n// attribute: self.y2\n// constant: self\nset str rand573 attributes\nobj get arg0 rand572 rand573\nset str rand573 y2\nobj get rand572 rand554 rand573\nset str rand574 y2 attribute is null\nerrnull rand554 rand574\nadd rand551 emptystring rand553 comma rand554\n// string: \"}\"\nset str rand552 }\nadd rand550 emptystring rand551 rand552\nret rand550\nret\n~"},"attributes":{}}
set str rand422 methods
obj get rand404 rand421 rand422
set str rand422 .cns
obj get rand421 rand421 rand422
callvar rand421 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand404 rand405 rand409 rand413 rand417
ret rand404
~
~ globals:getGlobal
dupe rand585 arg0
// segment: type data = raw("globalget .target arg1");\nif (data == null) {\nio:throw("global" + id + "doesnt exist");\n}\nType dataType = typeof data;\nif (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}\nreturn data;
// assignment: type data = raw("globalget .target arg1")
// execution: raw("globalget .target arg1")
globalget rand588 arg1
// arg_branch: if (data == null) {\nio:throw("global" + id + "doesnt exist");\n}
// comparison: data == null
// variable: data
// constant: null
set null rand590
eql rand589 rand588 rand590
jn rand591 rand589
// segment: io:throw("global" + id + "doesnt exist");
// execution: io:throw("global" + id + "doesnt exist")
// operation: "global" + id + "doesnt exist"
// operation: "global"+id
// string: "global"
set str rand596 global
// argument: id
add rand594 emptystring rand596 space arg1
// string: "doesnt exist"
set str rand595 doesnt exist
add rand593 emptystring rand594 space rand595
call io:throw rand593
: rand591
// assignment: Type dataType = typeof data
// statement: typeof data
// variable: data
gettype rand597 rand588
// arg_branch: if (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}
// operation: dataType != type && safe
// comparison: dataType != type
// variable: dataType
// variable: type
neql rand599 rand597 rand585
// argument: safe
and rand598 rand599 arg2
jn rand600 rand598
// segment: io:throw("global is" + dataType.toString() + "not" + type.toString());
// execution: io:throw("global is" + dataType.toString() + "not" + type.toString())
// operation: "global is" + dataType.toString() + "not" + type.toString()
// operation: "global is"+dataType.toString()+"not"
// operation: "global is"+dataType.toString()
// string: "global is"
set str rand607 global is
// method: dataType.toString()
// variable: dataType
set str rand609 <Type:
add rand608 rand609 rand597
set str rand609 >
add rand608 rand608 rand609
add rand605 emptystring rand607 space rand608
// string: "not"
set str rand606 not
add rand603 emptystring rand605 space rand606
// method: type.toString()
// variable: type
set str rand610 <Generic:
add rand604 rand610 rand585
set str rand610 >
add rand604 rand604 rand610
add rand602 emptystring rand603 space rand604
call io:throw rand602
: rand600
// statement: return data
// variable: data
set str rand611 .any
settype rand588 rand611
ret rand588
~
~ globals:setGlobal
dupe rand614 arg0
// segment: raw("globalset arg1 arg2");\nreturn data;
// execution: raw("globalset arg1 arg2")
globalset arg1 arg2
// statement: return data
// argument: data
set str rand617 .generic
settype arg2 rand617
ret arg2
~
~ globals:hasGlobal
// segment: data = raw("globalget .target arg1");\nreturn data != null;
// assignment: data = raw("globalget .target arg1")
// execution: raw("globalget .target arg1")
globalget rand621 arg1
// statement: return data != null
// comparison: data != null
// variable: data
// constant: null
set null rand623
neql rand622 rand621 rand623
ret rand622
~
~ clone:_createClone
// segment: return raw("clone create arg2 arg1 arg0 .target");
// statement: return raw("clone create arg2 arg1 arg0 .target")
// execution: raw("clone create arg2 arg1 arg0 .target")
clone create arg2 arg1 arg0 rand631
ret rand631
~
~ clone:_killClone
// segment: return raw("clone kill arg0");
// statement: return raw("clone kill arg0")
// execution: raw("clone kill arg0")
clone kill arg0
ret rand635
~
~ clone:getCloneData
dupe rand638 arg0
// segment: return raw("clone getData .target arg1");
// statement: return raw("clone getData .target arg1")
// execution: raw("clone getData .target arg1")
clone getData rand640 arg1
set str rand641 .any
settype rand640 rand641
ret rand640
~
~ utils:splitChar
// segment: Arr<str> tokens = [""];\n\n\nbool inDoubleQuotes = false;\n\n\nbool intactQuotes = rules.contains("intactQuotes");\n\nfor (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}\n\nreturn tokens;
// assignment: Arr<str> tokens = [""]
// array: [""]
set obj rand651 [""]
// assignment: bool inDoubleQuotes = false
// constant: false
set bool rand652 false
// assignment: bool intactQuotes = rules.contains("intactQuotes")
// method: rules.contains("intactQuotes")
// argument: rules
// string: "intactQuotes"
set str rand654 intactQuotes
arr has rand653 arg2 rand654
// arg_branch: for (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}
// variable: i
set num rand658 1
set num rand659 0
// attribute: text.length
// argument: text
len rand655 arg0
: rand656
sml rand660 rand659 rand655
jn rand657 rand660
// segment: str char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;
// assignment: str char = text[i]
// key: text[i]
// variable: i
// argument: text
obj get arg0 rand661 rand659
set str rand662  doesnt exist on text
add rand662 rand659 rand662
ernull rand661 rand662
// arg_branch: if (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}
// comparison: char == "\\"
// variable: char
// string: "\\"
set str rand664 \\
eql rand663 rand661 rand664
jn rand665 rand663
// segment: tokens[tokens.length-1] ++= char;\ncontinue;
// assignment: tokens[tokens.length-1] ++= char
// variable: tokens
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand668 rand651
// number: 1
set num rand669 1
sub rand667 rand668 rand669
// key: tokens[tokens.length-1]
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand672 rand651
// number: 1
set num rand673 1
sub rand671 rand672 rand673
// variable: tokens
obj get rand651 rand670 rand671
set str rand674  doesnt exist on tokens
add rand674 rand671 rand674
ernull rand670 rand674
// variable: char
dupe rand675 rand661
add rand661 emptystring rand661 rand675
obj set rand651 rand667 rand661
// statement: continue
jai rand656 rand659
: rand665
// arg_branch: if (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}
// variable: intactQuotes
jn rand677 rand653
// arg_branch: if (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}
// comparison: char == "\""
// variable: char
// string: "\""
set str rand680 "
eql rand679 rand661 rand680
jn rand681 rand679
// segment: inDoubleQuotes = !inDoubleQuotes;
// assignment: inDoubleQuotes = !inDoubleQuotes
// operation: !inDoubleQuotes
// variable: inDoubleQuotes
inv rand652 rand652
: rand681
: rand677
// arg_branch: if (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}
// operation: !inDoubleQuotes
// variable: inDoubleQuotes
inv rand683 rand652
jn rand684 rand683
// arg_branch: if (char == splitter) {\ntokens.append("");\ncontinue;\n}
// comparison: char == splitter
// variable: char
// argument: splitter
eql rand686 rand661 arg1
jn rand687 rand686
// segment: tokens.append("");\ncontinue;
// method: tokens.append("")
// variable: tokens
// string: ""
set str rand689 
arr add rand651 rand689
// statement: continue
jai rand656 rand659
: rand687
: rand684
// assignment: tokens[tokens.length-1] = tokens[tokens.length-1] ++ char
// variable: tokens
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand691 rand651
// number: 1
set num rand692 1
sub rand690 rand691 rand692
// operation: tokens[tokens.length-1]++char
// key: tokens[tokens.length-1]
// operation: tokens.length-1
// attribute: tokens.length
// variable: tokens
len rand696 rand651
// number: 1
set num rand697 1
sub rand695 rand696 rand697
// variable: tokens
obj get rand651 rand694 rand695
set str rand698  doesnt exist on tokens
add rand698 rand695 rand698
ernull rand694 rand698
// variable: char
add rand693 emptystring rand694 rand661
obj set rand651 rand690 rand693
jai rand656 rand659
: rand657
// statement: return tokens
// variable: tokens
ret rand651
~
~ utils:deEscape
// segment: str newStr = "";\nfor (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}\nreturn newStr;
// assignment: str newStr = ""
// string: ""
set str rand702 
// arg_branch: for (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}
// variable: i
set num rand706 1
set num rand707 0
// attribute: text.length
// argument: text
len rand703 arg0
: rand704
sml rand708 rand707 rand703
jn rand705 rand708
// segment: str char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}
// assignment: str char = text[i]
// key: text[i]
// variable: i
// argument: text
obj get arg0 rand709 rand707
set str rand710  doesnt exist on text
add rand710 rand707 rand710
ernull rand709 rand710
// arg_branch: if (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}
// comparison: char == "\\"
// variable: char
// string: "\\"
set str rand712 \\
eql rand711 rand709 rand712
jn rand713 rand711
// segment: char = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;
// assignment: char = text[i++]
// key: text[i++]
// assignment: i++
set num rand717 1
add rand707 rand707 rand717
dupe rand715 rand707
// argument: text
obj get arg0 rand709 rand715
set str rand718  doesnt exist on text
add rand718 rand715 rand718
ernull rand709 rand718
// arg_branch: if (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}
// comparison: char == "n"
// variable: char
// string: "n"
set str rand720 n
eql rand719 rand709 rand720
jn rand721 rand719
// segment: newStr ++= "\n";\ncontinue;
// assignment: newStr ++= "\n"
// string: "\n"
set str rand723 \n
add rand702 emptystring rand702 rand723
// statement: continue
jai rand704 rand707
: rand721
// assignment: newStr ++= char
// variable: char
dupe rand724 rand709
add rand702 emptystring rand702 rand724
// statement: continue
jai rand704 rand707
: rand713
jai rand704 rand707
: rand705
// statement: return newStr
// variable: newStr
ret rand702
~
~ utils:inBox
// segment: return x > x1 && y > y1 && x < x2 && y < y2;
// statement: return x > x1 && y > y1 && x < x2 && y < y2
// operation: x > x1 && y > y1 && x < x2 && y < y2
// operation: x > x1&&y > y1&&x < x2
// operation: x > x1&&y > y1
// comparison: x > x1
// argument: x
// argument: x1
gtr rand738 arg0 arg2
// comparison: y > y1
// argument: y
// argument: y1
gtr rand739 arg1 arg3
and rand736 rand738 rand739
// comparison: x < x2
// argument: x
// argument: x2
sml rand737 arg0 arg4
and rand734 rand736 rand737
// comparison: y < y2
// argument: y
// argument: y2
sml rand735 arg1 arg5
and rand733 rand734 rand735
ret rand733
~
~ text:_padNum
// segment: v = string;\nif (v.length == 1) {\nv = "0" ++ v;\n}\nreturn v;
// assignment: v = string
// argument: string
dupe rand743 arg0
// arg_branch: if (v.length == 1) {\nv = "0" ++ v;\n}
// comparison: v.length == 1
// attribute: v.length
// variable: v
len rand745 rand743
// number: 1
set num rand746 1
eql rand744 rand745 rand746
jn rand747 rand744
// segment: v = "0" ++ v;
// assignment: v = "0" ++ v
// operation: "0"++v
// string: "0"
set str rand749 0
// variable: v
add rand743 emptystring rand749 rand743
: rand747
// statement: return v
// variable: v
ret rand743
~
~ text:embedCommand
// segment: str char = state.config.embeddedCommandChar;\nreturn char ++ _padNum(command.length.toString()) ++ command ++ _padNum(data.length.toString()) ++ data;
// assignment: str char = state.config.embeddedCommandChar
// attribute: state.config.embeddedCommandChar
// attribute: state.config
// argument: state
set str rand759 attributes
obj get arg0 rand758 rand759
set str rand759 config
obj get rand758 rand756 rand759
set str rand760 attributes
obj get rand756 rand757 rand760
set str rand760 embeddedCommandChar
obj get rand757 rand755 rand760
// statement: return char ++ _padNum(command.length.toString()) ++ command ++ _padNum(data.length.toString()) ++ data
// operation: char ++ _padNum(command.length.toString()) ++ command ++ _padNum(data.length.toString()) ++ data
// operation: char++_padNum(command.length.toString())++command++_padNum(data.length.toString())
// operation: char++_padNum(command.length.toString())++command
// operation: char++_padNum(command.length.toString())
// variable: char
// execution: _padNum(command.length.toString())
// method: command.length.toString()
// attribute: command.length
// argument: command
len rand768 arg1
add rand767 emptystring rand768
callget rand766 text:_padNum rand767
add rand765 emptystring rand755 rand766
// argument: command
add rand763 emptystring rand765 arg1
// execution: _padNum(data.length.toString())
// method: data.length.toString()
// attribute: data.length
// argument: data
len rand770 arg2
add rand769 emptystring rand770
callget rand764 text:_padNum rand769
add rand762 emptystring rand763 rand764
// argument: data
add rand761 emptystring rand762 arg2
ret rand761
~
~ text:embedColor
// segment: return embedCommand(state, "color", color);
// statement: return embedCommand(state, "color", color)
// execution: embedCommand(state, "color", color)
// argument: state
// string: "color"
set str rand776 color
// argument: color
callget rand775 text:embedCommand arg0 rand776 arg1
ret rand775
~
~ text:embedBoldness
// segment: return embedCommand(state, "boldness", boldness.toString());
// statement: return embedCommand(state, "boldness", boldness.toString())
// execution: embedCommand(state, "boldness", boldness.toString())
// argument: state
// string: "boldness"
set str rand782 boldness
// method: boldness.toString()
// argument: boldness
set str rand783 <num>
callget rand781 text:embedCommand arg0 rand782 rand783
ret rand781
~
~ text:embedLocalDirection
// segment: return embedCommand(state, "ldirection", direction.toString());
// statement: return embedCommand(state, "ldirection", direction.toString())
// execution: embedCommand(state, "ldirection", direction.toString())
// argument: state
// string: "ldirection"
set str rand789 ldirection
// method: direction.toString()
// argument: direction
set str rand790 <num>
callget rand788 text:embedCommand arg0 rand789 rand790
ret rand788
~
~ text:embedResetBoldness
// segment: return embedCommand(state, "rboldness");
// statement: return embedCommand(state, "rboldness")
// execution: embedCommand(state, "rboldness")
// argument: state
// string: "rboldness"
set str rand795 rboldness
// string: ""
set str rand796 
callget rand794 text:embedCommand arg0 rand795 rand796
ret rand794
~
~ text:embedResetLocalDirection
// segment: return embedCommand(state, "rdirection");
// statement: return embedCommand(state, "rdirection")
// execution: embedCommand(state, "rdirection")
// argument: state
// string: "rdirection"
set str rand801 rdirection
// string: ""
set str rand802 
callget rand800 text:embedCommand arg0 rand801 rand802
ret rand800
~
~ text:embedReset
// segment: return embedCommand(state, "r");
// statement: return embedCommand(state, "r")
// execution: embedCommand(state, "r")
// argument: state
// string: "r"
set str rand807 r
// string: ""
set str rand808 
callget rand806 text:embedCommand arg0 rand807 rand808
ret rand806
~
~ fs:splitFilePath
// segment: num i = 0;\nwhile ((str char = string[i]) != "/" && i < string.length) { i ++; }\nstr volume = string.slice(0,i);\n\nnum pathI = string.length - 1;\nwhile ((str char = string[pathI]) != "/" && pathI > 0) { pathI --; }\nstr path = string.slice(i+1, pathI);\n\nnum typeI = string.length - 1;\nwhile ((str char = string[typeI]) != "." && typeI > 0) { typeI --; }\n\nif (typeI != 0) {\nstr type = string.slice(typeI+1);\n\nstr name = string.slice(pathI+1, typeI);\n\nreturn [volume, path, name, type];\n} else {\nio:throw("invalid file path");\n}\nreturn [];
// assignment: num i = 0
// number: 0
set num rand812 0
// arg_branch: while ((str char = string[i]) != "/" && i < string.length) { i ++; }
: rand813
// operation: (str char = string[i]) != "/" && i < string.length
// comparison: (str char = string[i]) != "/"
// assignment: (str char = string[i])
// key: string[i]
// variable: i
// argument: string
obj get arg0 rand821 rand812
set str rand822  doesnt exist on string
add rand822 rand812 rand822
ernull rand821 rand822
dupe rand819 rand821
// string: "/"
set str rand820 /
neql rand817 rand819 rand820
// comparison: i < string.length
// variable: i
// attribute: string.length
// argument: string
len rand823 arg0
sml rand818 rand812 rand823
and rand816 rand817 rand818
jn rand814 rand816
// segment: i ++;
// assignment: i ++
set num rand825 1
add rand812 rand812 rand825
jp rand813
: rand814
// assignment: str volume = string.slice(0,i)
// method: string.slice(0,i)
// argument: string
// number: 0
set num rand827 0
// variable: i
slice rand826 arg0 rand827 rand812
// assignment: num pathI = string.length - 1
// operation: string.length-1
// attribute: string.length
// argument: string
len rand829 arg0
// number: 1
set num rand830 1
sub rand828 rand829 rand830
// arg_branch: while ((str char = string[pathI]) != "/" && pathI > 0) { pathI --; }
: rand831
// operation: (str char = string[pathI]) != "/" && pathI > 0
// comparison: (str char = string[pathI]) != "/"
// assignment: (str char = string[pathI])
// key: string[pathI]
// variable: pathI
// argument: string
obj get arg0 rand821 rand828
set str rand839  doesnt exist on string
add rand839 rand828 rand839
ernull rand821 rand839
dupe rand837 rand821
// string: "/"
set str rand838 /
neql rand835 rand837 rand838
// comparison: pathI > 0
// variable: pathI
// number: 0
set num rand840 0
gtr rand836 rand828 rand840
and rand834 rand835 rand836
jn rand832 rand834
// segment: pathI --;
// assignment: pathI --
set num rand842 1
sub rand828 rand828 rand842
jp rand831
: rand832
// assignment: str path = string.slice(i+1, pathI)
// method: string.slice(i+1, pathI)
// argument: string
// operation: i+1
// variable: i
// number: 1
set num rand845 1
add rand844 rand812 rand845
// variable: pathI
slice rand843 arg0 rand844 rand828
// assignment: num typeI = string.length - 1
// operation: string.length-1
// attribute: string.length
// argument: string
len rand847 arg0
// number: 1
set num rand848 1
sub rand846 rand847 rand848
// arg_branch: while ((str char = string[typeI]) != "." && typeI > 0) { typeI --; }
: rand849
// operation: (str char = string[typeI]) != "." && typeI > 0
// comparison: (str char = string[typeI]) != "."
// assignment: (str char = string[typeI])
// key: string[typeI]
// variable: typeI
// argument: string
obj get arg0 rand821 rand846
set str rand857  doesnt exist on string
add rand857 rand846 rand857
ernull rand821 rand857
dupe rand855 rand821
// string: "."
set str rand856 .
neql rand853 rand855 rand856
// comparison: typeI > 0
// variable: typeI
// number: 0
set num rand858 0
gtr rand854 rand846 rand858
and rand852 rand853 rand854
jn rand850 rand852
// segment: typeI --;
// assignment: typeI --
set num rand860 1
sub rand846 rand846 rand860
jp rand849
: rand850
// arg_branch: if (typeI != 0) {\nstr type = string.slice(typeI+1);\n\nstr name = string.slice(pathI+1, typeI);\n\nreturn [volume, path, name, type];\n}
// comparison: typeI != 0
// variable: typeI
// number: 0
set num rand862 0
neql rand861 rand846 rand862
jn rand863 rand861
// segment: str type = string.slice(typeI+1);\n\nstr name = string.slice(pathI+1, typeI);\n\nreturn [volume, path, name, type];
// assignment: str type = string.slice(typeI+1)
// method: string.slice(typeI+1)
// argument: string
// operation: typeI+1
// variable: typeI
// number: 1
set num rand867 1
add rand866 rand846 rand867
slice rand865 arg0 rand866
// assignment: str name = string.slice(pathI+1, typeI)
// method: string.slice(pathI+1, typeI)
// argument: string
// operation: pathI+1
// variable: pathI
// number: 1
set num rand870 1
add rand869 rand828 rand870
// variable: typeI
slice rand868 arg0 rand869 rand846
// statement: return [volume, path, name, type]
// array: [volume, path, name, type]
set obj rand871 []
// variable: volume
arr add rand871 rand826
// variable: path
arr add rand871 rand843
// variable: name
arr add rand871 rand868
// variable: type
arr add rand871 rand865
ret rand871
: rand863
jp rand873
: rand863
// segment: io:throw("invalid file path");
// execution: io:throw("invalid file path")
// string: "invalid file path"
set str rand874 invalid file path
call io:throw rand874
: rand873
// statement: return []
// array: []
set obj rand875 []
ret rand875
~
~ fs:open
// segment: return new FileHandle(new FilePath(path), globals:getGlobal<FileSystem>("fs", false));
// statement: return new FileHandle(new FilePath(path), globals:getGlobal<FileSystem>("fs", false))
// instance: new FileHandle(new FilePath(path), globals:getGlobal<FileSystem>("fs", false))
// instance: new FilePath(path)
// argument: path
set obj rand888 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: Arr<str> tokens = splitFilePath(path);\\nself.volumeName = tokens[0];\\nself.path = tokens[1];\\nself.name = tokens[2];\\nself.type = tokens[3];\n// assignment: Arr<str> tokens = splitFilePath(path)\n// execution: splitFilePath(path)\n// argument: path\ncallget rand892 fs:splitFilePath arg1\n// assignment: self.volumeName = tokens[0]\n// constant: self\n// attribute: self.volumeName\n// constant: self\nset str rand896 attributes\nobj get arg0 rand895 rand896\nset str rand896 volumeName\nobj get rand895 rand894 rand896\n// key: tokens[0]\n// number: 0\nset num rand897 0\n// variable: tokens\nobj get rand892 rand894 rand897\nset str rand898  doesnt exist on tokens\nadd rand898 rand897 rand898\nernull rand894 rand898\nobj set rand895 rand896 rand894\n// assignment: self.path = tokens[1]\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand902 attributes\nobj get arg0 rand901 rand902\nset str rand902 path\nobj get rand901 rand900 rand902\n// key: tokens[1]\n// number: 1\nset num rand903 1\n// variable: tokens\nobj get rand892 rand900 rand903\nset str rand904  doesnt exist on tokens\nadd rand904 rand903 rand904\nernull rand900 rand904\nobj set rand901 rand902 rand900\n// assignment: self.name = tokens[2]\n// constant: self\n// attribute: self.name\n// constant: self\nset str rand908 attributes\nobj get arg0 rand907 rand908\nset str rand908 name\nobj get rand907 rand906 rand908\n// key: tokens[2]\n// number: 2\nset num rand909 2\n// variable: tokens\nobj get rand892 rand906 rand909\nset str rand910  doesnt exist on tokens\nadd rand910 rand909 rand910\nernull rand906 rand910\nobj set rand907 rand908 rand906\n// assignment: self.type = tokens[3]\n// constant: self\n// attribute: self.type\n// constant: self\nset str rand914 attributes\nobj get arg0 rand913 rand914\nset str rand914 type\nobj get rand913 rand912 rand914\n// key: tokens[3]\n// number: 3\nset num rand915 3\n// variable: tokens\nobj get rand892 rand912 rand915\nset str rand916  doesnt exist on tokens\nadd rand916 rand915 rand916\nernull rand912 rand916\nobj set rand913 rand914 rand912\nret\n~","toString":"~ mthd::toString:1441a7909c087dbbe7ce59881b9df8b9\n// segment: return self.volumeName ++ \"/\" ++ self.path ++ \"/\" ++ self.name ++ \".\" ++ self.type;\n// statement: return self.volumeName ++ \"/\" ++ self.path ++ \"/\" ++ self.name ++ \".\" ++ self.type\n// operation: self.volumeName ++ \"/\" ++ self.path ++ \"/\" ++ self.name ++ \".\" ++ self.type\n// operation: self.volumeName++\"/\"++self.path++\"/\"++self.name++\".\"\n// operation: self.volumeName++\"/\"++self.path++\"/\"++self.name\n// operation: self.volumeName++\"/\"++self.path++\"/\"\n// operation: self.volumeName++\"/\"++self.path\n// operation: self.volumeName++\"/\"\n// attribute: self.volumeName\n// constant: self\nset str rand931 attributes\nobj get arg0 rand930 rand931\nset str rand931 volumeName\nobj get rand930 rand928 rand931\nset str rand932 volumeName attribute is null\nerrnull rand928 rand932\n// string: \"/\"\nset str rand929 /\nadd rand926 emptystring rand928 rand929\n// attribute: self.path\n// constant: self\nset str rand934 attributes\nobj get arg0 rand933 rand934\nset str rand934 path\nobj get rand933 rand927 rand934\nset str rand935 path attribute is null\nerrnull rand927 rand935\nadd rand924 emptystring rand926 rand927\n// string: \"/\"\nset str rand925 /\nadd rand922 emptystring rand924 rand925\n// attribute: self.name\n// constant: self\nset str rand937 attributes\nobj get arg0 rand936 rand937\nset str rand937 name\nobj get rand936 rand923 rand937\nset str rand938 name attribute is null\nerrnull rand923 rand938\nadd rand920 emptystring rand922 rand923\n// string: \".\"\nset str rand921 .\nadd rand918 emptystring rand920 rand921\n// attribute: self.type\n// constant: self\nset str rand940 attributes\nobj get arg0 rand939 rand940\nset str rand940 type\nobj get rand939 rand919 rand940\nset str rand941 type attribute is null\nerrnull rand919 rand941\nadd rand917 emptystring rand918 rand919\nret rand917\nret\n~"},"attributes":{}}
set str rand890 methods
obj get rand888 rand889 rand890
set str rand890 .cns
obj get rand889 rand889 rand890
callvar rand889 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand888 arg0
// typed_execution: globals:getGlobal<FileSystem>("fs", false)
// string: "fs"
set str rand943 fs
// constant: false
set bool rand944 false
set type rand945 fs:FileSystem
callget rand942 globals:getGlobal rand945 rand943 rand944
istypeg rand946 rand942 rand945
ji rand949 rand946
set str rand947 generic function returned 
set str rand948  not the specified type 
add rand947 rand947 .typechecktype rand948
add rand947 rand947 rand945
err rand947
: rand949
set obj rand887 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\\nself.system = system;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand956 attributes\nobj get arg0 rand955 rand956\nset str rand956 path\nobj get rand955 rand954 rand956\n// argument: path\ndupe rand954 arg1\nobj set rand955 rand956 rand954\n// assignment: self.system = system\n// constant: self\n// attribute: self.system\n// constant: self\nset str rand959 attributes\nobj get arg0 rand958 rand959\nset str rand959 system\nobj get rand958 rand957 rand959\n// argument: system\ndupe rand957 arg2\nobj set rand958 rand959 rand957\nret\n~","readText":"~ mthd::readText:1441a7909c087dbbe7ce59881b9df8b9\n// segment: str volumeName = self.path.volumeName;\\nif (self.system.volumes.keys().contains(volumeName)) {\\nVolume volume = self.system.volumes[volumeName];\\nreturn volume.readText(self.path);\\n} else {\\nio:throw(\"unknown volume\" + volumeName);\\n}\\nreturn \"\";\n// assignment: str volumeName = self.path.volumeName\n// attribute: self.path.volumeName\n// attribute: self.path\n// constant: self\nset str rand964 attributes\nobj get arg0 rand963 rand964\nset str rand964 path\nobj get rand963 rand961 rand964\nset str rand965 path attribute is null\nerrnull rand961 rand965\nset str rand966 attributes\nobj get rand961 rand962 rand966\nset str rand966 volumeName\nobj get rand962 rand960 rand966\nset str rand967 volumeName attribute is null\nerrnull rand960 rand967\n// arg_branch: if (self.system.volumes.keys().contains(volumeName)) {\\nVolume volume = self.system.volumes[volumeName];\\nreturn volume.readText(self.path);\\n}\n// method: self.system.volumes.keys().contains(volumeName)\n// method: self.system.volumes.keys()\n// attribute: self.system.volumes\n// attribute: self.system\n// constant: self\nset str rand974 attributes\nobj get arg0 rand973 rand974\nset str rand974 system\nobj get rand973 rand971 rand974\nset str rand975 system attribute is null\nerrnull rand971 rand975\nset str rand976 attributes\nobj get rand971 rand972 rand976\nset str rand976 volumes\nobj get rand972 rand970 rand976\nobj keys rand969 rand970\n// variable: volumeName\narr has rand968 rand969 rand960\njn rand977 rand968\n// segment: Volume volume = self.system.volumes[volumeName];\\nreturn volume.readText(self.path);\n// assignment: Volume volume = self.system.volumes[volumeName]\n// key: self.system.volumes[volumeName]\n// variable: volumeName\n// attribute: self.system.volumes\n// attribute: self.system\n// constant: self\nset str rand984 attributes\nobj get arg0 rand983 rand984\nset str rand984 system\nobj get rand983 rand981 rand984\nset str rand985 system attribute is null\nerrnull rand981 rand985\nset str rand986 attributes\nobj get rand981 rand982 rand986\nset str rand986 volumes\nobj get rand982 rand980 rand986\nobj get rand980 rand979 rand960\nset str rand987  doesnt exist on self.system.volumes\nadd rand987 rand960 rand987\nernull rand979 rand987\n// statement: return volume.readText(self.path)\n// method: volume.readText(self.path)\n// variable: volume\n// attribute: self.path\n// constant: self\nset str rand993 attributes\nobj get arg0 rand992 rand993\nset str rand993 path\nobj get rand992 rand991 rand993\nset str rand994 path attribute is null\nerrnull rand991 rand994\nset str rand990 methods\nobj get rand979 rand989 rand990\nset str rand990 readText\nobj get rand989 rand989 rand990\ncallgetvar rand988 rand989 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand979 rand991\nret rand988\n: rand977\njp rand996\n: rand977\n// segment: io:throw(\"unknown volume\" + volumeName);\n// execution: io:throw(\"unknown volume\" + volumeName)\n// operation: \"unknown volume\" + volumeName\n// string: \"unknown volume\"\nset str rand998 unknown volume\n// variable: volumeName\nadd rand997 emptystring rand998 space rand960\ncall io:throw rand997\n: rand996\n// statement: return \"\"\n// string: \"\"\nset str rand999 \nret rand999\nret\n~"},"attributes":{}}
set str rand951 methods
obj get rand887 rand950 rand951
set str rand951 .cns
obj get rand950 rand950 rand951
callvar rand950 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand887 rand888 rand942
ret rand887
~
~ INLÂ§0.08170978764219372
// segment: return raw("fs get .target arg0");
// statement: return raw("fs get .target arg0")
// execution: raw("fs get .target arg0")
fs get rand1056 arg0
ret rand1056
~
~ fs:init
// segment: FileSystem fs = new FileSystem();\nglobals:setGlobal<FileSystem>("fs", fs);\n\nfs.addVolume("sys", new Volume("flf"));
// assignment: FileSystem fs = new FileSystem()
// instance: new FileSystem()
set obj rand1002 {"methods":{"addVolume":"~ mthd::addVolume:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (self.volumes.keys().contains(name)) {\\nio:throw(\"volume\" + name + \"already exists.\");\\n}\\nself.volumes[name] = volume;\n// arg_branch: if (self.volumes.keys().contains(name)) {\\nio:throw(\"volume\" + name + \"already exists.\");\\n}\n// method: self.volumes.keys().contains(name)\n// method: self.volumes.keys()\n// attribute: self.volumes\n// constant: self\nset str rand1011 attributes\nobj get arg0 rand1010 rand1011\nset str rand1011 volumes\nobj get rand1010 rand1009 rand1011\nobj keys rand1008 rand1009\n// argument: name\narr has rand1007 rand1008 arg1\njn rand1012 rand1007\n// segment: io:throw(\"volume\" + name + \"already exists.\");\n// execution: io:throw(\"volume\" + name + \"already exists.\")\n// operation: \"volume\" + name + \"already exists.\"\n// operation: \"volume\"+name\n// string: \"volume\"\nset str rand1017 volume\n// argument: name\nadd rand1015 emptystring rand1017 space arg1\n// string: \"already exists.\"\nset str rand1016 already exists.\nadd rand1014 emptystring rand1015 space rand1016\ncall io:throw rand1014\n: rand1012\n// assignment: self.volumes[name] = volume\n// attribute: self.volumes\n// constant: self\nset str rand1020 attributes\nobj get arg0 rand1019 rand1020\nset str rand1020 volumes\nobj get rand1019 rand1018 rand1020\n// argument: name\n// argument: volume\nobj set rand1018 arg1 arg2\nret\n~"},"attributes":{}}
set str rand1021 attributes
obj get rand1002 rand1022 rand1021
// object: {}
set obj rand1023 {}
set str rand1024 volumes
obj set rand1022 rand1024 rand1023
// typed_execution: globals:setGlobal<FileSystem>("fs", fs)
// string: "fs"
set str rand1025 fs
// variable: fs
set str rand1026 fs:FileSystem
settype rand1002 rand1026
set type rand1027 fs:FileSystem
call globals:setGlobal rand1027 rand1025 rand1002
// method: fs.addVolume("sys", new Volume("flf"))
// variable: fs
// string: "sys"
set str rand1030 sys
// instance: new Volume("flf")
// string: "flf"
set str rand1032 flf
set obj rand1031 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (![\"flf\"].contains(source)) {\\nio:throw(\"unknown volume source\" + source);\\n}\\nself.source = source;\n// arg_branch: if (![\"flf\"].contains(source)) {\\nio:throw(\"unknown volume source\" + source);\\n}\n// operation: ![\"flf\"].contains(source)\n// method: [\"flf\"].contains(source)\n// array: [\"flf\"]\nset obj rand1038 [\"flf\"]\n// argument: source\narr has rand1037 rand1038 arg1\ninv rand1036 rand1037\njn rand1039 rand1036\n// segment: io:throw(\"unknown volume source\" + source);\n// execution: io:throw(\"unknown volume source\" + source)\n// operation: \"unknown volume source\" + source\n// string: \"unknown volume source\"\nset str rand1042 unknown volume source\n// argument: source\nadd rand1041 emptystring rand1042 space arg1\ncall io:throw rand1041\n: rand1039\n// assignment: self.source = source\n// constant: self\n// attribute: self.source\n// constant: self\nset str rand1045 attributes\nobj get arg0 rand1044 rand1045\nset str rand1045 source\nobj get rand1044 rand1043 rand1045\n// argument: source\ndupe rand1043 arg1\nobj set rand1044 rand1045 rand1043\nret\n~","readText":"~ mthd::readText:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (self.source == \"flf\") {\\nread = str(str _) {\\nreturn raw(\"fs get .target arg0\");\\n}\\nstr data = read(path.toString());\\nreturn data;\\n}\\nio:throw(\"cannot read from source of type\" + self.source);\\nreturn \"\";\n// arg_branch: if (self.source == \"flf\") {\\nread = str(str _) {\\nreturn raw(\"fs get .target arg0\");\\n}\\nstr data = read(path.toString());\\nreturn data;\\n}\n// comparison: self.source == \"flf\"\n// attribute: self.source\n// constant: self\nset str rand1051 attributes\nobj get arg0 rand1050 rand1051\nset str rand1051 source\nobj get rand1050 rand1048 rand1051\nset str rand1052 source attribute is null\nerrnull rand1048 rand1052\n// string: \"flf\"\nset str rand1049 flf\neql rand1047 rand1048 rand1049\njn rand1053 rand1047\n// segment: read = str(str _) {\\nreturn raw(\"fs get .target arg0\");\\n}\\nstr data = read(path.toString());\\nreturn data;\n// assignment: read = str(str _) {\\nreturn raw(\"fs get .target arg0\");\\n}\n// function: str(str _) {\\nreturn raw(\"fs get .target arg0\");\\n}\n// function: str(str _) {\\nreturn raw(\"fs get .target arg0\");\\n}\nset str rand1058 <Func>\n// assignment: str data = read(path.toString())\n// execution: read(path.toString())\n// method: path.toString()\n// argument: path\nset str rand1062 methods\nobj get arg1 rand1061 rand1062\nset str rand1062 toString\nobj get rand1061 rand1061 rand1062\ncallgetvar rand1060 rand1061 mthd::toString:1441a7909c087dbbe7ce59881b9df8b9 arg1 \ncallget rand1059 INLÂ§0.08170978764219372 rand1060\n// statement: return data\n// variable: data\nret rand1059\n: rand1053\n// execution: io:throw(\"cannot read from source of type\" + self.source)\n// operation: \"cannot read from source of type\" + self.source\n// string: \"cannot read from source of type\"\nset str rand1064 cannot read from source of type\n// attribute: self.source\n// constant: self\nset str rand1067 attributes\nobj get arg0 rand1066 rand1067\nset str rand1067 source\nobj get rand1066 rand1065 rand1067\nset str rand1068 source attribute is null\nerrnull rand1065 rand1068\nadd rand1063 emptystring rand1064 space rand1065\ncall io:throw rand1063\n// statement: return \"\"\n// string: \"\"\nset str rand1069 \nret rand1069\nret\n~"},"attributes":{}}
set str rand1034 methods
obj get rand1031 rand1033 rand1034
set str rand1034 .cns
obj get rand1033 rand1033 rand1034
callvar rand1033 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1031 rand1032
set str rand1029 methods
obj get rand1002 rand1028 rand1029
set str rand1029 addVolume
obj get rand1028 rand1028 rand1029
callvar rand1028 mthd::addVolume:1441a7909c087dbbe7ce59881b9df8b9 rand1002 rand1030 rand1031
ret
~
~ terminal:init
// segment: graphicsState.drawSurface.loadFontFromUrl(state.config.fontUrl);\nglobals:setGlobal<TerminalContext>("terminalContext", new TerminalContext(state, {\n"echo": new TerminalCommand("sys/terminal/echo.fbl"),\n"clear": new TerminalCommand("sys/terminal/clear.fbl"),\n\n"state": new TerminalCommand("sys/terminal/state.fbl"),\n\n"spinny": new TerminalCommand("sys/terminal/spinny.fbl"),\n"fib": new TerminalCommand("sys/terminal/fib.fbl"),\n"fltr": new TerminalCommand("sys/terminal/fltr.fbl"),\n}));\n\nTerminalContext context = globals:getGlobal<TerminalContext>("terminalContext");\nglobals:setGlobal<TerminalInstance>("terminalInstance", new TerminalInstance(context, state.inputState.map));
// method: graphicsState.drawSurface.loadFontFromUrl(state.config.fontUrl)
// attribute: graphicsState.drawSurface
// argument: graphicsState
set str rand1086 attributes
obj get arg1 rand1085 rand1086
set str rand1086 drawSurface
obj get rand1085 rand1084 rand1086
set str rand1087 drawSurface attribute is null
errnull rand1084 rand1087
// attribute: state.config.fontUrl
// attribute: state.config
// argument: state
set str rand1094 attributes
obj get arg0 rand1093 rand1094
set str rand1094 config
obj get rand1093 rand1091 rand1094
set str rand1095 attributes
obj get rand1091 rand1092 rand1095
set str rand1095 fontUrl
obj get rand1092 rand1090 rand1095
set str rand1089 methods
obj get rand1084 rand1088 rand1089
set str rand1089 loadFontFromUrl
obj get rand1088 rand1088 rand1089
callvar rand1088 mthd::loadFontFromUrl:1441a7909c087dbbe7ce59881b9df8b9 rand1084 rand1090
// typed_execution: globals:setGlobal<TerminalContext>("terminalContext", new TerminalContext(state, {\n"echo": new TerminalCommand("sys/terminal/echo.fbl"),\n"clear": new TerminalCommand("sys/terminal/clear.fbl"),\n\n"state": new TerminalCommand("sys/terminal/state.fbl"),\n\n"spinny": new TerminalCommand("sys/terminal/spinny.fbl"),\n"fib": new TerminalCommand("sys/terminal/fib.fbl"),\n"fltr": new TerminalCommand("sys/terminal/fltr.fbl"),\n}))
// string: "terminalContext"
set str rand1096 terminalContext
// instance: new TerminalContext(state, {\n"echo": new TerminalCommand("sys/terminal/echo.fbl"),\n"clear": new TerminalCommand("sys/terminal/clear.fbl"),\n\n"state": new TerminalCommand("sys/terminal/state.fbl"),\n\n"spinny": new TerminalCommand("sys/terminal/spinny.fbl"),\n"fib": new TerminalCommand("sys/terminal/fib.fbl"),\n"fltr": new TerminalCommand("sys/terminal/fltr.fbl"),\n})
// argument: state
// object: {\n"echo": new TerminalCommand("sys/terminal/echo.fbl"),\n"clear": new TerminalCommand("sys/terminal/clear.fbl"),\n\n"state": new TerminalCommand("sys/terminal/state.fbl"),\n\n"spinny": new TerminalCommand("sys/terminal/spinny.fbl"),\n"fib": new TerminalCommand("sys/terminal/fib.fbl"),\n"fltr": new TerminalCommand("sys/terminal/fltr.fbl"),\n}
set obj rand1098 {}
// instance: new TerminalCommand("sys/terminal/echo.fbl")
// string: "sys/terminal/echo.fbl"
set str rand1101 sys/terminal/echo.fbl
set obj rand1099 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand1107 attributes\nobj get arg0 rand1106 rand1107\nset str rand1107 path\nobj get rand1106 rand1105 rand1107\n// argument: path\ndupe rand1105 arg1\nobj set rand1106 rand1107 rand1105\nret\n~","execute":"~ mthd::execute:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\nCloneData data = new CloneData();\\ndata.set<TerminalInstance>(\"arg0\", instance);\\ndata.set<Arr<str>>(\"arg1\", args);\\ndata.set<KeyMap>(\"arg2\", keyMap);\\ndata.set<State>(\"arg3\", state);\\ndata.set<GraphicsState>(\"arg4\", graphicsState);\\nProcess proc = new Process(handle.readText(), data);\\ninstance.process = proc;\\nreturn new TerminalResult(true);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand1116 attributes\nobj get arg0 rand1115 rand1116\nset str rand1116 path\nobj get rand1115 rand1114 rand1116\nset str rand1117 path attribute is null\nerrnull rand1114 rand1117\ncallget rand1113 fs:open rand1114\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand1118 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand1124 attributes\\nobj get arg0 rand1123 rand1124\\nset str rand1124 data\\nobj get rand1123 rand1122 rand1124\\n// object: {}\\nset obj rand1122 {}\\nobj set rand1123 rand1124 rand1122\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand1127 attributes\\nobj get arg0 rand1126 rand1127\\nset str rand1127 data\\nobj get rand1126 rand1125 rand1127\\nret rand1125\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand1133 attributes\\nobj get arg0 rand1132 rand1133\\nset str rand1133 data\\nobj get rand1132 rand1131 rand1133\\nset str rand1134 data attribute is null\\nerrnull rand1131 rand1134\\n// argument: key\\n// argument: data\\nobj set rand1131 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand1135 .generic\\nsettype arg2 rand1135\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand1142 attributes\\nobj get arg0 rand1141 rand1142\\nset str rand1142 data\\nobj get rand1141 rand1140 rand1142\\nset str rand1143 data attribute is null\\nerrnull rand1140 rand1143\\nobj get rand1140 rand1139 arg1\\nset str rand1144  doesnt exist on self.data\\nadd rand1144 arg1 rand1144\\nernull rand1139 rand1144\\nset str rand1145 .any\\nsettype rand1139 rand1145\\nret rand1139\\nret\\n~\"},\"attributes\":{}}\nset str rand1120 methods\nobj get rand1118 rand1119 rand1120\nset str rand1120 .cns\nobj get rand1119 rand1119 rand1120\ncallvar rand1119 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1118 \n// typed_method: data.set<TerminalInstance>(\"arg0\", instance)\n// string: \"arg0\"\nset str rand1148 arg0\n// argument: instance\nset str rand1147 methods\nobj get rand1118 rand1146 rand1147\nset str rand1147 set\nobj get rand1146 rand1146 rand1147\ncallvar rand1146 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1118 rand1148 arg1\n// typed_method: data.set<Arr<str>>(\"arg1\", args)\n// string: \"arg1\"\nset str rand1151 arg1\n// argument: args\nset str rand1150 methods\nobj get rand1118 rand1149 rand1150\nset str rand1150 set\nobj get rand1149 rand1149 rand1150\ncallvar rand1149 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1118 rand1151 arg2\n// typed_method: data.set<KeyMap>(\"arg2\", keyMap)\n// string: \"arg2\"\nset str rand1154 arg2\n// argument: keyMap\nset str rand1153 methods\nobj get rand1118 rand1152 rand1153\nset str rand1153 set\nobj get rand1152 rand1152 rand1153\ncallvar rand1152 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1118 rand1154 arg3\n// typed_method: data.set<State>(\"arg3\", state)\n// string: \"arg3\"\nset str rand1157 arg3\n// argument: state\nset str rand1156 methods\nobj get rand1118 rand1155 rand1156\nset str rand1156 set\nobj get rand1155 rand1155 rand1156\ncallvar rand1155 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1118 rand1157 arg4\n// typed_method: data.set<GraphicsState>(\"arg4\", graphicsState)\n// string: \"arg4\"\nset str rand1160 arg4\n// argument: graphicsState\nset str rand1159 methods\nobj get rand1118 rand1158 rand1159\nset str rand1159 set\nobj get rand1158 rand1158 rand1159\ncallvar rand1158 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1118 rand1160 arg5\n// assignment: Process proc = new Process(handle.readText(), data)\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand1164 methods\nobj get rand1113 rand1163 rand1164\nset str rand1164 readText\nobj get rand1163 rand1163 rand1164\ncallgetvar rand1162 rand1163 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand1113 \n// variable: data\nset obj rand1161 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand1172 attributes\\nobj get arg0 rand1171 rand1172\\nset str rand1172 clone\\nobj get rand1171 rand1170 rand1172\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand1173 fbl\\n// argument: code\\n// argument: data\\nset obj rand1170 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand1182 attributes\\\\nobj get arg0 rand1181 rand1182\\\\nset str rand1182 id\\\\nobj get rand1181 rand1180 rand1182\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand1185 methods\\\\nobj get arg3 rand1184 rand1185\\\\nset str rand1185 getData\\\\nobj get rand1184 rand1184 rand1185\\\\ncallgetvar rand1183 rand1184 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand1180 clone:_createClone arg1 arg2 rand1183\\\\nobj set rand1181 rand1182 rand1180\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1188 attributes\\\\nobj get arg0 rand1187 rand1188\\\\nset str rand1188 id\\\\nobj get rand1187 rand1186 rand1188\\\\ncall clone:_killClone rand1186\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1192 attributes\\\\nobj get arg0 rand1191 rand1192\\\\nset str rand1192 id\\\\nobj get rand1191 rand1190 rand1192\\\\nset type rand1193 Obj<.any>\\\\ncallget rand1189 clone:getCloneData rand1193 rand1190\\\\nistypeg rand1194 rand1189 rand1193\\\\nji rand1197 rand1194\\\\nset str rand1195 generic function returned \\\\nset str rand1196  not the specified type \\\\nadd rand1195 rand1195 .typechecktype rand1196\\\\nadd rand1195 rand1195 rand1193\\\\nerr rand1195\\\\n: rand1197\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand1198 rand1189\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand1200 continue\\\\n// constant: true\\\\nset bool rand1201 true\\\\nobj set rand1189 rand1200 rand1201\\\\n: rand1198\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand1205 .generic\\\\ncallget rand1204 clone:getCloneData rand1205 arg1\\\\nistypeg rand1206 rand1204 rand1205\\\\nji rand1209 rand1206\\\\nset str rand1207 generic function returned \\\\nset str rand1208  not the specified type \\\\nadd rand1207 rand1207 .typechecktype rand1208\\\\nadd rand1207 rand1207 rand1205\\\\nerr rand1207\\\\n: rand1209\\\\nset str rand1210 .generic\\\\nsettype rand1204 rand1210\\\\nret rand1204\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand1175 methods\\nobj get rand1170 rand1174 rand1175\\nset str rand1175 .cns\\nobj get rand1174 rand1174 rand1175\\ncallvar rand1174 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1170 rand1173 arg1 arg2\\nobj set rand1171 rand1172 rand1170\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand1214 attributes\\nobj get arg0 rand1213 rand1214\\nset str rand1214 active\\nobj get rand1213 rand1212 rand1214\\n// constant: false\\nset bool rand1212 false\\nobj set rand1213 rand1214 rand1212\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1217 attributes\\nobj get arg0 rand1216 rand1217\\nset str rand1217 clone\\nobj get rand1216 rand1215 rand1217\\nset str rand1219 methods\\nobj get rand1215 rand1218 rand1219\\nset str rand1219 kill\\nobj get rand1218 rand1218 rand1219\\ncallvar rand1218 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand1215 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1222 attributes\\nobj get arg0 rand1221 rand1222\\nset str rand1222 clone\\nobj get rand1221 rand1220 rand1222\\nset str rand1224 methods\\nobj get rand1220 rand1223 rand1224\\nset str rand1224 continue\\nobj get rand1223 rand1223 rand1224\\ncallvar rand1223 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand1220 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand1230 attributes\\nobj get arg0 rand1229 rand1230\\nset str rand1230 clone\\nobj get rand1229 rand1227 rand1230\\nset str rand1231 clone attribute is null\\nerrnull rand1227 rand1231\\nset str rand1232 attributes\\nobj get rand1227 rand1228 rand1232\\nset str rand1232 id\\nobj get rand1228 rand1226 rand1232\\nset str rand1233 id attribute is null\\nerrnull rand1226 rand1233\\nclone alive rand1225 rand1226\\nret rand1225\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand1240 attributes\\nobj get arg0 rand1239 rand1240\\nset str rand1240 clone\\nobj get rand1239 rand1237 rand1240\\nset str rand1241 attributes\\nobj get rand1237 rand1238 rand1241\\nset str rand1241 id\\nobj get rand1238 rand1236 rand1241\\nset type rand1242 .generic\\ncallget rand1235 clone:getCloneData rand1242 rand1236\\nistypeg rand1243 rand1235 rand1242\\nji rand1246 rand1243\\nset str rand1244 generic function returned \\nset str rand1245  not the specified type \\nadd rand1244 rand1244 .typechecktype rand1245\\nadd rand1244 rand1244 rand1242\\nerr rand1244\\n: rand1246\\nset str rand1247 .generic\\nsettype rand1235 rand1247\\nret rand1235\\nret\\n~\"},\"attributes\":{}}\nset str rand1248 attributes\nobj get rand1161 rand1249 rand1248\n// constant: true\nset bool rand1250 true\nset str rand1251 active\nobj set rand1249 rand1251 rand1250\nset str rand1166 methods\nobj get rand1161 rand1165 rand1166\nset str rand1166 .cns\nobj get rand1165 rand1165 rand1166\ncallvar rand1165 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1161 rand1162 rand1118\n// assignment: instance.process = proc\n// argument: instance\n// attribute: instance.process\n// argument: instance\nset str rand1254 attributes\nobj get arg1 rand1253 rand1254\nset str rand1254 process\nobj get rand1253 rand1252 rand1254\n// variable: proc\ndupe rand1252 rand1161\nobj set rand1253 rand1254 rand1252\n// statement: return new TerminalResult(true)\n// instance: new TerminalResult(true)\n// constant: true\nset bool rand1256 true\n// string: \"\"\nset str rand1257 \nset obj rand1255 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand1264 attributes\\nobj get arg0 rand1263 rand1264\\nset str rand1264 successful\\nobj get rand1263 rand1262 rand1264\\n// argument: successful\\ndupe rand1262 arg1\\nobj set rand1263 rand1264 rand1262\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand1267 attributes\\nobj get arg0 rand1266 rand1267\\nset str rand1267 text\\nobj get rand1266 rand1265 rand1267\\n// argument: text\\ndupe rand1265 arg2\\nobj set rand1266 rand1267 rand1265\\nret\\n~\"},\"attributes\":{}}\nset str rand1259 methods\nobj get rand1255 rand1258 rand1259\nset str rand1259 .cns\nobj get rand1258 rand1258 rand1259\ncallvar rand1258 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1255 rand1256 rand1257\nret rand1255\nret\n~"},"attributes":{}}
set str rand1103 methods
obj get rand1099 rand1102 rand1103
set str rand1103 .cns
obj get rand1102 rand1102 rand1103
callvar rand1102 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1099 rand1101
set str rand1100 echo
obj set rand1098 rand1100 rand1099
// instance: new TerminalCommand("sys/terminal/clear.fbl")
// string: "sys/terminal/clear.fbl"
set str rand1270 sys/terminal/clear.fbl
set obj rand1268 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand1276 attributes\nobj get arg0 rand1275 rand1276\nset str rand1276 path\nobj get rand1275 rand1274 rand1276\n// argument: path\ndupe rand1274 arg1\nobj set rand1275 rand1276 rand1274\nret\n~","execute":"~ mthd::execute:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\nCloneData data = new CloneData();\\ndata.set<TerminalInstance>(\"arg0\", instance);\\ndata.set<Arr<str>>(\"arg1\", args);\\ndata.set<KeyMap>(\"arg2\", keyMap);\\ndata.set<State>(\"arg3\", state);\\ndata.set<GraphicsState>(\"arg4\", graphicsState);\\nProcess proc = new Process(handle.readText(), data);\\ninstance.process = proc;\\nreturn new TerminalResult(true);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand1285 attributes\nobj get arg0 rand1284 rand1285\nset str rand1285 path\nobj get rand1284 rand1283 rand1285\nset str rand1286 path attribute is null\nerrnull rand1283 rand1286\ncallget rand1282 fs:open rand1283\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand1287 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand1293 attributes\\nobj get arg0 rand1292 rand1293\\nset str rand1293 data\\nobj get rand1292 rand1291 rand1293\\n// object: {}\\nset obj rand1291 {}\\nobj set rand1292 rand1293 rand1291\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand1296 attributes\\nobj get arg0 rand1295 rand1296\\nset str rand1296 data\\nobj get rand1295 rand1294 rand1296\\nret rand1294\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand1302 attributes\\nobj get arg0 rand1301 rand1302\\nset str rand1302 data\\nobj get rand1301 rand1300 rand1302\\nset str rand1303 data attribute is null\\nerrnull rand1300 rand1303\\n// argument: key\\n// argument: data\\nobj set rand1300 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand1304 .generic\\nsettype arg2 rand1304\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand1311 attributes\\nobj get arg0 rand1310 rand1311\\nset str rand1311 data\\nobj get rand1310 rand1309 rand1311\\nset str rand1312 data attribute is null\\nerrnull rand1309 rand1312\\nobj get rand1309 rand1308 arg1\\nset str rand1313  doesnt exist on self.data\\nadd rand1313 arg1 rand1313\\nernull rand1308 rand1313\\nset str rand1314 .any\\nsettype rand1308 rand1314\\nret rand1308\\nret\\n~\"},\"attributes\":{}}\nset str rand1289 methods\nobj get rand1287 rand1288 rand1289\nset str rand1289 .cns\nobj get rand1288 rand1288 rand1289\ncallvar rand1288 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1287 \n// typed_method: data.set<TerminalInstance>(\"arg0\", instance)\n// string: \"arg0\"\nset str rand1317 arg0\n// argument: instance\nset str rand1316 methods\nobj get rand1287 rand1315 rand1316\nset str rand1316 set\nobj get rand1315 rand1315 rand1316\ncallvar rand1315 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1287 rand1317 arg1\n// typed_method: data.set<Arr<str>>(\"arg1\", args)\n// string: \"arg1\"\nset str rand1320 arg1\n// argument: args\nset str rand1319 methods\nobj get rand1287 rand1318 rand1319\nset str rand1319 set\nobj get rand1318 rand1318 rand1319\ncallvar rand1318 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1287 rand1320 arg2\n// typed_method: data.set<KeyMap>(\"arg2\", keyMap)\n// string: \"arg2\"\nset str rand1323 arg2\n// argument: keyMap\nset str rand1322 methods\nobj get rand1287 rand1321 rand1322\nset str rand1322 set\nobj get rand1321 rand1321 rand1322\ncallvar rand1321 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1287 rand1323 arg3\n// typed_method: data.set<State>(\"arg3\", state)\n// string: \"arg3\"\nset str rand1326 arg3\n// argument: state\nset str rand1325 methods\nobj get rand1287 rand1324 rand1325\nset str rand1325 set\nobj get rand1324 rand1324 rand1325\ncallvar rand1324 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1287 rand1326 arg4\n// typed_method: data.set<GraphicsState>(\"arg4\", graphicsState)\n// string: \"arg4\"\nset str rand1329 arg4\n// argument: graphicsState\nset str rand1328 methods\nobj get rand1287 rand1327 rand1328\nset str rand1328 set\nobj get rand1327 rand1327 rand1328\ncallvar rand1327 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1287 rand1329 arg5\n// assignment: Process proc = new Process(handle.readText(), data)\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand1333 methods\nobj get rand1282 rand1332 rand1333\nset str rand1333 readText\nobj get rand1332 rand1332 rand1333\ncallgetvar rand1331 rand1332 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand1282 \n// variable: data\nset obj rand1330 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand1341 attributes\\nobj get arg0 rand1340 rand1341\\nset str rand1341 clone\\nobj get rand1340 rand1339 rand1341\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand1342 fbl\\n// argument: code\\n// argument: data\\nset obj rand1339 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand1351 attributes\\\\nobj get arg0 rand1350 rand1351\\\\nset str rand1351 id\\\\nobj get rand1350 rand1349 rand1351\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand1354 methods\\\\nobj get arg3 rand1353 rand1354\\\\nset str rand1354 getData\\\\nobj get rand1353 rand1353 rand1354\\\\ncallgetvar rand1352 rand1353 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand1349 clone:_createClone arg1 arg2 rand1352\\\\nobj set rand1350 rand1351 rand1349\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1357 attributes\\\\nobj get arg0 rand1356 rand1357\\\\nset str rand1357 id\\\\nobj get rand1356 rand1355 rand1357\\\\ncall clone:_killClone rand1355\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1361 attributes\\\\nobj get arg0 rand1360 rand1361\\\\nset str rand1361 id\\\\nobj get rand1360 rand1359 rand1361\\\\nset type rand1362 Obj<.any>\\\\ncallget rand1358 clone:getCloneData rand1362 rand1359\\\\nistypeg rand1363 rand1358 rand1362\\\\nji rand1366 rand1363\\\\nset str rand1364 generic function returned \\\\nset str rand1365  not the specified type \\\\nadd rand1364 rand1364 .typechecktype rand1365\\\\nadd rand1364 rand1364 rand1362\\\\nerr rand1364\\\\n: rand1366\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand1367 rand1358\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand1369 continue\\\\n// constant: true\\\\nset bool rand1370 true\\\\nobj set rand1358 rand1369 rand1370\\\\n: rand1367\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand1374 .generic\\\\ncallget rand1373 clone:getCloneData rand1374 arg1\\\\nistypeg rand1375 rand1373 rand1374\\\\nji rand1378 rand1375\\\\nset str rand1376 generic function returned \\\\nset str rand1377  not the specified type \\\\nadd rand1376 rand1376 .typechecktype rand1377\\\\nadd rand1376 rand1376 rand1374\\\\nerr rand1376\\\\n: rand1378\\\\nset str rand1379 .generic\\\\nsettype rand1373 rand1379\\\\nret rand1373\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand1344 methods\\nobj get rand1339 rand1343 rand1344\\nset str rand1344 .cns\\nobj get rand1343 rand1343 rand1344\\ncallvar rand1343 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1339 rand1342 arg1 arg2\\nobj set rand1340 rand1341 rand1339\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand1383 attributes\\nobj get arg0 rand1382 rand1383\\nset str rand1383 active\\nobj get rand1382 rand1381 rand1383\\n// constant: false\\nset bool rand1381 false\\nobj set rand1382 rand1383 rand1381\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1386 attributes\\nobj get arg0 rand1385 rand1386\\nset str rand1386 clone\\nobj get rand1385 rand1384 rand1386\\nset str rand1388 methods\\nobj get rand1384 rand1387 rand1388\\nset str rand1388 kill\\nobj get rand1387 rand1387 rand1388\\ncallvar rand1387 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand1384 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1391 attributes\\nobj get arg0 rand1390 rand1391\\nset str rand1391 clone\\nobj get rand1390 rand1389 rand1391\\nset str rand1393 methods\\nobj get rand1389 rand1392 rand1393\\nset str rand1393 continue\\nobj get rand1392 rand1392 rand1393\\ncallvar rand1392 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand1389 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand1399 attributes\\nobj get arg0 rand1398 rand1399\\nset str rand1399 clone\\nobj get rand1398 rand1396 rand1399\\nset str rand1400 clone attribute is null\\nerrnull rand1396 rand1400\\nset str rand1401 attributes\\nobj get rand1396 rand1397 rand1401\\nset str rand1401 id\\nobj get rand1397 rand1395 rand1401\\nset str rand1402 id attribute is null\\nerrnull rand1395 rand1402\\nclone alive rand1394 rand1395\\nret rand1394\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand1409 attributes\\nobj get arg0 rand1408 rand1409\\nset str rand1409 clone\\nobj get rand1408 rand1406 rand1409\\nset str rand1410 attributes\\nobj get rand1406 rand1407 rand1410\\nset str rand1410 id\\nobj get rand1407 rand1405 rand1410\\nset type rand1411 .generic\\ncallget rand1404 clone:getCloneData rand1411 rand1405\\nistypeg rand1412 rand1404 rand1411\\nji rand1415 rand1412\\nset str rand1413 generic function returned \\nset str rand1414  not the specified type \\nadd rand1413 rand1413 .typechecktype rand1414\\nadd rand1413 rand1413 rand1411\\nerr rand1413\\n: rand1415\\nset str rand1416 .generic\\nsettype rand1404 rand1416\\nret rand1404\\nret\\n~\"},\"attributes\":{}}\nset str rand1417 attributes\nobj get rand1330 rand1418 rand1417\n// constant: true\nset bool rand1419 true\nset str rand1420 active\nobj set rand1418 rand1420 rand1419\nset str rand1335 methods\nobj get rand1330 rand1334 rand1335\nset str rand1335 .cns\nobj get rand1334 rand1334 rand1335\ncallvar rand1334 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1330 rand1331 rand1287\n// assignment: instance.process = proc\n// argument: instance\n// attribute: instance.process\n// argument: instance\nset str rand1423 attributes\nobj get arg1 rand1422 rand1423\nset str rand1423 process\nobj get rand1422 rand1421 rand1423\n// variable: proc\ndupe rand1421 rand1330\nobj set rand1422 rand1423 rand1421\n// statement: return new TerminalResult(true)\n// instance: new TerminalResult(true)\n// constant: true\nset bool rand1425 true\n// string: \"\"\nset str rand1426 \nset obj rand1424 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand1433 attributes\\nobj get arg0 rand1432 rand1433\\nset str rand1433 successful\\nobj get rand1432 rand1431 rand1433\\n// argument: successful\\ndupe rand1431 arg1\\nobj set rand1432 rand1433 rand1431\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand1436 attributes\\nobj get arg0 rand1435 rand1436\\nset str rand1436 text\\nobj get rand1435 rand1434 rand1436\\n// argument: text\\ndupe rand1434 arg2\\nobj set rand1435 rand1436 rand1434\\nret\\n~\"},\"attributes\":{}}\nset str rand1428 methods\nobj get rand1424 rand1427 rand1428\nset str rand1428 .cns\nobj get rand1427 rand1427 rand1428\ncallvar rand1427 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1424 rand1425 rand1426\nret rand1424\nret\n~"},"attributes":{}}
set str rand1272 methods
obj get rand1268 rand1271 rand1272
set str rand1272 .cns
obj get rand1271 rand1271 rand1272
callvar rand1271 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1268 rand1270
set str rand1269 clear
obj set rand1098 rand1269 rand1268
// instance: new TerminalCommand("sys/terminal/state.fbl")
// string: "sys/terminal/state.fbl"
set str rand1439 sys/terminal/state.fbl
set obj rand1437 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand1445 attributes\nobj get arg0 rand1444 rand1445\nset str rand1445 path\nobj get rand1444 rand1443 rand1445\n// argument: path\ndupe rand1443 arg1\nobj set rand1444 rand1445 rand1443\nret\n~","execute":"~ mthd::execute:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\nCloneData data = new CloneData();\\ndata.set<TerminalInstance>(\"arg0\", instance);\\ndata.set<Arr<str>>(\"arg1\", args);\\ndata.set<KeyMap>(\"arg2\", keyMap);\\ndata.set<State>(\"arg3\", state);\\ndata.set<GraphicsState>(\"arg4\", graphicsState);\\nProcess proc = new Process(handle.readText(), data);\\ninstance.process = proc;\\nreturn new TerminalResult(true);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand1454 attributes\nobj get arg0 rand1453 rand1454\nset str rand1454 path\nobj get rand1453 rand1452 rand1454\nset str rand1455 path attribute is null\nerrnull rand1452 rand1455\ncallget rand1451 fs:open rand1452\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand1456 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand1462 attributes\\nobj get arg0 rand1461 rand1462\\nset str rand1462 data\\nobj get rand1461 rand1460 rand1462\\n// object: {}\\nset obj rand1460 {}\\nobj set rand1461 rand1462 rand1460\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand1465 attributes\\nobj get arg0 rand1464 rand1465\\nset str rand1465 data\\nobj get rand1464 rand1463 rand1465\\nret rand1463\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand1471 attributes\\nobj get arg0 rand1470 rand1471\\nset str rand1471 data\\nobj get rand1470 rand1469 rand1471\\nset str rand1472 data attribute is null\\nerrnull rand1469 rand1472\\n// argument: key\\n// argument: data\\nobj set rand1469 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand1473 .generic\\nsettype arg2 rand1473\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand1480 attributes\\nobj get arg0 rand1479 rand1480\\nset str rand1480 data\\nobj get rand1479 rand1478 rand1480\\nset str rand1481 data attribute is null\\nerrnull rand1478 rand1481\\nobj get rand1478 rand1477 arg1\\nset str rand1482  doesnt exist on self.data\\nadd rand1482 arg1 rand1482\\nernull rand1477 rand1482\\nset str rand1483 .any\\nsettype rand1477 rand1483\\nret rand1477\\nret\\n~\"},\"attributes\":{}}\nset str rand1458 methods\nobj get rand1456 rand1457 rand1458\nset str rand1458 .cns\nobj get rand1457 rand1457 rand1458\ncallvar rand1457 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1456 \n// typed_method: data.set<TerminalInstance>(\"arg0\", instance)\n// string: \"arg0\"\nset str rand1486 arg0\n// argument: instance\nset str rand1485 methods\nobj get rand1456 rand1484 rand1485\nset str rand1485 set\nobj get rand1484 rand1484 rand1485\ncallvar rand1484 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1456 rand1486 arg1\n// typed_method: data.set<Arr<str>>(\"arg1\", args)\n// string: \"arg1\"\nset str rand1489 arg1\n// argument: args\nset str rand1488 methods\nobj get rand1456 rand1487 rand1488\nset str rand1488 set\nobj get rand1487 rand1487 rand1488\ncallvar rand1487 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1456 rand1489 arg2\n// typed_method: data.set<KeyMap>(\"arg2\", keyMap)\n// string: \"arg2\"\nset str rand1492 arg2\n// argument: keyMap\nset str rand1491 methods\nobj get rand1456 rand1490 rand1491\nset str rand1491 set\nobj get rand1490 rand1490 rand1491\ncallvar rand1490 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1456 rand1492 arg3\n// typed_method: data.set<State>(\"arg3\", state)\n// string: \"arg3\"\nset str rand1495 arg3\n// argument: state\nset str rand1494 methods\nobj get rand1456 rand1493 rand1494\nset str rand1494 set\nobj get rand1493 rand1493 rand1494\ncallvar rand1493 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1456 rand1495 arg4\n// typed_method: data.set<GraphicsState>(\"arg4\", graphicsState)\n// string: \"arg4\"\nset str rand1498 arg4\n// argument: graphicsState\nset str rand1497 methods\nobj get rand1456 rand1496 rand1497\nset str rand1497 set\nobj get rand1496 rand1496 rand1497\ncallvar rand1496 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1456 rand1498 arg5\n// assignment: Process proc = new Process(handle.readText(), data)\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand1502 methods\nobj get rand1451 rand1501 rand1502\nset str rand1502 readText\nobj get rand1501 rand1501 rand1502\ncallgetvar rand1500 rand1501 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand1451 \n// variable: data\nset obj rand1499 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand1510 attributes\\nobj get arg0 rand1509 rand1510\\nset str rand1510 clone\\nobj get rand1509 rand1508 rand1510\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand1511 fbl\\n// argument: code\\n// argument: data\\nset obj rand1508 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand1520 attributes\\\\nobj get arg0 rand1519 rand1520\\\\nset str rand1520 id\\\\nobj get rand1519 rand1518 rand1520\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand1523 methods\\\\nobj get arg3 rand1522 rand1523\\\\nset str rand1523 getData\\\\nobj get rand1522 rand1522 rand1523\\\\ncallgetvar rand1521 rand1522 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand1518 clone:_createClone arg1 arg2 rand1521\\\\nobj set rand1519 rand1520 rand1518\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1526 attributes\\\\nobj get arg0 rand1525 rand1526\\\\nset str rand1526 id\\\\nobj get rand1525 rand1524 rand1526\\\\ncall clone:_killClone rand1524\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1530 attributes\\\\nobj get arg0 rand1529 rand1530\\\\nset str rand1530 id\\\\nobj get rand1529 rand1528 rand1530\\\\nset type rand1531 Obj<.any>\\\\ncallget rand1527 clone:getCloneData rand1531 rand1528\\\\nistypeg rand1532 rand1527 rand1531\\\\nji rand1535 rand1532\\\\nset str rand1533 generic function returned \\\\nset str rand1534  not the specified type \\\\nadd rand1533 rand1533 .typechecktype rand1534\\\\nadd rand1533 rand1533 rand1531\\\\nerr rand1533\\\\n: rand1535\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand1536 rand1527\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand1538 continue\\\\n// constant: true\\\\nset bool rand1539 true\\\\nobj set rand1527 rand1538 rand1539\\\\n: rand1536\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand1543 .generic\\\\ncallget rand1542 clone:getCloneData rand1543 arg1\\\\nistypeg rand1544 rand1542 rand1543\\\\nji rand1547 rand1544\\\\nset str rand1545 generic function returned \\\\nset str rand1546  not the specified type \\\\nadd rand1545 rand1545 .typechecktype rand1546\\\\nadd rand1545 rand1545 rand1543\\\\nerr rand1545\\\\n: rand1547\\\\nset str rand1548 .generic\\\\nsettype rand1542 rand1548\\\\nret rand1542\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand1513 methods\\nobj get rand1508 rand1512 rand1513\\nset str rand1513 .cns\\nobj get rand1512 rand1512 rand1513\\ncallvar rand1512 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1508 rand1511 arg1 arg2\\nobj set rand1509 rand1510 rand1508\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand1552 attributes\\nobj get arg0 rand1551 rand1552\\nset str rand1552 active\\nobj get rand1551 rand1550 rand1552\\n// constant: false\\nset bool rand1550 false\\nobj set rand1551 rand1552 rand1550\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1555 attributes\\nobj get arg0 rand1554 rand1555\\nset str rand1555 clone\\nobj get rand1554 rand1553 rand1555\\nset str rand1557 methods\\nobj get rand1553 rand1556 rand1557\\nset str rand1557 kill\\nobj get rand1556 rand1556 rand1557\\ncallvar rand1556 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand1553 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1560 attributes\\nobj get arg0 rand1559 rand1560\\nset str rand1560 clone\\nobj get rand1559 rand1558 rand1560\\nset str rand1562 methods\\nobj get rand1558 rand1561 rand1562\\nset str rand1562 continue\\nobj get rand1561 rand1561 rand1562\\ncallvar rand1561 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand1558 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand1568 attributes\\nobj get arg0 rand1567 rand1568\\nset str rand1568 clone\\nobj get rand1567 rand1565 rand1568\\nset str rand1569 clone attribute is null\\nerrnull rand1565 rand1569\\nset str rand1570 attributes\\nobj get rand1565 rand1566 rand1570\\nset str rand1570 id\\nobj get rand1566 rand1564 rand1570\\nset str rand1571 id attribute is null\\nerrnull rand1564 rand1571\\nclone alive rand1563 rand1564\\nret rand1563\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand1578 attributes\\nobj get arg0 rand1577 rand1578\\nset str rand1578 clone\\nobj get rand1577 rand1575 rand1578\\nset str rand1579 attributes\\nobj get rand1575 rand1576 rand1579\\nset str rand1579 id\\nobj get rand1576 rand1574 rand1579\\nset type rand1580 .generic\\ncallget rand1573 clone:getCloneData rand1580 rand1574\\nistypeg rand1581 rand1573 rand1580\\nji rand1584 rand1581\\nset str rand1582 generic function returned \\nset str rand1583  not the specified type \\nadd rand1582 rand1582 .typechecktype rand1583\\nadd rand1582 rand1582 rand1580\\nerr rand1582\\n: rand1584\\nset str rand1585 .generic\\nsettype rand1573 rand1585\\nret rand1573\\nret\\n~\"},\"attributes\":{}}\nset str rand1586 attributes\nobj get rand1499 rand1587 rand1586\n// constant: true\nset bool rand1588 true\nset str rand1589 active\nobj set rand1587 rand1589 rand1588\nset str rand1504 methods\nobj get rand1499 rand1503 rand1504\nset str rand1504 .cns\nobj get rand1503 rand1503 rand1504\ncallvar rand1503 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1499 rand1500 rand1456\n// assignment: instance.process = proc\n// argument: instance\n// attribute: instance.process\n// argument: instance\nset str rand1592 attributes\nobj get arg1 rand1591 rand1592\nset str rand1592 process\nobj get rand1591 rand1590 rand1592\n// variable: proc\ndupe rand1590 rand1499\nobj set rand1591 rand1592 rand1590\n// statement: return new TerminalResult(true)\n// instance: new TerminalResult(true)\n// constant: true\nset bool rand1594 true\n// string: \"\"\nset str rand1595 \nset obj rand1593 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand1602 attributes\\nobj get arg0 rand1601 rand1602\\nset str rand1602 successful\\nobj get rand1601 rand1600 rand1602\\n// argument: successful\\ndupe rand1600 arg1\\nobj set rand1601 rand1602 rand1600\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand1605 attributes\\nobj get arg0 rand1604 rand1605\\nset str rand1605 text\\nobj get rand1604 rand1603 rand1605\\n// argument: text\\ndupe rand1603 arg2\\nobj set rand1604 rand1605 rand1603\\nret\\n~\"},\"attributes\":{}}\nset str rand1597 methods\nobj get rand1593 rand1596 rand1597\nset str rand1597 .cns\nobj get rand1596 rand1596 rand1597\ncallvar rand1596 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1593 rand1594 rand1595\nret rand1593\nret\n~"},"attributes":{}}
set str rand1441 methods
obj get rand1437 rand1440 rand1441
set str rand1441 .cns
obj get rand1440 rand1440 rand1441
callvar rand1440 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1437 rand1439
set str rand1438 state
obj set rand1098 rand1438 rand1437
// instance: new TerminalCommand("sys/terminal/spinny.fbl")
// string: "sys/terminal/spinny.fbl"
set str rand1608 sys/terminal/spinny.fbl
set obj rand1606 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand1614 attributes\nobj get arg0 rand1613 rand1614\nset str rand1614 path\nobj get rand1613 rand1612 rand1614\n// argument: path\ndupe rand1612 arg1\nobj set rand1613 rand1614 rand1612\nret\n~","execute":"~ mthd::execute:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\nCloneData data = new CloneData();\\ndata.set<TerminalInstance>(\"arg0\", instance);\\ndata.set<Arr<str>>(\"arg1\", args);\\ndata.set<KeyMap>(\"arg2\", keyMap);\\ndata.set<State>(\"arg3\", state);\\ndata.set<GraphicsState>(\"arg4\", graphicsState);\\nProcess proc = new Process(handle.readText(), data);\\ninstance.process = proc;\\nreturn new TerminalResult(true);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand1623 attributes\nobj get arg0 rand1622 rand1623\nset str rand1623 path\nobj get rand1622 rand1621 rand1623\nset str rand1624 path attribute is null\nerrnull rand1621 rand1624\ncallget rand1620 fs:open rand1621\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand1625 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand1631 attributes\\nobj get arg0 rand1630 rand1631\\nset str rand1631 data\\nobj get rand1630 rand1629 rand1631\\n// object: {}\\nset obj rand1629 {}\\nobj set rand1630 rand1631 rand1629\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand1634 attributes\\nobj get arg0 rand1633 rand1634\\nset str rand1634 data\\nobj get rand1633 rand1632 rand1634\\nret rand1632\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand1640 attributes\\nobj get arg0 rand1639 rand1640\\nset str rand1640 data\\nobj get rand1639 rand1638 rand1640\\nset str rand1641 data attribute is null\\nerrnull rand1638 rand1641\\n// argument: key\\n// argument: data\\nobj set rand1638 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand1642 .generic\\nsettype arg2 rand1642\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand1649 attributes\\nobj get arg0 rand1648 rand1649\\nset str rand1649 data\\nobj get rand1648 rand1647 rand1649\\nset str rand1650 data attribute is null\\nerrnull rand1647 rand1650\\nobj get rand1647 rand1646 arg1\\nset str rand1651  doesnt exist on self.data\\nadd rand1651 arg1 rand1651\\nernull rand1646 rand1651\\nset str rand1652 .any\\nsettype rand1646 rand1652\\nret rand1646\\nret\\n~\"},\"attributes\":{}}\nset str rand1627 methods\nobj get rand1625 rand1626 rand1627\nset str rand1627 .cns\nobj get rand1626 rand1626 rand1627\ncallvar rand1626 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1625 \n// typed_method: data.set<TerminalInstance>(\"arg0\", instance)\n// string: \"arg0\"\nset str rand1655 arg0\n// argument: instance\nset str rand1654 methods\nobj get rand1625 rand1653 rand1654\nset str rand1654 set\nobj get rand1653 rand1653 rand1654\ncallvar rand1653 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1625 rand1655 arg1\n// typed_method: data.set<Arr<str>>(\"arg1\", args)\n// string: \"arg1\"\nset str rand1658 arg1\n// argument: args\nset str rand1657 methods\nobj get rand1625 rand1656 rand1657\nset str rand1657 set\nobj get rand1656 rand1656 rand1657\ncallvar rand1656 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1625 rand1658 arg2\n// typed_method: data.set<KeyMap>(\"arg2\", keyMap)\n// string: \"arg2\"\nset str rand1661 arg2\n// argument: keyMap\nset str rand1660 methods\nobj get rand1625 rand1659 rand1660\nset str rand1660 set\nobj get rand1659 rand1659 rand1660\ncallvar rand1659 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1625 rand1661 arg3\n// typed_method: data.set<State>(\"arg3\", state)\n// string: \"arg3\"\nset str rand1664 arg3\n// argument: state\nset str rand1663 methods\nobj get rand1625 rand1662 rand1663\nset str rand1663 set\nobj get rand1662 rand1662 rand1663\ncallvar rand1662 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1625 rand1664 arg4\n// typed_method: data.set<GraphicsState>(\"arg4\", graphicsState)\n// string: \"arg4\"\nset str rand1667 arg4\n// argument: graphicsState\nset str rand1666 methods\nobj get rand1625 rand1665 rand1666\nset str rand1666 set\nobj get rand1665 rand1665 rand1666\ncallvar rand1665 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1625 rand1667 arg5\n// assignment: Process proc = new Process(handle.readText(), data)\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand1671 methods\nobj get rand1620 rand1670 rand1671\nset str rand1671 readText\nobj get rand1670 rand1670 rand1671\ncallgetvar rand1669 rand1670 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand1620 \n// variable: data\nset obj rand1668 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand1679 attributes\\nobj get arg0 rand1678 rand1679\\nset str rand1679 clone\\nobj get rand1678 rand1677 rand1679\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand1680 fbl\\n// argument: code\\n// argument: data\\nset obj rand1677 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand1689 attributes\\\\nobj get arg0 rand1688 rand1689\\\\nset str rand1689 id\\\\nobj get rand1688 rand1687 rand1689\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand1692 methods\\\\nobj get arg3 rand1691 rand1692\\\\nset str rand1692 getData\\\\nobj get rand1691 rand1691 rand1692\\\\ncallgetvar rand1690 rand1691 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand1687 clone:_createClone arg1 arg2 rand1690\\\\nobj set rand1688 rand1689 rand1687\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1695 attributes\\\\nobj get arg0 rand1694 rand1695\\\\nset str rand1695 id\\\\nobj get rand1694 rand1693 rand1695\\\\ncall clone:_killClone rand1693\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1699 attributes\\\\nobj get arg0 rand1698 rand1699\\\\nset str rand1699 id\\\\nobj get rand1698 rand1697 rand1699\\\\nset type rand1700 Obj<.any>\\\\ncallget rand1696 clone:getCloneData rand1700 rand1697\\\\nistypeg rand1701 rand1696 rand1700\\\\nji rand1704 rand1701\\\\nset str rand1702 generic function returned \\\\nset str rand1703  not the specified type \\\\nadd rand1702 rand1702 .typechecktype rand1703\\\\nadd rand1702 rand1702 rand1700\\\\nerr rand1702\\\\n: rand1704\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand1705 rand1696\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand1707 continue\\\\n// constant: true\\\\nset bool rand1708 true\\\\nobj set rand1696 rand1707 rand1708\\\\n: rand1705\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand1712 .generic\\\\ncallget rand1711 clone:getCloneData rand1712 arg1\\\\nistypeg rand1713 rand1711 rand1712\\\\nji rand1716 rand1713\\\\nset str rand1714 generic function returned \\\\nset str rand1715  not the specified type \\\\nadd rand1714 rand1714 .typechecktype rand1715\\\\nadd rand1714 rand1714 rand1712\\\\nerr rand1714\\\\n: rand1716\\\\nset str rand1717 .generic\\\\nsettype rand1711 rand1717\\\\nret rand1711\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand1682 methods\\nobj get rand1677 rand1681 rand1682\\nset str rand1682 .cns\\nobj get rand1681 rand1681 rand1682\\ncallvar rand1681 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1677 rand1680 arg1 arg2\\nobj set rand1678 rand1679 rand1677\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand1721 attributes\\nobj get arg0 rand1720 rand1721\\nset str rand1721 active\\nobj get rand1720 rand1719 rand1721\\n// constant: false\\nset bool rand1719 false\\nobj set rand1720 rand1721 rand1719\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1724 attributes\\nobj get arg0 rand1723 rand1724\\nset str rand1724 clone\\nobj get rand1723 rand1722 rand1724\\nset str rand1726 methods\\nobj get rand1722 rand1725 rand1726\\nset str rand1726 kill\\nobj get rand1725 rand1725 rand1726\\ncallvar rand1725 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand1722 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1729 attributes\\nobj get arg0 rand1728 rand1729\\nset str rand1729 clone\\nobj get rand1728 rand1727 rand1729\\nset str rand1731 methods\\nobj get rand1727 rand1730 rand1731\\nset str rand1731 continue\\nobj get rand1730 rand1730 rand1731\\ncallvar rand1730 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand1727 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand1737 attributes\\nobj get arg0 rand1736 rand1737\\nset str rand1737 clone\\nobj get rand1736 rand1734 rand1737\\nset str rand1738 clone attribute is null\\nerrnull rand1734 rand1738\\nset str rand1739 attributes\\nobj get rand1734 rand1735 rand1739\\nset str rand1739 id\\nobj get rand1735 rand1733 rand1739\\nset str rand1740 id attribute is null\\nerrnull rand1733 rand1740\\nclone alive rand1732 rand1733\\nret rand1732\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand1747 attributes\\nobj get arg0 rand1746 rand1747\\nset str rand1747 clone\\nobj get rand1746 rand1744 rand1747\\nset str rand1748 attributes\\nobj get rand1744 rand1745 rand1748\\nset str rand1748 id\\nobj get rand1745 rand1743 rand1748\\nset type rand1749 .generic\\ncallget rand1742 clone:getCloneData rand1749 rand1743\\nistypeg rand1750 rand1742 rand1749\\nji rand1753 rand1750\\nset str rand1751 generic function returned \\nset str rand1752  not the specified type \\nadd rand1751 rand1751 .typechecktype rand1752\\nadd rand1751 rand1751 rand1749\\nerr rand1751\\n: rand1753\\nset str rand1754 .generic\\nsettype rand1742 rand1754\\nret rand1742\\nret\\n~\"},\"attributes\":{}}\nset str rand1755 attributes\nobj get rand1668 rand1756 rand1755\n// constant: true\nset bool rand1757 true\nset str rand1758 active\nobj set rand1756 rand1758 rand1757\nset str rand1673 methods\nobj get rand1668 rand1672 rand1673\nset str rand1673 .cns\nobj get rand1672 rand1672 rand1673\ncallvar rand1672 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1668 rand1669 rand1625\n// assignment: instance.process = proc\n// argument: instance\n// attribute: instance.process\n// argument: instance\nset str rand1761 attributes\nobj get arg1 rand1760 rand1761\nset str rand1761 process\nobj get rand1760 rand1759 rand1761\n// variable: proc\ndupe rand1759 rand1668\nobj set rand1760 rand1761 rand1759\n// statement: return new TerminalResult(true)\n// instance: new TerminalResult(true)\n// constant: true\nset bool rand1763 true\n// string: \"\"\nset str rand1764 \nset obj rand1762 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand1771 attributes\\nobj get arg0 rand1770 rand1771\\nset str rand1771 successful\\nobj get rand1770 rand1769 rand1771\\n// argument: successful\\ndupe rand1769 arg1\\nobj set rand1770 rand1771 rand1769\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand1774 attributes\\nobj get arg0 rand1773 rand1774\\nset str rand1774 text\\nobj get rand1773 rand1772 rand1774\\n// argument: text\\ndupe rand1772 arg2\\nobj set rand1773 rand1774 rand1772\\nret\\n~\"},\"attributes\":{}}\nset str rand1766 methods\nobj get rand1762 rand1765 rand1766\nset str rand1766 .cns\nobj get rand1765 rand1765 rand1766\ncallvar rand1765 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1762 rand1763 rand1764\nret rand1762\nret\n~"},"attributes":{}}
set str rand1610 methods
obj get rand1606 rand1609 rand1610
set str rand1610 .cns
obj get rand1609 rand1609 rand1610
callvar rand1609 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1606 rand1608
set str rand1607 spinny
obj set rand1098 rand1607 rand1606
// instance: new TerminalCommand("sys/terminal/fib.fbl")
// string: "sys/terminal/fib.fbl"
set str rand1777 sys/terminal/fib.fbl
set obj rand1775 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand1783 attributes\nobj get arg0 rand1782 rand1783\nset str rand1783 path\nobj get rand1782 rand1781 rand1783\n// argument: path\ndupe rand1781 arg1\nobj set rand1782 rand1783 rand1781\nret\n~","execute":"~ mthd::execute:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\nCloneData data = new CloneData();\\ndata.set<TerminalInstance>(\"arg0\", instance);\\ndata.set<Arr<str>>(\"arg1\", args);\\ndata.set<KeyMap>(\"arg2\", keyMap);\\ndata.set<State>(\"arg3\", state);\\ndata.set<GraphicsState>(\"arg4\", graphicsState);\\nProcess proc = new Process(handle.readText(), data);\\ninstance.process = proc;\\nreturn new TerminalResult(true);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand1792 attributes\nobj get arg0 rand1791 rand1792\nset str rand1792 path\nobj get rand1791 rand1790 rand1792\nset str rand1793 path attribute is null\nerrnull rand1790 rand1793\ncallget rand1789 fs:open rand1790\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand1794 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand1800 attributes\\nobj get arg0 rand1799 rand1800\\nset str rand1800 data\\nobj get rand1799 rand1798 rand1800\\n// object: {}\\nset obj rand1798 {}\\nobj set rand1799 rand1800 rand1798\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand1803 attributes\\nobj get arg0 rand1802 rand1803\\nset str rand1803 data\\nobj get rand1802 rand1801 rand1803\\nret rand1801\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand1809 attributes\\nobj get arg0 rand1808 rand1809\\nset str rand1809 data\\nobj get rand1808 rand1807 rand1809\\nset str rand1810 data attribute is null\\nerrnull rand1807 rand1810\\n// argument: key\\n// argument: data\\nobj set rand1807 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand1811 .generic\\nsettype arg2 rand1811\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand1818 attributes\\nobj get arg0 rand1817 rand1818\\nset str rand1818 data\\nobj get rand1817 rand1816 rand1818\\nset str rand1819 data attribute is null\\nerrnull rand1816 rand1819\\nobj get rand1816 rand1815 arg1\\nset str rand1820  doesnt exist on self.data\\nadd rand1820 arg1 rand1820\\nernull rand1815 rand1820\\nset str rand1821 .any\\nsettype rand1815 rand1821\\nret rand1815\\nret\\n~\"},\"attributes\":{}}\nset str rand1796 methods\nobj get rand1794 rand1795 rand1796\nset str rand1796 .cns\nobj get rand1795 rand1795 rand1796\ncallvar rand1795 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1794 \n// typed_method: data.set<TerminalInstance>(\"arg0\", instance)\n// string: \"arg0\"\nset str rand1824 arg0\n// argument: instance\nset str rand1823 methods\nobj get rand1794 rand1822 rand1823\nset str rand1823 set\nobj get rand1822 rand1822 rand1823\ncallvar rand1822 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1794 rand1824 arg1\n// typed_method: data.set<Arr<str>>(\"arg1\", args)\n// string: \"arg1\"\nset str rand1827 arg1\n// argument: args\nset str rand1826 methods\nobj get rand1794 rand1825 rand1826\nset str rand1826 set\nobj get rand1825 rand1825 rand1826\ncallvar rand1825 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1794 rand1827 arg2\n// typed_method: data.set<KeyMap>(\"arg2\", keyMap)\n// string: \"arg2\"\nset str rand1830 arg2\n// argument: keyMap\nset str rand1829 methods\nobj get rand1794 rand1828 rand1829\nset str rand1829 set\nobj get rand1828 rand1828 rand1829\ncallvar rand1828 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1794 rand1830 arg3\n// typed_method: data.set<State>(\"arg3\", state)\n// string: \"arg3\"\nset str rand1833 arg3\n// argument: state\nset str rand1832 methods\nobj get rand1794 rand1831 rand1832\nset str rand1832 set\nobj get rand1831 rand1831 rand1832\ncallvar rand1831 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1794 rand1833 arg4\n// typed_method: data.set<GraphicsState>(\"arg4\", graphicsState)\n// string: \"arg4\"\nset str rand1836 arg4\n// argument: graphicsState\nset str rand1835 methods\nobj get rand1794 rand1834 rand1835\nset str rand1835 set\nobj get rand1834 rand1834 rand1835\ncallvar rand1834 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1794 rand1836 arg5\n// assignment: Process proc = new Process(handle.readText(), data)\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand1840 methods\nobj get rand1789 rand1839 rand1840\nset str rand1840 readText\nobj get rand1839 rand1839 rand1840\ncallgetvar rand1838 rand1839 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand1789 \n// variable: data\nset obj rand1837 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand1848 attributes\\nobj get arg0 rand1847 rand1848\\nset str rand1848 clone\\nobj get rand1847 rand1846 rand1848\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand1849 fbl\\n// argument: code\\n// argument: data\\nset obj rand1846 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand1858 attributes\\\\nobj get arg0 rand1857 rand1858\\\\nset str rand1858 id\\\\nobj get rand1857 rand1856 rand1858\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand1861 methods\\\\nobj get arg3 rand1860 rand1861\\\\nset str rand1861 getData\\\\nobj get rand1860 rand1860 rand1861\\\\ncallgetvar rand1859 rand1860 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand1856 clone:_createClone arg1 arg2 rand1859\\\\nobj set rand1857 rand1858 rand1856\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1864 attributes\\\\nobj get arg0 rand1863 rand1864\\\\nset str rand1864 id\\\\nobj get rand1863 rand1862 rand1864\\\\ncall clone:_killClone rand1862\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand1868 attributes\\\\nobj get arg0 rand1867 rand1868\\\\nset str rand1868 id\\\\nobj get rand1867 rand1866 rand1868\\\\nset type rand1869 Obj<.any>\\\\ncallget rand1865 clone:getCloneData rand1869 rand1866\\\\nistypeg rand1870 rand1865 rand1869\\\\nji rand1873 rand1870\\\\nset str rand1871 generic function returned \\\\nset str rand1872  not the specified type \\\\nadd rand1871 rand1871 .typechecktype rand1872\\\\nadd rand1871 rand1871 rand1869\\\\nerr rand1871\\\\n: rand1873\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand1874 rand1865\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand1876 continue\\\\n// constant: true\\\\nset bool rand1877 true\\\\nobj set rand1865 rand1876 rand1877\\\\n: rand1874\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand1881 .generic\\\\ncallget rand1880 clone:getCloneData rand1881 arg1\\\\nistypeg rand1882 rand1880 rand1881\\\\nji rand1885 rand1882\\\\nset str rand1883 generic function returned \\\\nset str rand1884  not the specified type \\\\nadd rand1883 rand1883 .typechecktype rand1884\\\\nadd rand1883 rand1883 rand1881\\\\nerr rand1883\\\\n: rand1885\\\\nset str rand1886 .generic\\\\nsettype rand1880 rand1886\\\\nret rand1880\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand1851 methods\\nobj get rand1846 rand1850 rand1851\\nset str rand1851 .cns\\nobj get rand1850 rand1850 rand1851\\ncallvar rand1850 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1846 rand1849 arg1 arg2\\nobj set rand1847 rand1848 rand1846\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand1890 attributes\\nobj get arg0 rand1889 rand1890\\nset str rand1890 active\\nobj get rand1889 rand1888 rand1890\\n// constant: false\\nset bool rand1888 false\\nobj set rand1889 rand1890 rand1888\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1893 attributes\\nobj get arg0 rand1892 rand1893\\nset str rand1893 clone\\nobj get rand1892 rand1891 rand1893\\nset str rand1895 methods\\nobj get rand1891 rand1894 rand1895\\nset str rand1895 kill\\nobj get rand1894 rand1894 rand1895\\ncallvar rand1894 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand1891 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand1898 attributes\\nobj get arg0 rand1897 rand1898\\nset str rand1898 clone\\nobj get rand1897 rand1896 rand1898\\nset str rand1900 methods\\nobj get rand1896 rand1899 rand1900\\nset str rand1900 continue\\nobj get rand1899 rand1899 rand1900\\ncallvar rand1899 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand1896 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand1906 attributes\\nobj get arg0 rand1905 rand1906\\nset str rand1906 clone\\nobj get rand1905 rand1903 rand1906\\nset str rand1907 clone attribute is null\\nerrnull rand1903 rand1907\\nset str rand1908 attributes\\nobj get rand1903 rand1904 rand1908\\nset str rand1908 id\\nobj get rand1904 rand1902 rand1908\\nset str rand1909 id attribute is null\\nerrnull rand1902 rand1909\\nclone alive rand1901 rand1902\\nret rand1901\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand1916 attributes\\nobj get arg0 rand1915 rand1916\\nset str rand1916 clone\\nobj get rand1915 rand1913 rand1916\\nset str rand1917 attributes\\nobj get rand1913 rand1914 rand1917\\nset str rand1917 id\\nobj get rand1914 rand1912 rand1917\\nset type rand1918 .generic\\ncallget rand1911 clone:getCloneData rand1918 rand1912\\nistypeg rand1919 rand1911 rand1918\\nji rand1922 rand1919\\nset str rand1920 generic function returned \\nset str rand1921  not the specified type \\nadd rand1920 rand1920 .typechecktype rand1921\\nadd rand1920 rand1920 rand1918\\nerr rand1920\\n: rand1922\\nset str rand1923 .generic\\nsettype rand1911 rand1923\\nret rand1911\\nret\\n~\"},\"attributes\":{}}\nset str rand1924 attributes\nobj get rand1837 rand1925 rand1924\n// constant: true\nset bool rand1926 true\nset str rand1927 active\nobj set rand1925 rand1927 rand1926\nset str rand1842 methods\nobj get rand1837 rand1841 rand1842\nset str rand1842 .cns\nobj get rand1841 rand1841 rand1842\ncallvar rand1841 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1837 rand1838 rand1794\n// assignment: instance.process = proc\n// argument: instance\n// attribute: instance.process\n// argument: instance\nset str rand1930 attributes\nobj get arg1 rand1929 rand1930\nset str rand1930 process\nobj get rand1929 rand1928 rand1930\n// variable: proc\ndupe rand1928 rand1837\nobj set rand1929 rand1930 rand1928\n// statement: return new TerminalResult(true)\n// instance: new TerminalResult(true)\n// constant: true\nset bool rand1932 true\n// string: \"\"\nset str rand1933 \nset obj rand1931 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand1940 attributes\\nobj get arg0 rand1939 rand1940\\nset str rand1940 successful\\nobj get rand1939 rand1938 rand1940\\n// argument: successful\\ndupe rand1938 arg1\\nobj set rand1939 rand1940 rand1938\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand1943 attributes\\nobj get arg0 rand1942 rand1943\\nset str rand1943 text\\nobj get rand1942 rand1941 rand1943\\n// argument: text\\ndupe rand1941 arg2\\nobj set rand1942 rand1943 rand1941\\nret\\n~\"},\"attributes\":{}}\nset str rand1935 methods\nobj get rand1931 rand1934 rand1935\nset str rand1935 .cns\nobj get rand1934 rand1934 rand1935\ncallvar rand1934 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1931 rand1932 rand1933\nret rand1931\nret\n~"},"attributes":{}}
set str rand1779 methods
obj get rand1775 rand1778 rand1779
set str rand1779 .cns
obj get rand1778 rand1778 rand1779
callvar rand1778 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1775 rand1777
set str rand1776 fib
obj set rand1098 rand1776 rand1775
// instance: new TerminalCommand("sys/terminal/fltr.fbl")
// string: "sys/terminal/fltr.fbl"
set str rand1946 sys/terminal/fltr.fbl
set obj rand1944 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand1952 attributes\nobj get arg0 rand1951 rand1952\nset str rand1952 path\nobj get rand1951 rand1950 rand1952\n// argument: path\ndupe rand1950 arg1\nobj set rand1951 rand1952 rand1950\nret\n~","execute":"~ mthd::execute:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\nCloneData data = new CloneData();\\ndata.set<TerminalInstance>(\"arg0\", instance);\\ndata.set<Arr<str>>(\"arg1\", args);\\ndata.set<KeyMap>(\"arg2\", keyMap);\\ndata.set<State>(\"arg3\", state);\\ndata.set<GraphicsState>(\"arg4\", graphicsState);\\nProcess proc = new Process(handle.readText(), data);\\ninstance.process = proc;\\nreturn new TerminalResult(true);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand1961 attributes\nobj get arg0 rand1960 rand1961\nset str rand1961 path\nobj get rand1960 rand1959 rand1961\nset str rand1962 path attribute is null\nerrnull rand1959 rand1962\ncallget rand1958 fs:open rand1959\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand1963 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand1969 attributes\\nobj get arg0 rand1968 rand1969\\nset str rand1969 data\\nobj get rand1968 rand1967 rand1969\\n// object: {}\\nset obj rand1967 {}\\nobj set rand1968 rand1969 rand1967\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand1972 attributes\\nobj get arg0 rand1971 rand1972\\nset str rand1972 data\\nobj get rand1971 rand1970 rand1972\\nret rand1970\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand1978 attributes\\nobj get arg0 rand1977 rand1978\\nset str rand1978 data\\nobj get rand1977 rand1976 rand1978\\nset str rand1979 data attribute is null\\nerrnull rand1976 rand1979\\n// argument: key\\n// argument: data\\nobj set rand1976 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand1980 .generic\\nsettype arg2 rand1980\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand1987 attributes\\nobj get arg0 rand1986 rand1987\\nset str rand1987 data\\nobj get rand1986 rand1985 rand1987\\nset str rand1988 data attribute is null\\nerrnull rand1985 rand1988\\nobj get rand1985 rand1984 arg1\\nset str rand1989  doesnt exist on self.data\\nadd rand1989 arg1 rand1989\\nernull rand1984 rand1989\\nset str rand1990 .any\\nsettype rand1984 rand1990\\nret rand1984\\nret\\n~\"},\"attributes\":{}}\nset str rand1965 methods\nobj get rand1963 rand1964 rand1965\nset str rand1965 .cns\nobj get rand1964 rand1964 rand1965\ncallvar rand1964 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1963 \n// typed_method: data.set<TerminalInstance>(\"arg0\", instance)\n// string: \"arg0\"\nset str rand1993 arg0\n// argument: instance\nset str rand1992 methods\nobj get rand1963 rand1991 rand1992\nset str rand1992 set\nobj get rand1991 rand1991 rand1992\ncallvar rand1991 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1963 rand1993 arg1\n// typed_method: data.set<Arr<str>>(\"arg1\", args)\n// string: \"arg1\"\nset str rand1996 arg1\n// argument: args\nset str rand1995 methods\nobj get rand1963 rand1994 rand1995\nset str rand1995 set\nobj get rand1994 rand1994 rand1995\ncallvar rand1994 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1963 rand1996 arg2\n// typed_method: data.set<KeyMap>(\"arg2\", keyMap)\n// string: \"arg2\"\nset str rand1999 arg2\n// argument: keyMap\nset str rand1998 methods\nobj get rand1963 rand1997 rand1998\nset str rand1998 set\nobj get rand1997 rand1997 rand1998\ncallvar rand1997 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1963 rand1999 arg3\n// typed_method: data.set<State>(\"arg3\", state)\n// string: \"arg3\"\nset str rand2002 arg3\n// argument: state\nset str rand2001 methods\nobj get rand1963 rand2000 rand2001\nset str rand2001 set\nobj get rand2000 rand2000 rand2001\ncallvar rand2000 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1963 rand2002 arg4\n// typed_method: data.set<GraphicsState>(\"arg4\", graphicsState)\n// string: \"arg4\"\nset str rand2005 arg4\n// argument: graphicsState\nset str rand2004 methods\nobj get rand1963 rand2003 rand2004\nset str rand2004 set\nobj get rand2003 rand2003 rand2004\ncallvar rand2003 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand1963 rand2005 arg5\n// assignment: Process proc = new Process(handle.readText(), data)\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand2009 methods\nobj get rand1958 rand2008 rand2009\nset str rand2009 readText\nobj get rand2008 rand2008 rand2009\ncallgetvar rand2007 rand2008 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand1958 \n// variable: data\nset obj rand2006 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand2017 attributes\\nobj get arg0 rand2016 rand2017\\nset str rand2017 clone\\nobj get rand2016 rand2015 rand2017\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand2018 fbl\\n// argument: code\\n// argument: data\\nset obj rand2015 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand2027 attributes\\\\nobj get arg0 rand2026 rand2027\\\\nset str rand2027 id\\\\nobj get rand2026 rand2025 rand2027\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand2030 methods\\\\nobj get arg3 rand2029 rand2030\\\\nset str rand2030 getData\\\\nobj get rand2029 rand2029 rand2030\\\\ncallgetvar rand2028 rand2029 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand2025 clone:_createClone arg1 arg2 rand2028\\\\nobj set rand2026 rand2027 rand2025\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand2033 attributes\\\\nobj get arg0 rand2032 rand2033\\\\nset str rand2033 id\\\\nobj get rand2032 rand2031 rand2033\\\\ncall clone:_killClone rand2031\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand2037 attributes\\\\nobj get arg0 rand2036 rand2037\\\\nset str rand2037 id\\\\nobj get rand2036 rand2035 rand2037\\\\nset type rand2038 Obj<.any>\\\\ncallget rand2034 clone:getCloneData rand2038 rand2035\\\\nistypeg rand2039 rand2034 rand2038\\\\nji rand2042 rand2039\\\\nset str rand2040 generic function returned \\\\nset str rand2041  not the specified type \\\\nadd rand2040 rand2040 .typechecktype rand2041\\\\nadd rand2040 rand2040 rand2038\\\\nerr rand2040\\\\n: rand2042\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand2043 rand2034\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand2045 continue\\\\n// constant: true\\\\nset bool rand2046 true\\\\nobj set rand2034 rand2045 rand2046\\\\n: rand2043\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand2050 .generic\\\\ncallget rand2049 clone:getCloneData rand2050 arg1\\\\nistypeg rand2051 rand2049 rand2050\\\\nji rand2054 rand2051\\\\nset str rand2052 generic function returned \\\\nset str rand2053  not the specified type \\\\nadd rand2052 rand2052 .typechecktype rand2053\\\\nadd rand2052 rand2052 rand2050\\\\nerr rand2052\\\\n: rand2054\\\\nset str rand2055 .generic\\\\nsettype rand2049 rand2055\\\\nret rand2049\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand2020 methods\\nobj get rand2015 rand2019 rand2020\\nset str rand2020 .cns\\nobj get rand2019 rand2019 rand2020\\ncallvar rand2019 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2015 rand2018 arg1 arg2\\nobj set rand2016 rand2017 rand2015\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand2059 attributes\\nobj get arg0 rand2058 rand2059\\nset str rand2059 active\\nobj get rand2058 rand2057 rand2059\\n// constant: false\\nset bool rand2057 false\\nobj set rand2058 rand2059 rand2057\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand2062 attributes\\nobj get arg0 rand2061 rand2062\\nset str rand2062 clone\\nobj get rand2061 rand2060 rand2062\\nset str rand2064 methods\\nobj get rand2060 rand2063 rand2064\\nset str rand2064 kill\\nobj get rand2063 rand2063 rand2064\\ncallvar rand2063 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand2060 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand2067 attributes\\nobj get arg0 rand2066 rand2067\\nset str rand2067 clone\\nobj get rand2066 rand2065 rand2067\\nset str rand2069 methods\\nobj get rand2065 rand2068 rand2069\\nset str rand2069 continue\\nobj get rand2068 rand2068 rand2069\\ncallvar rand2068 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand2065 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand2075 attributes\\nobj get arg0 rand2074 rand2075\\nset str rand2075 clone\\nobj get rand2074 rand2072 rand2075\\nset str rand2076 clone attribute is null\\nerrnull rand2072 rand2076\\nset str rand2077 attributes\\nobj get rand2072 rand2073 rand2077\\nset str rand2077 id\\nobj get rand2073 rand2071 rand2077\\nset str rand2078 id attribute is null\\nerrnull rand2071 rand2078\\nclone alive rand2070 rand2071\\nret rand2070\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand2085 attributes\\nobj get arg0 rand2084 rand2085\\nset str rand2085 clone\\nobj get rand2084 rand2082 rand2085\\nset str rand2086 attributes\\nobj get rand2082 rand2083 rand2086\\nset str rand2086 id\\nobj get rand2083 rand2081 rand2086\\nset type rand2087 .generic\\ncallget rand2080 clone:getCloneData rand2087 rand2081\\nistypeg rand2088 rand2080 rand2087\\nji rand2091 rand2088\\nset str rand2089 generic function returned \\nset str rand2090  not the specified type \\nadd rand2089 rand2089 .typechecktype rand2090\\nadd rand2089 rand2089 rand2087\\nerr rand2089\\n: rand2091\\nset str rand2092 .generic\\nsettype rand2080 rand2092\\nret rand2080\\nret\\n~\"},\"attributes\":{}}\nset str rand2093 attributes\nobj get rand2006 rand2094 rand2093\n// constant: true\nset bool rand2095 true\nset str rand2096 active\nobj set rand2094 rand2096 rand2095\nset str rand2011 methods\nobj get rand2006 rand2010 rand2011\nset str rand2011 .cns\nobj get rand2010 rand2010 rand2011\ncallvar rand2010 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2006 rand2007 rand1963\n// assignment: instance.process = proc\n// argument: instance\n// attribute: instance.process\n// argument: instance\nset str rand2099 attributes\nobj get arg1 rand2098 rand2099\nset str rand2099 process\nobj get rand2098 rand2097 rand2099\n// variable: proc\ndupe rand2097 rand2006\nobj set rand2098 rand2099 rand2097\n// statement: return new TerminalResult(true)\n// instance: new TerminalResult(true)\n// constant: true\nset bool rand2101 true\n// string: \"\"\nset str rand2102 \nset obj rand2100 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand2109 attributes\\nobj get arg0 rand2108 rand2109\\nset str rand2109 successful\\nobj get rand2108 rand2107 rand2109\\n// argument: successful\\ndupe rand2107 arg1\\nobj set rand2108 rand2109 rand2107\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand2112 attributes\\nobj get arg0 rand2111 rand2112\\nset str rand2112 text\\nobj get rand2111 rand2110 rand2112\\n// argument: text\\ndupe rand2110 arg2\\nobj set rand2111 rand2112 rand2110\\nret\\n~\"},\"attributes\":{}}\nset str rand2104 methods\nobj get rand2100 rand2103 rand2104\nset str rand2104 .cns\nobj get rand2103 rand2103 rand2104\ncallvar rand2103 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2100 rand2101 rand2102\nret rand2100\nret\n~"},"attributes":{}}
set str rand1948 methods
obj get rand1944 rand1947 rand1948
set str rand1948 .cns
obj get rand1947 rand1947 rand1948
callvar rand1947 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1944 rand1946
set str rand1945 fltr
obj set rand1098 rand1945 rand1944
set obj rand1097 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.state = state;\\nself.commands = commands;\n// assignment: self.state = state\n// constant: self\n// attribute: self.state\n// constant: self\nset str rand2119 attributes\nobj get arg0 rand2118 rand2119\nset str rand2119 state\nobj get rand2118 rand2117 rand2119\n// argument: state\ndupe rand2117 arg1\nobj set rand2118 rand2119 rand2117\n// assignment: self.commands = commands\n// constant: self\n// attribute: self.commands\n// constant: self\nset str rand2122 attributes\nobj get arg0 rand2121 rand2122\nset str rand2122 commands\nobj get rand2121 rand2120 rand2122\n// argument: commands\ndupe rand2120 arg2\nobj set rand2121 rand2122 rand2120\nret\n~","registerCommand":"~ mthd::registerCommand:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self!.commands[id] = command;\n// assignment: self!.commands[id] = command\n// attribute: self!.commands\n// constant: self\nset str rand2127 attributes\nobj get arg0 rand2126 rand2127\nset str rand2127 commands\nobj get rand2126 rand2125 rand2127\n// argument: id\n// argument: command\nobj set rand2125 arg1 arg2\nret\n~"},"attributes":{}}
set str rand2114 methods
obj get rand1097 rand2113 rand2114
set str rand2114 .cns
obj get rand2113 rand2113 rand2114
callvar rand2113 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand1097 arg0 rand1098
set str rand2128 terminal:TerminalContext
settype rand1097 rand2128
set type rand2129 terminal:TerminalContext
call globals:setGlobal rand2129 rand1096 rand1097
// assignment: TerminalContext context = globals:getGlobal<TerminalContext>("terminalContext")
// typed_execution: globals:getGlobal<TerminalContext>("terminalContext")
// string: "terminalContext"
set str rand2131 terminalContext
// constant: true
set bool rand2132 true
set type rand2133 terminal:TerminalContext
callget rand2130 globals:getGlobal rand2133 rand2131 rand2132
istypeg rand2134 rand2130 rand2133
ji rand2137 rand2134
set str rand2135 generic function returned 
set str rand2136  not the specified type 
add rand2135 rand2135 .typechecktype rand2136
add rand2135 rand2135 rand2133
err rand2135
: rand2137
// typed_execution: globals:setGlobal<TerminalInstance>("terminalInstance", new TerminalInstance(context, state.inputState.map))
// string: "terminalInstance"
set str rand2138 terminalInstance
// instance: new TerminalInstance(context, state.inputState.map)
// variable: context
// attribute: state.inputState.map
// attribute: state.inputState
// argument: state
set str rand2144 attributes
obj get arg0 rand2143 rand2144
set str rand2144 inputState
obj get rand2143 rand2141 rand2144
set str rand2145 attributes
obj get rand2141 rand2142 rand2145
set str rand2145 map
obj get rand2142 rand2140 rand2145
set obj rand2139 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.context = context;\\nself.map = map;\n// assignment: self.context = context\n// constant: self\n// attribute: self.context\n// constant: self\nset str rand2152 attributes\nobj get arg0 rand2151 rand2152\nset str rand2152 context\nobj get rand2151 rand2150 rand2152\n// argument: context\ndupe rand2150 arg1\nobj set rand2151 rand2152 rand2150\n// assignment: self.map = map\n// constant: self\n// attribute: self.map\n// constant: self\nset str rand2155 attributes\nobj get arg0 rand2154 rand2155\nset str rand2155 map\nobj get rand2154 rand2153 rand2155\n// argument: map\ndupe rand2153 arg2\nobj set rand2154 rand2155 rand2153\nret\n~","update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// arg_branch: if (self?.process) {\\nif(!self!.process.getAlive()) {\\nself.process = null;\\n} else {\\nself.process.continue();\\n}\\n}\n// attribute_check: self?.process\n// attribute: self.process\n// constant: self\nset str rand2159 attributes\nobj get arg0 rand2158 rand2159\nset str rand2159 process\nobj get rand2158 rand2157 rand2159\nisnull rand2156 rand2157\ninv rand2156 rand2156\njn rand2160 rand2156\n// segment: if(!self!.process.getAlive()) {\\nself.process = null;\\n} else {\\nself.process.continue();\\n}\n// arg_branch: if(!self!.process.getAlive()) {\\nself.process = null;\\n}\n// operation: !self!.process.getAlive()\n// method: self!.process.getAlive()\n// attribute: self!.process\n// constant: self\nset str rand2166 attributes\nobj get arg0 rand2165 rand2166\nset str rand2166 process\nobj get rand2165 rand2164 rand2166\nset str rand2168 methods\nobj get rand2164 rand2167 rand2168\nset str rand2168 getAlive\nobj get rand2167 rand2167 rand2168\ncallgetvar rand2163 rand2167 mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9 rand2164 \ninv rand2162 rand2163\njn rand2169 rand2162\n// segment: self.process = null;\n// assignment: self.process = null\n// constant: self\n// attribute: self.process\n// constant: self\nset str rand2174 attributes\nobj get arg0 rand2173 rand2174\nset str rand2174 process\nobj get rand2173 rand2172 rand2174\n// constant: null\nset null rand2172\nobj set rand2173 rand2174 rand2172\n: rand2169\njp rand2176\n: rand2169\n// segment: self.process.continue();\n// method: self.process.continue()\n// attribute: self.process\n// constant: self\nset str rand2179 attributes\nobj get arg0 rand2178 rand2179\nset str rand2179 process\nobj get rand2178 rand2177 rand2179\nset str rand2180 process attribute is null\nerrnull rand2177 rand2180\nset str rand2182 methods\nobj get rand2177 rand2181 rand2182\nset str rand2182 continue\nobj get rand2181 rand2181 rand2182\ncallvar rand2181 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand2177 \n: rand2176\n: rand2160\nret\n~","clear":"~ mthd::clear:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.text = \"\";\\nself.currentCmd = \"\";\\nself.hasLine = false;\n// assignment: self.text = \"\"\n// constant: self\n// attribute: self.text\n// constant: self\nset str rand2186 attributes\nobj get arg0 rand2185 rand2186\nset str rand2186 text\nobj get rand2185 rand2184 rand2186\n// string: \"\"\nset str rand2184 \nobj set rand2185 rand2186 rand2184\n// assignment: self.currentCmd = \"\"\n// constant: self\n// attribute: self.currentCmd\n// constant: self\nset str rand2190 attributes\nobj get arg0 rand2189 rand2190\nset str rand2190 currentCmd\nobj get rand2189 rand2188 rand2190\n// string: \"\"\nset str rand2188 \nobj set rand2189 rand2190 rand2188\n// assignment: self.hasLine = false\n// constant: self\n// attribute: self.hasLine\n// constant: self\nset str rand2194 attributes\nobj get arg0 rand2193 rand2194\nset str rand2194 hasLine\nobj get rand2193 rand2192 rand2194\n// constant: false\nset bool rand2192 false\nobj set rand2193 rand2194 rand2192\nret\n~","_destr":"~ mthd::_destr:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (value[0] == \"\\\"\" && value[value.length - 1] == \"\\\"\") {\\nreturn value.slice(1,-1);\\n}\\nreturn value;\n// arg_branch: if (value[0] == \"\\\"\" && value[value.length - 1] == \"\\\"\") {\\nreturn value.slice(1,-1);\\n}\n// operation: value[0] == \"\\\"\" && value[value.length - 1] == \"\\\"\"\n// comparison: value[0] == \"\\\"\"\n// key: value[0]\n// number: 0\nset num rand2201 0\n// argument: value\nobj get arg1 rand2199 rand2201\nset str rand2202  doesnt exist on value\nadd rand2202 rand2201 rand2202\nernull rand2199 rand2202\n// string: \"\\\"\"\nset str rand2200 \"\neql rand2197 rand2199 rand2200\n// comparison: value[value.length - 1] == \"\\\"\"\n// key: value[value.length - 1]\n// operation: value.length - 1\n// attribute: value.length\n// argument: value\nlen rand2206 arg1\n// number: 1\nset num rand2207 1\nsub rand2205 rand2206 rand2207\n// argument: value\nobj get arg1 rand2203 rand2205\nset str rand2208  doesnt exist on value\nadd rand2208 rand2205 rand2208\nernull rand2203 rand2208\n// string: \"\\\"\"\nset str rand2204 \"\neql rand2198 rand2203 rand2204\nand rand2196 rand2197 rand2198\njn rand2209 rand2196\n// segment: return value.slice(1,-1);\n// statement: return value.slice(1,-1)\n// method: value.slice(1,-1)\n// argument: value\n// number: 1\nset num rand2212 1\n// number: -1\nset num rand2213 -1\nslice rand2211 arg1 rand2212 rand2213\nret rand2211\n: rand2209\n// statement: return value\n// argument: value\nret arg1\nret\n~","runCommand":"~ mthd::runCommand:1441a7909c087dbbe7ce59881b9df8b9\n// segment: Arr<str> tokens = utils:splitChar(cmd, \" \", [\"intactQuotes\"]);\\n\\nArr<str> k = self.context.commands.keys();\\nif (k.contains(tokens[0])) {\\nArr<str> args = [];\\nstr key = tokens.shift();\\nfor (i, tokens.length) {\\nelem = tokens[i];\\nargs.append(self._destr(elem).toString());\\n}\\nTerminalCommand command = self.context.commands[key];\\nreturn command.execute(self, args, self.map, state, graphicsState);\\n}\\n\\nprint(\"unknown command:\", tokens[0], \"list:\", k);\\nreturn new TerminalResult(false, \"unknown command \\'\" ++ tokens[0] ++ \"\\'\");\n// assignment: Arr<str> tokens = utils:splitChar(cmd, \" \", [\"intactQuotes\"])\n// execution: utils:splitChar(cmd, \" \", [\"intactQuotes\"])\n// argument: cmd\n// string: \" \"\nset str rand2218  \n// array: [\"intactQuotes\"]\nset obj rand2219 [\"intactQuotes\"]\ncallget rand2217 utils:splitChar arg1 rand2218 rand2219\n// assignment: Arr<str> k = self.context.commands.keys()\n// method: self.context.commands.keys()\n// attribute: self.context.commands\n// attribute: self.context\n// constant: self\nset str rand2225 attributes\nobj get arg0 rand2224 rand2225\nset str rand2225 context\nobj get rand2224 rand2222 rand2225\nset str rand2226 context attribute is null\nerrnull rand2222 rand2226\nset str rand2227 attributes\nobj get rand2222 rand2223 rand2227\nset str rand2227 commands\nobj get rand2223 rand2221 rand2227\nset str rand2228 commands attribute is null\nerrnull rand2221 rand2228\nobj keys rand2220 rand2221\n// arg_branch: if (k.contains(tokens[0])) {\\nArr<str> args = [];\\nstr key = tokens.shift();\\nfor (i, tokens.length) {\\nelem = tokens[i];\\nargs.append(self._destr(elem).toString());\\n}\\nTerminalCommand command = self.context.commands[key];\\nreturn command.execute(self, args, self.map, state, graphicsState);\\n}\n// method: k.contains(tokens[0])\n// variable: k\n// key: tokens[0]\n// number: 0\nset num rand2231 0\n// variable: tokens\nobj get rand2217 rand2230 rand2231\nset str rand2232  doesnt exist on tokens\nadd rand2232 rand2231 rand2232\nernull rand2230 rand2232\narr has rand2229 rand2220 rand2230\njn rand2233 rand2229\n// segment: Arr<str> args = [];\\nstr key = tokens.shift();\\nfor (i, tokens.length) {\\nelem = tokens[i];\\nargs.append(self._destr(elem).toString());\\n}\\nTerminalCommand command = self.context.commands[key];\\nreturn command.execute(self, args, self.map, state, graphicsState);\n// assignment: Arr<str> args = []\n// array: []\nset obj rand2235 []\n// assignment: str key = tokens.shift()\n// method: tokens.shift()\n// variable: tokens\narr shift rand2217 rand2236\n// arg_branch: for (i, tokens.length) {\\nelem = tokens[i];\\nargs.append(self._destr(elem).toString());\\n}\n// variable: i\nset num rand2240 1\nset num rand2241 0\n// attribute: tokens.length\n// variable: tokens\nlen rand2237 rand2217\n: rand2238\nsml rand2242 rand2241 rand2237\njn rand2239 rand2242\n// segment: elem = tokens[i];\\nargs.append(self._destr(elem).toString());\n// assignment: elem = tokens[i]\n// key: tokens[i]\n// variable: i\n// variable: tokens\nobj get rand2217 rand2243 rand2241\nset str rand2244  doesnt exist on tokens\nadd rand2244 rand2241 rand2244\nernull rand2243 rand2244\n// method: args.append(self._destr(elem).toString())\n// variable: args\n// method: self._destr(elem).toString()\n// method: self._destr(elem)\n// constant: self\n// variable: elem\nset str rand2248 methods\nobj get arg0 rand2247 rand2248\nset str rand2248 _destr\nobj get rand2247 rand2247 rand2248\ncallgetvar rand2246 rand2247 mthd::_destr:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand2243\nadd rand2245 emptystring rand2246\narr add rand2235 rand2245\njai rand2238 rand2241\n: rand2239\n// assignment: TerminalCommand command = self.context.commands[key]\n// key: self.context.commands[key]\n// variable: key\n// attribute: self.context.commands\n// attribute: self.context\n// constant: self\nset str rand2254 attributes\nobj get arg0 rand2253 rand2254\nset str rand2254 context\nobj get rand2253 rand2251 rand2254\nset str rand2255 context attribute is null\nerrnull rand2251 rand2255\nset str rand2256 attributes\nobj get rand2251 rand2252 rand2256\nset str rand2256 commands\nobj get rand2252 rand2250 rand2256\nset str rand2257 commands attribute is null\nerrnull rand2250 rand2257\nobj get rand2250 rand2249 rand2236\nset str rand2258  doesnt exist on self.context.commands\nadd rand2258 rand2236 rand2258\nernull rand2249 rand2258\n// statement: return command.execute(self, args, self.map, state, graphicsState)\n// method: command.execute(self, args, self.map, state, graphicsState)\n// variable: command\n// constant: self\n// variable: args\n// attribute: self.map\n// constant: self\nset str rand2264 attributes\nobj get arg0 rand2263 rand2264\nset str rand2264 map\nobj get rand2263 rand2262 rand2264\nset str rand2265 map attribute is null\nerrnull rand2262 rand2265\n// argument: state\n// argument: graphicsState\nset str rand2261 methods\nobj get rand2249 rand2260 rand2261\nset str rand2261 execute\nobj get rand2260 rand2260 rand2261\ncallgetvar rand2259 rand2260 mthd::execute:1441a7909c087dbbe7ce59881b9df8b9 rand2249 arg0 rand2235 rand2262 arg2 arg3\nret rand2259\n: rand2233\n// execution: print(\"unknown command:\", tokens[0], \"list:\", k)\n// string: \"unknown command:\"\nset str rand2266 unknown command:\n// key: tokens[0]\n// number: 0\nset num rand2269 0\n// variable: tokens\nobj get rand2217 rand2267 rand2269\nset str rand2270  doesnt exist on tokens\nadd rand2270 rand2269 rand2270\nernull rand2267 rand2270\n// string: \"list:\"\nset str rand2268 list:\n// variable: k\nprint rand2266 rand2267 rand2268 rand2220\n// statement: return new TerminalResult(false, \"unknown command \\'\" ++ tokens[0] ++ \"\\'\")\n// instance: new TerminalResult(false, \"unknown command \\'\" ++ tokens[0] ++ \"\\'\")\n// constant: false\nset bool rand2272 false\n// operation: \"unknown command \\'\" ++ tokens[0] ++ \"\\'\"\n// operation: \"unknown command \\'\"++tokens[0]\n// string: \"unknown command \\'\"\nset str rand2276 unknown command '\n// key: tokens[0]\n// number: 0\nset num rand2278 0\n// variable: tokens\nobj get rand2217 rand2277 rand2278\nset str rand2279  doesnt exist on tokens\nadd rand2279 rand2278 rand2279\nernull rand2277 rand2279\nadd rand2274 emptystring rand2276 rand2277\n// string: \"\\'\"\nset str rand2275 '\nadd rand2273 emptystring rand2274 rand2275\nset obj rand2271 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.successful = successful;\\\\nself.text = text;\\n// assignment: self.successful = successful\\n// constant: self\\n// attribute: self.successful\\n// constant: self\\nset str rand2286 attributes\\nobj get arg0 rand2285 rand2286\\nset str rand2286 successful\\nobj get rand2285 rand2284 rand2286\\n// argument: successful\\ndupe rand2284 arg1\\nobj set rand2285 rand2286 rand2284\\n// assignment: self.text = text\\n// constant: self\\n// attribute: self.text\\n// constant: self\\nset str rand2289 attributes\\nobj get arg0 rand2288 rand2289\\nset str rand2289 text\\nobj get rand2288 rand2287 rand2289\\n// argument: text\\ndupe rand2287 arg2\\nobj set rand2288 rand2289 rand2287\\nret\\n~\"},\"attributes\":{}}\nset str rand2281 methods\nobj get rand2271 rand2280 rand2281\nset str rand2281 .cns\nobj get rand2280 rand2280 rand2281\ncallvar rand2280 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2271 rand2272 rand2273\nret rand2271\nret\n~"},"attributes":{"text":"","currentCmd":""}}
set str rand2290 attributes
obj get rand2139 rand2291 rand2290
// constant: false
set bool rand2292 false
set str rand2293 hasLine
obj set rand2291 rand2293 rand2292
// instance: new TerminalTheme()
set obj rand2294 {"methods":{},"attributes":{"text":"#fff","warn":"#e37900","error":"#bf0000"}}
set str rand2297 theme
obj set rand2291 rand2297 rand2294
set str rand2147 methods
obj get rand2139 rand2146 rand2147
set str rand2147 .cns
obj get rand2146 rand2146 rand2147
callvar rand2146 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2139 rand2130 rand2140
set str rand2298 terminal:TerminalInstance
settype rand2139 rand2298
set type rand2299 terminal:TerminalInstance
call globals:setGlobal rand2299 rand2138 rand2139
ret
~
~ terminal:runCommand
// segment: TerminalResult result = termInstance.runCommand(cmd, state, graphicsState);\n\nif (!result.successful) {\ntermInstance.text ++= text:embedColor(termInstance.context.state, termInstance.theme.warn);\n}\ntermInstance.text ++= result.text;
// assignment: TerminalResult result = termInstance.runCommand(cmd, state, graphicsState)
// method: termInstance.runCommand(cmd, state, graphicsState)
// argument: termInstance
// argument: cmd
// argument: state
// argument: graphicsState
set str rand2307 methods
obj get arg1 rand2306 rand2307
set str rand2307 runCommand
obj get rand2306 rand2306 rand2307
callgetvar rand2305 rand2306 mthd::runCommand:1441a7909c087dbbe7ce59881b9df8b9 arg1 arg0 arg2 arg3
// arg_branch: if (!result.successful) {\ntermInstance.text ++= text:embedColor(termInstance.context.state, termInstance.theme.warn);\n}
// operation: !result.successful
// attribute: result.successful
// variable: result
set str rand2311 attributes
obj get rand2305 rand2310 rand2311
set str rand2311 successful
obj get rand2310 rand2309 rand2311
set str rand2312 successful attribute is null
errnull rand2309 rand2312
inv rand2308 rand2309
jn rand2313 rand2308
// segment: termInstance.text ++= text:embedColor(termInstance.context.state, termInstance.theme.warn);
// assignment: termInstance.text ++= text:embedColor(termInstance.context.state, termInstance.theme.warn)
// argument: termInstance
// attribute: termInstance.text
// argument: termInstance
set str rand2318 attributes
obj get arg1 rand2317 rand2318
set str rand2318 text
obj get rand2317 rand2316 rand2318
// execution: text:embedColor(termInstance.context.state, termInstance.theme.warn)
// attribute: termInstance.context.state
// attribute: termInstance.context
// argument: termInstance
set str rand2324 attributes
obj get arg1 rand2323 rand2324
set str rand2324 context
obj get rand2323 rand2321 rand2324
set str rand2325 context attribute is null
errnull rand2321 rand2325
set str rand2326 attributes
obj get rand2321 rand2322 rand2326
set str rand2326 state
obj get rand2322 rand2320 rand2326
set str rand2327 state attribute is null
errnull rand2320 rand2327
// attribute: termInstance.theme.warn
// attribute: termInstance.theme
// argument: termInstance
set str rand2332 attributes
obj get arg1 rand2331 rand2332
set str rand2332 theme
obj get rand2331 rand2329 rand2332
set str rand2333 attributes
obj get rand2329 rand2330 rand2333
set str rand2333 warn
obj get rand2330 rand2328 rand2333
callget rand2319 text:embedColor rand2320 rand2328
add rand2316 emptystring rand2316 rand2319
obj set rand2317 rand2318 rand2316
: rand2313
// assignment: termInstance.text ++= result.text
// argument: termInstance
// attribute: termInstance.text
// argument: termInstance
set str rand2338 attributes
obj get arg1 rand2337 rand2338
set str rand2338 text
obj get rand2337 rand2336 rand2338
// attribute: result.text
// variable: result
set str rand2341 attributes
obj get rand2305 rand2340 rand2341
set str rand2341 text
obj get rand2340 rand2339 rand2341
set str rand2342 text attribute is null
errnull rand2339 rand2342
add rand2336 emptystring rand2336 rand2339
obj set rand2337 rand2338 rand2336
ret
~
~ terminal:newLine
// segment: if (termInstance.text.length > 0) {\ntermInstance.text ++= "\n";\n}\ntermInstance.text ++= text:embedReset(termInstance.context.state);\ntermInstance.text ++= "> ";
// arg_branch: if (termInstance.text.length > 0) {\ntermInstance.text ++= "\n";\n}
// comparison: termInstance.text.length > 0
// attribute: termInstance.text.length
// attribute: termInstance.text
// argument: termInstance
set str rand2352 attributes
obj get arg0 rand2351 rand2352
set str rand2352 text
obj get rand2351 rand2350 rand2352
len rand2348 rand2350
// number: 0
set num rand2349 0
gtr rand2347 rand2348 rand2349
jn rand2353 rand2347
// segment: termInstance.text ++= "\n";
// assignment: termInstance.text ++= "\n"
// argument: termInstance
// attribute: termInstance.text
// argument: termInstance
set str rand2358 attributes
obj get arg0 rand2357 rand2358
set str rand2358 text
obj get rand2357 rand2356 rand2358
// string: "\n"
set str rand2359 \n
add rand2356 emptystring rand2356 rand2359
obj set rand2357 rand2358 rand2356
: rand2353
// assignment: termInstance.text ++= text:embedReset(termInstance.context.state)
// argument: termInstance
// attribute: termInstance.text
// argument: termInstance
set str rand2364 attributes
obj get arg0 rand2363 rand2364
set str rand2364 text
obj get rand2363 rand2362 rand2364
// execution: text:embedReset(termInstance.context.state)
// attribute: termInstance.context.state
// attribute: termInstance.context
// argument: termInstance
set str rand2370 attributes
obj get arg0 rand2369 rand2370
set str rand2370 context
obj get rand2369 rand2367 rand2370
set str rand2371 context attribute is null
errnull rand2367 rand2371
set str rand2372 attributes
obj get rand2367 rand2368 rand2372
set str rand2372 state
obj get rand2368 rand2366 rand2372
set str rand2373 state attribute is null
errnull rand2366 rand2373
callget rand2365 text:embedReset rand2366
add rand2362 emptystring rand2362 rand2365
obj set rand2363 rand2364 rand2362
// assignment: termInstance.text ++= "> "
// argument: termInstance
// attribute: termInstance.text
// argument: termInstance
set str rand2378 attributes
obj get arg0 rand2377 rand2378
set str rand2378 text
obj get rand2377 rand2376 rand2378
// string: "> "
set str rand2379 > 
add rand2376 emptystring rand2376 rand2379
obj set rand2377 rand2378 rand2376
ret
~
~ terminal:handleInput
// segment: TerminalInstance termInstance = globals:getGlobal<TerminalInstance>("terminalInstance");\n\ntermInstance.update();\n\nbool inControl = true;\nif (termInstance?.process) {\nProcess proc = termInstance!.process;\ninControl = false;\n}\n\nif ((!termInstance.hasLine) &&& inControl) {\nnewLine(termInstance);\ntermInstance.hasLine = true;\n}\n\nArr<str> keys = state.inputState.map.keys;\nwhile (keys.length > 0) {\nstr key = keys.pop();\nif (state.inputState.map.downSpecial.contains("Control")) {\nif (key == "c" && termInstance?.process) {\nProcess proc = termInstance!.process;\nproc.kill();\n}\n}\nif (inControl) {\ntermInstance.text ++= key;\ntermInstance.currentCmd ++= key;\n}\n}\n\nArr<str> special = state.inputState.map.special;\nwhile (special.length > 0) {\nstr key = special.pop();\nif (inControl) {\nif (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}\nif (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}\n}\n}\nglobals:setGlobal<TerminalInstance>("terminalInstance", termInstance);
// assignment: TerminalInstance termInstance = globals:getGlobal<TerminalInstance>("terminalInstance")
// typed_execution: globals:getGlobal<TerminalInstance>("terminalInstance")
// string: "terminalInstance"
set str rand2385 terminalInstance
// constant: true
set bool rand2386 true
set type rand2387 terminal:TerminalInstance
callget rand2384 globals:getGlobal rand2387 rand2385 rand2386
istypeg rand2388 rand2384 rand2387
ji rand2391 rand2388
set str rand2389 generic function returned 
set str rand2390  not the specified type 
add rand2389 rand2389 .typechecktype rand2390
add rand2389 rand2389 rand2387
err rand2389
: rand2391
// method: termInstance.update()
// variable: termInstance
set str rand2393 methods
obj get rand2384 rand2392 rand2393
set str rand2393 update
obj get rand2392 rand2392 rand2393
callvar rand2392 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 rand2384 
// assignment: bool inControl = true
// constant: true
set bool rand2394 true
// arg_branch: if (termInstance?.process) {\nProcess proc = termInstance!.process;\ninControl = false;\n}
// attribute_check: termInstance?.process
// attribute: termInstance.process
// variable: termInstance
set str rand2398 attributes
obj get rand2384 rand2397 rand2398
set str rand2398 process
obj get rand2397 rand2396 rand2398
isnull rand2395 rand2396
inv rand2395 rand2395
jn rand2399 rand2395
// segment: Process proc = termInstance!.process;\ninControl = false;
// assignment: Process proc = termInstance!.process
// attribute: termInstance!.process
// variable: termInstance
set str rand2403 attributes
obj get rand2384 rand2402 rand2403
set str rand2403 process
obj get rand2402 rand2401 rand2403
// assignment: inControl = false
// constant: false
set bool rand2394 false
: rand2399
// arg_branch: if ((!termInstance.hasLine) &&& inControl) {\nnewLine(termInstance);\ntermInstance.hasLine = true;\n}
// operation: (!termInstance.hasLine) &&& inControl
// operation: (!termInstance.hasLine)
// attribute: termInstance.hasLine
// variable: termInstance
set str rand2408 attributes
obj get rand2384 rand2407 rand2408
set str rand2408 hasLine
obj get rand2407 rand2406 rand2408
inv rand2405 rand2406
// variable: inControl
and rand2404 rand2405 rand2394
tobool rand2404 rand2404
jn rand2409 rand2404
// segment: newLine(termInstance);\ntermInstance.hasLine = true;
// execution: newLine(termInstance)
// variable: termInstance
call terminal:newLine rand2384
// assignment: termInstance.hasLine = true
// variable: termInstance
// attribute: termInstance.hasLine
// variable: termInstance
set str rand2414 attributes
obj get rand2384 rand2413 rand2414
set str rand2414 hasLine
obj get rand2413 rand2412 rand2414
// constant: true
set bool rand2412 true
obj set rand2413 rand2414 rand2412
: rand2409
// assignment: Arr<str> keys = state.inputState.map.keys
// attribute: state.inputState.map.keys
// attribute: state.inputState.map
// attribute: state.inputState
// argument: state
set str rand2421 attributes
obj get arg0 rand2420 rand2421
set str rand2421 inputState
obj get rand2420 rand2418 rand2421
set str rand2422 attributes
obj get rand2418 rand2419 rand2422
set str rand2422 map
obj get rand2419 rand2416 rand2422
set str rand2423 attributes
obj get rand2416 rand2417 rand2423
set str rand2423 keys
obj get rand2417 rand2415 rand2423
// arg_branch: while (keys.length > 0) {\nstr key = keys.pop();\nif (state.inputState.map.downSpecial.contains("Control")) {\nif (key == "c" && termInstance?.process) {\nProcess proc = termInstance!.process;\nproc.kill();\n}\n}\nif (inControl) {\ntermInstance.text ++= key;\ntermInstance.currentCmd ++= key;\n}\n}
: rand2424
// comparison: keys.length > 0
// attribute: keys.length
// variable: keys
len rand2428 rand2415
// number: 0
set num rand2429 0
gtr rand2427 rand2428 rand2429
jn rand2425 rand2427
// segment: str key = keys.pop();\nif (state.inputState.map.downSpecial.contains("Control")) {\nif (key == "c" && termInstance?.process) {\nProcess proc = termInstance!.process;\nproc.kill();\n}\n}\nif (inControl) {\ntermInstance.text ++= key;\ntermInstance.currentCmd ++= key;\n}
// assignment: str key = keys.pop()
// method: keys.pop()
// variable: keys
arr pop rand2415 rand2430
// arg_branch: if (state.inputState.map.downSpecial.contains("Control")) {\nif (key == "c" && termInstance?.process) {\nProcess proc = termInstance!.process;\nproc.kill();\n}\n}
// method: state.inputState.map.downSpecial.contains("Control")
// attribute: state.inputState.map.downSpecial
// attribute: state.inputState.map
// attribute: state.inputState
// argument: state
set str rand2438 attributes
obj get arg0 rand2437 rand2438
set str rand2438 inputState
obj get rand2437 rand2435 rand2438
set str rand2439 attributes
obj get rand2435 rand2436 rand2439
set str rand2439 map
obj get rand2436 rand2433 rand2439
set str rand2440 attributes
obj get rand2433 rand2434 rand2440
set str rand2440 downSpecial
obj get rand2434 rand2432 rand2440
// string: "Control"
set str rand2441 Control
arr has rand2431 rand2432 rand2441
jn rand2442 rand2431
// arg_branch: if (key == "c" && termInstance?.process) {\nProcess proc = termInstance!.process;\nproc.kill();\n}
// operation: key == "c" && termInstance?.process
// comparison: key == "c"
// variable: key
// string: "c"
set str rand2447 c
eql rand2445 rand2430 rand2447
// attribute_check: termInstance?.process
// attribute: termInstance.process
// variable: termInstance
set str rand2450 attributes
obj get rand2384 rand2449 rand2450
set str rand2450 process
obj get rand2449 rand2448 rand2450
isnull rand2446 rand2448
inv rand2446 rand2446
and rand2444 rand2445 rand2446
jn rand2451 rand2444
// segment: Process proc = termInstance!.process;\nproc.kill();
// assignment: Process proc = termInstance!.process
// attribute: termInstance!.process
// variable: termInstance
set str rand2455 attributes
obj get rand2384 rand2454 rand2455
set str rand2455 process
obj get rand2454 rand2453 rand2455
// method: proc.kill()
// variable: proc
set str rand2457 methods
obj get rand2453 rand2456 rand2457
set str rand2457 kill
obj get rand2456 rand2456 rand2457
callvar rand2456 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand2453 
: rand2451
: rand2442
// arg_branch: if (inControl) {\ntermInstance.text ++= key;\ntermInstance.currentCmd ++= key;\n}
// variable: inControl
jn rand2458 rand2394
// segment: termInstance.text ++= key;\ntermInstance.currentCmd ++= key;
// assignment: termInstance.text ++= key
// variable: termInstance
// attribute: termInstance.text
// variable: termInstance
set str rand2462 attributes
obj get rand2384 rand2461 rand2462
set str rand2462 text
obj get rand2461 rand2460 rand2462
// variable: key
dupe rand2463 rand2430
add rand2460 emptystring rand2460 rand2463
obj set rand2461 rand2462 rand2460
// assignment: termInstance.currentCmd ++= key
// variable: termInstance
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2467 attributes
obj get rand2384 rand2466 rand2467
set str rand2467 currentCmd
obj get rand2466 rand2465 rand2467
// variable: key
dupe rand2468 rand2430
add rand2465 emptystring rand2465 rand2468
obj set rand2466 rand2467 rand2465
: rand2458
jp rand2424
: rand2425
// assignment: Arr<str> special = state.inputState.map.special
// attribute: state.inputState.map.special
// attribute: state.inputState.map
// attribute: state.inputState
// argument: state
set str rand2476 attributes
obj get arg0 rand2475 rand2476
set str rand2476 inputState
obj get rand2475 rand2473 rand2476
set str rand2477 attributes
obj get rand2473 rand2474 rand2477
set str rand2477 map
obj get rand2474 rand2471 rand2477
set str rand2478 attributes
obj get rand2471 rand2472 rand2478
set str rand2478 special
obj get rand2472 rand2470 rand2478
// arg_branch: while (special.length > 0) {\nstr key = special.pop();\nif (inControl) {\nif (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}\nif (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}\n}\n}
: rand2479
// comparison: special.length > 0
// attribute: special.length
// variable: special
len rand2483 rand2470
// number: 0
set num rand2484 0
gtr rand2482 rand2483 rand2484
jn rand2480 rand2482
// segment: str key = special.pop();\nif (inControl) {\nif (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}\nif (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}\n}
// assignment: str key = special.pop()
// method: special.pop()
// variable: special
arr pop rand2470 rand2485
// arg_branch: if (inControl) {\nif (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}\nif (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}\n}
// variable: inControl
jn rand2486 rand2394
// segment: if (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}\nif (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}
// arg_branch: if (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}
// operation: key == "Enter" && termInstance.currentCmd.length > 0
// comparison: key == "Enter"
// variable: key
// string: "Enter"
set str rand2491 Enter
eql rand2489 rand2485 rand2491
// comparison: termInstance.currentCmd.length > 0
// attribute: termInstance.currentCmd.length
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2496 attributes
obj get rand2384 rand2495 rand2496
set str rand2496 currentCmd
obj get rand2495 rand2494 rand2496
len rand2492 rand2494
// number: 0
set num rand2493 0
gtr rand2490 rand2492 rand2493
and rand2488 rand2489 rand2490
jn rand2497 rand2488
// segment: termInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;
// assignment: termInstance.text ++= "\n"
// variable: termInstance
// attribute: termInstance.text
// variable: termInstance
set str rand2502 attributes
obj get rand2384 rand2501 rand2502
set str rand2502 text
obj get rand2501 rand2500 rand2502
// string: "\n"
set str rand2503 \n
add rand2500 emptystring rand2500 rand2503
obj set rand2501 rand2502 rand2500
// execution: runCommand(termInstance.currentCmd, termInstance, state, graphicsState)
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2507 attributes
obj get rand2384 rand2506 rand2507
set str rand2507 currentCmd
obj get rand2506 rand2505 rand2507
// variable: termInstance
// argument: state
// argument: graphicsState
call terminal:runCommand rand2505 rand2384 arg0 arg1
// assignment: termInstance.currentCmd = ""
// variable: termInstance
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2511 attributes
obj get rand2384 rand2510 rand2511
set str rand2511 currentCmd
obj get rand2510 rand2509 rand2511
// string: ""
set str rand2509 
obj set rand2510 rand2511 rand2509
// assignment: termInstance.hasLine = false
// variable: termInstance
// attribute: termInstance.hasLine
// variable: termInstance
set str rand2515 attributes
obj get rand2384 rand2514 rand2515
set str rand2515 hasLine
obj get rand2514 rand2513 rand2515
// constant: false
set bool rand2513 false
obj set rand2514 rand2515 rand2513
: rand2497
// arg_branch: if (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}
// operation: key == "Backspace" && termInstance.currentCmd.length > 0
// comparison: key == "Backspace"
// variable: key
// string: "Backspace"
set str rand2519 Backspace
eql rand2517 rand2485 rand2519
// comparison: termInstance.currentCmd.length > 0
// attribute: termInstance.currentCmd.length
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2524 attributes
obj get rand2384 rand2523 rand2524
set str rand2524 currentCmd
obj get rand2523 rand2522 rand2524
len rand2520 rand2522
// number: 0
set num rand2521 0
gtr rand2518 rand2520 rand2521
and rand2516 rand2517 rand2518
jn rand2525 rand2516
// segment: termInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);
// assignment: termInstance.text = termInstance.text.slice(0,-1)
// variable: termInstance
// attribute: termInstance.text
// variable: termInstance
set str rand2530 attributes
obj get rand2384 rand2529 rand2530
set str rand2530 text
obj get rand2529 rand2528 rand2530
// method: termInstance.text.slice(0,-1)
// attribute: termInstance.text
// variable: termInstance
set str rand2533 attributes
obj get rand2384 rand2532 rand2533
set str rand2533 text
obj get rand2532 rand2531 rand2533
// number: 0
set num rand2534 0
// number: -1
set num rand2535 -1
slice rand2528 rand2531 rand2534 rand2535
obj set rand2529 rand2530 rand2528
// assignment: termInstance.currentCmd = termInstance.currentCmd.slice(0,-1)
// variable: termInstance
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2539 attributes
obj get rand2384 rand2538 rand2539
set str rand2539 currentCmd
obj get rand2538 rand2537 rand2539
// method: termInstance.currentCmd.slice(0,-1)
// attribute: termInstance.currentCmd
// variable: termInstance
set str rand2542 attributes
obj get rand2384 rand2541 rand2542
set str rand2542 currentCmd
obj get rand2541 rand2540 rand2542
// number: 0
set num rand2543 0
// number: -1
set num rand2544 -1
slice rand2537 rand2540 rand2543 rand2544
obj set rand2538 rand2539 rand2537
: rand2525
: rand2486
jp rand2479
: rand2480
// typed_execution: globals:setGlobal<TerminalInstance>("terminalInstance", termInstance)
// string: "terminalInstance"
set str rand2545 terminalInstance
// variable: termInstance
set str rand2546 terminal:TerminalInstance
settype rand2384 rand2546
set type rand2547 terminal:TerminalInstance
call globals:setGlobal rand2547 rand2545 rand2384
ret
~
~ terminal:drawMain
// segment: Surface drawSurf = graphicsState.drawSurface;\nFrame drawFrame = drawSurf.frame;\nTerminalInstance termInstance = globals:getGlobal<TerminalInstance>("terminalInstance");\n\n{\ndrawSurf.setColor("#0e0d10");\ndrawSurf.square(drawFrame.getX(), drawFrame.getY(), drawFrame.getW(), drawFrame.getH(), 0);\n}\n{\ndrawSurf.setColor("#fff");\nArr<num> pos = drawFrame.getTL();\ndrawSurf.text(termInstance.text, 10, pos[0] + 5, pos[1] - 17.5);\n}
// assignment: Surface drawSurf = graphicsState.drawSurface
// attribute: graphicsState.drawSurface
// argument: graphicsState
set str rand2554 attributes
obj get arg1 rand2553 rand2554
set str rand2554 drawSurface
obj get rand2553 rand2552 rand2554
set str rand2555 drawSurface attribute is null
errnull rand2552 rand2555
// assignment: Frame drawFrame = drawSurf.frame
// attribute: drawSurf.frame
// variable: drawSurf
set str rand2558 attributes
obj get rand2552 rand2557 rand2558
set str rand2558 frame
obj get rand2557 rand2556 rand2558
set str rand2559 frame attribute is null
errnull rand2556 rand2559
// assignment: TerminalInstance termInstance = globals:getGlobal<TerminalInstance>("terminalInstance")
// typed_execution: globals:getGlobal<TerminalInstance>("terminalInstance")
// string: "terminalInstance"
set str rand2561 terminalInstance
// constant: true
set bool rand2562 true
set type rand2563 terminal:TerminalInstance
callget rand2560 globals:getGlobal rand2563 rand2561 rand2562
istypeg rand2564 rand2560 rand2563
ji rand2567 rand2564
set str rand2565 generic function returned 
set str rand2566  not the specified type 
add rand2565 rand2565 .typechecktype rand2566
add rand2565 rand2565 rand2563
err rand2565
: rand2567
// segment: {\ndrawSurf.setColor("#0e0d10");\ndrawSurf.square(drawFrame.getX(), drawFrame.getY(), drawFrame.getW(), drawFrame.getH(), 0);\n}
// method: drawSurf.setColor("#0e0d10")
// variable: drawSurf
// string: "#0e0d10"
set str rand2570 #0e0d10
set str rand2569 methods
obj get rand2552 rand2568 rand2569
set str rand2569 setColor
obj get rand2568 rand2568 rand2569
callvar rand2568 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 rand2552 rand2570
// method: drawSurf.square(drawFrame.getX(), drawFrame.getY(), drawFrame.getW(), drawFrame.getH(), 0)
// variable: drawSurf
// method: drawFrame.getX()
// variable: drawFrame
set str rand2575 methods
obj get rand2556 rand2574 rand2575
set str rand2575 getX
obj get rand2574 rand2574 rand2575
callgetvar rand2573 rand2574 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 rand2556 
// method: drawFrame.getY()
// variable: drawFrame
set str rand2578 methods
obj get rand2556 rand2577 rand2578
set str rand2578 getY
obj get rand2577 rand2577 rand2578
callgetvar rand2576 rand2577 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 rand2556 
// method: drawFrame.getW()
// variable: drawFrame
set str rand2581 methods
obj get rand2556 rand2580 rand2581
set str rand2581 getW
obj get rand2580 rand2580 rand2581
callgetvar rand2579 rand2580 mthd::getW:1441a7909c087dbbe7ce59881b9df8b9 rand2556 
// method: drawFrame.getH()
// variable: drawFrame
set str rand2584 methods
obj get rand2556 rand2583 rand2584
set str rand2584 getH
obj get rand2583 rand2583 rand2584
callgetvar rand2582 rand2583 mthd::getH:1441a7909c087dbbe7ce59881b9df8b9 rand2556 
// number: 0
set num rand2585 0
set str rand2572 methods
obj get rand2552 rand2571 rand2572
set str rand2572 square
obj get rand2571 rand2571 rand2572
callvar rand2571 mthd::square:1441a7909c087dbbe7ce59881b9df8b9 rand2552 rand2573 rand2576 rand2579 rand2582 rand2585
// segment: {\ndrawSurf.setColor("#fff");\nArr<num> pos = drawFrame.getTL();\ndrawSurf.text(termInstance.text, 10, pos[0] + 5, pos[1] - 17.5);\n}
// method: drawSurf.setColor("#fff")
// variable: drawSurf
// string: "#fff"
set str rand2588 #fff
set str rand2587 methods
obj get rand2552 rand2586 rand2587
set str rand2587 setColor
obj get rand2586 rand2586 rand2587
callvar rand2586 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 rand2552 rand2588
// assignment: Arr<num> pos = drawFrame.getTL()
// method: drawFrame.getTL()
// variable: drawFrame
set str rand2591 methods
obj get rand2556 rand2590 rand2591
set str rand2591 getTL
obj get rand2590 rand2590 rand2591
callgetvar rand2589 rand2590 mthd::getTL:1441a7909c087dbbe7ce59881b9df8b9 rand2556 
// method: drawSurf.text(termInstance.text, 10, pos[0] + 5, pos[1] - 17.5)
// variable: drawSurf
// attribute: termInstance.text
// variable: termInstance
set str rand2596 attributes
obj get rand2560 rand2595 rand2596
set str rand2596 text
obj get rand2595 rand2594 rand2596
// number: 10
set num rand2597 10
// operation: pos[0] + 5
// key: pos[0]
// number: 0
set num rand2601 0
// variable: pos
obj get rand2589 rand2599 rand2601
set str rand2602  doesnt exist on pos
add rand2602 rand2601 rand2602
ernull rand2599 rand2602
// number: 5
set num rand2600 5
add rand2598 rand2599 rand2600
// operation: pos[1] - 17.5
// key: pos[1]
// number: 1
set num rand2606 1
// variable: pos
obj get rand2589 rand2604 rand2606
set str rand2607  doesnt exist on pos
add rand2607 rand2606 rand2607
ernull rand2604 rand2607
// number: 17.5
set num rand2605 17.5
sub rand2603 rand2604 rand2605
// number: 90
set num rand2608 90
// number: 0
set num rand2609 0
set str rand2593 methods
obj get rand2552 rand2592 rand2593
set str rand2593 text
obj get rand2592 rand2592 rand2593
callvar rand2592 mthd::text:1441a7909c087dbbe7ce59881b9df8b9 rand2552 rand2594 rand2597 rand2598 rand2603 rand2608 rand2609
ret
~
~ terminal:update
// segment: handleInput(state, graphicsState);\ndrawMain(state, graphicsState);
// execution: handleInput(state, graphicsState)
// argument: state
// argument: graphicsState
call terminal:handleInput arg0 arg1
// execution: drawMain(state, graphicsState)
// argument: state
// argument: graphicsState
call terminal:drawMain arg0 arg1
ret
~
~ WM:init
// segment: WindowManagerContext ctx = globals:setGlobal<WindowManagerContext>("wmContext", new WindowManagerContext());\n\nctx.addProvider("normal", new WindowManagerProvider("sys/wms/normal.fbl"));\n\nctx.setCurrentProvider("normal");\nctx.startProvider(state, graphicsState);\n\ngraphicsState.drawSurface.loadFontFromUrl(state.config.fontUrl);
// assignment: WindowManagerContext ctx = globals:setGlobal<WindowManagerContext>("wmContext", new WindowManagerContext())
// typed_execution: globals:setGlobal<WindowManagerContext>("wmContext", new WindowManagerContext())
// string: "wmContext"
set str rand2631 wmContext
// instance: new WindowManagerContext()
set obj rand2632 {"methods":{"update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (!self?.currentProvider) {\\nio:throw(\"no current wm provider\");\\n}\\nWindowManagerProvider provider = self.providers[self!.currentProvider];\\nprovider.continue();\n// arg_branch: if (!self?.currentProvider) {\\nio:throw(\"no current wm provider\");\\n}\n// operation: !self?.currentProvider\n// attribute_check: self?.currentProvider\n// attribute: self.currentProvider\n// constant: self\nset str rand2639 attributes\nobj get arg0 rand2638 rand2639\nset str rand2639 currentProvider\nobj get rand2638 rand2637 rand2639\nisnull rand2636 rand2637\ninv rand2636 rand2636\ninv rand2635 rand2636\njn rand2640 rand2635\n// segment: io:throw(\"no current wm provider\");\n// execution: io:throw(\"no current wm provider\")\n// string: \"no current wm provider\"\nset str rand2642 no current wm provider\ncall io:throw rand2642\n: rand2640\n// assignment: WindowManagerProvider provider = self.providers[self!.currentProvider]\n// key: self.providers[self!.currentProvider]\n// attribute: self!.currentProvider\n// constant: self\nset str rand2646 attributes\nobj get arg0 rand2645 rand2646\nset str rand2646 currentProvider\nobj get rand2645 rand2644 rand2646\n// attribute: self.providers\n// constant: self\nset str rand2649 attributes\nobj get arg0 rand2648 rand2649\nset str rand2649 providers\nobj get rand2648 rand2647 rand2649\nobj get rand2647 rand2643 rand2644\nset str rand2650  doesnt exist on self.providers\nadd rand2650 rand2644 rand2650\nernull rand2643 rand2650\n// method: provider.continue()\n// variable: provider\nset str rand2652 methods\nobj get rand2643 rand2651 rand2652\nset str rand2652 continue\nobj get rand2651 rand2651 rand2652\ncallvar rand2651 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand2643 \nret\n~","setCurrentProvider":"~ mthd::setCurrentProvider:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (!self.providers.keys().contains(name)) {\\nio:throw(\"unknown provider\" + name);\\n}\\nself.currentProvider = name;\n// arg_branch: if (!self.providers.keys().contains(name)) {\\nio:throw(\"unknown provider\" + name);\\n}\n// operation: !self.providers.keys().contains(name)\n// method: self.providers.keys().contains(name)\n// method: self.providers.keys()\n// attribute: self.providers\n// constant: self\nset str rand2659 attributes\nobj get arg0 rand2658 rand2659\nset str rand2659 providers\nobj get rand2658 rand2657 rand2659\nobj keys rand2656 rand2657\n// argument: name\narr has rand2655 rand2656 arg1\ninv rand2654 rand2655\njn rand2660 rand2654\n// segment: io:throw(\"unknown provider\" + name);\n// execution: io:throw(\"unknown provider\" + name)\n// operation: \"unknown provider\" + name\n// string: \"unknown provider\"\nset str rand2663 unknown provider\n// argument: name\nadd rand2662 emptystring rand2663 space arg1\ncall io:throw rand2662\n: rand2660\n// assignment: self.currentProvider = name\n// constant: self\n// attribute: self.currentProvider\n// constant: self\nset str rand2666 attributes\nobj get arg0 rand2665 rand2666\nset str rand2666 currentProvider\nobj get rand2665 rand2664 rand2666\n// argument: name\ndupe rand2664 arg1\nobj set rand2665 rand2666 rand2664\nret\n~","startProvider":"~ mthd::startProvider:1441a7909c087dbbe7ce59881b9df8b9\n// segment: print(self);\\nif (!self?.currentProvider) {\\nio:throw(\"no current wm provider\");\\n}\\nif (!self.providers.keys().contains(self!.currentProvider)) {\\nio:throw(\"unknown provider\" + self!.currentProvider);\\n}\\nWindowManagerProvider provider = self.providers[self!.currentProvider];\\nprovider.init(state, graphicsState, self.windows);\n// execution: print(self)\n// constant: self\nprint arg0\n// arg_branch: if (!self?.currentProvider) {\\nio:throw(\"no current wm provider\");\\n}\n// operation: !self?.currentProvider\n// attribute_check: self?.currentProvider\n// attribute: self.currentProvider\n// constant: self\nset str rand2673 attributes\nobj get arg0 rand2672 rand2673\nset str rand2673 currentProvider\nobj get rand2672 rand2671 rand2673\nisnull rand2670 rand2671\ninv rand2670 rand2670\ninv rand2669 rand2670\njn rand2674 rand2669\n// segment: io:throw(\"no current wm provider\");\n// execution: io:throw(\"no current wm provider\")\n// string: \"no current wm provider\"\nset str rand2676 no current wm provider\ncall io:throw rand2676\n: rand2674\n// arg_branch: if (!self.providers.keys().contains(self!.currentProvider)) {\\nio:throw(\"unknown provider\" + self!.currentProvider);\\n}\n// operation: !self.providers.keys().contains(self!.currentProvider)\n// method: self.providers.keys().contains(self!.currentProvider)\n// method: self.providers.keys()\n// attribute: self.providers\n// constant: self\nset str rand2682 attributes\nobj get arg0 rand2681 rand2682\nset str rand2682 providers\nobj get rand2681 rand2680 rand2682\nobj keys rand2679 rand2680\n// attribute: self!.currentProvider\n// constant: self\nset str rand2685 attributes\nobj get arg0 rand2684 rand2685\nset str rand2685 currentProvider\nobj get rand2684 rand2683 rand2685\narr has rand2678 rand2679 rand2683\ninv rand2677 rand2678\njn rand2686 rand2677\n// segment: io:throw(\"unknown provider\" + self!.currentProvider);\n// execution: io:throw(\"unknown provider\" + self!.currentProvider)\n// operation: \"unknown provider\" + self!.currentProvider\n// string: \"unknown provider\"\nset str rand2689 unknown provider\n// attribute: self!.currentProvider\n// constant: self\nset str rand2692 attributes\nobj get arg0 rand2691 rand2692\nset str rand2692 currentProvider\nobj get rand2691 rand2690 rand2692\nadd rand2688 emptystring rand2689 space rand2690\ncall io:throw rand2688\n: rand2686\n// assignment: WindowManagerProvider provider = self.providers[self!.currentProvider]\n// key: self.providers[self!.currentProvider]\n// attribute: self!.currentProvider\n// constant: self\nset str rand2696 attributes\nobj get arg0 rand2695 rand2696\nset str rand2696 currentProvider\nobj get rand2695 rand2694 rand2696\n// attribute: self.providers\n// constant: self\nset str rand2699 attributes\nobj get arg0 rand2698 rand2699\nset str rand2699 providers\nobj get rand2698 rand2697 rand2699\nobj get rand2697 rand2693 rand2694\nset str rand2700  doesnt exist on self.providers\nadd rand2700 rand2694 rand2700\nernull rand2693 rand2700\n// method: provider.init(state, graphicsState, self.windows)\n// variable: provider\n// argument: state\n// argument: graphicsState\n// attribute: self.windows\n// constant: self\nset str rand2705 attributes\nobj get arg0 rand2704 rand2705\nset str rand2705 windows\nobj get rand2704 rand2703 rand2705\nset str rand2702 methods\nobj get rand2693 rand2701 rand2702\nset str rand2702 init\nobj get rand2701 rand2701 rand2702\ncallvar rand2701 mthd::init:1441a7909c087dbbe7ce59881b9df8b9 rand2693 arg1 arg2 rand2703\nret\n~","addProvider":"~ mthd::addProvider:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.providers[name] = provider;\n// assignment: self.providers[name] = provider\n// attribute: self.providers\n// constant: self\nset str rand2710 attributes\nobj get arg0 rand2709 rand2710\nset str rand2710 providers\nobj get rand2709 rand2708 rand2710\n// argument: name\n// argument: provider\nobj set rand2708 arg1 arg2\nret\n~"},"attributes":{}}
set str rand2711 attributes
obj get rand2632 rand2712 rand2711
// object: {}
set obj rand2713 {}
set str rand2714 providers
obj set rand2712 rand2714 rand2713
// object: {\n"myID": new Window(new Frame(-300,-200, 300,200))\n}
set obj rand2715 {}
// instance: new Window(new Frame(-300,-200, 300,200))
// instance: new Frame(-300,-200, 300,200)
// number: -300
set num rand2719 -300
// number: -200
set num rand2720 -200
// number: 300
set num rand2721 300
// number: 200
set num rand2722 200
set obj rand2718 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.x1 = x1;\\nself.y1 = y1;\\nself.x2 = x2;\\nself.y2 = y2;\n// assignment: self.x1 = x1\n// constant: self\n// attribute: self.x1\n// constant: self\nset str rand2731 attributes\nobj get arg0 rand2730 rand2731\nset str rand2731 x1\nobj get rand2730 rand2729 rand2731\n// argument: x1\ndupe rand2729 arg1\nobj set rand2730 rand2731 rand2729\n// assignment: self.y1 = y1\n// constant: self\n// attribute: self.y1\n// constant: self\nset str rand2734 attributes\nobj get arg0 rand2733 rand2734\nset str rand2734 y1\nobj get rand2733 rand2732 rand2734\n// argument: y1\ndupe rand2732 arg2\nobj set rand2733 rand2734 rand2732\n// assignment: self.x2 = x2\n// constant: self\n// attribute: self.x2\n// constant: self\nset str rand2737 attributes\nobj get arg0 rand2736 rand2737\nset str rand2737 x2\nobj get rand2736 rand2735 rand2737\n// argument: x2\ndupe rand2735 arg3\nobj set rand2736 rand2737 rand2735\n// assignment: self.y2 = y2\n// constant: self\n// attribute: self.y2\n// constant: self\nset str rand2740 attributes\nobj get arg0 rand2739 rand2740\nset str rand2740 y2\nobj get rand2739 rand2738 rand2740\n// argument: y2\ndupe rand2738 arg4\nobj set rand2739 rand2740 rand2738\nret\n~","getX":"~ mthd::getX:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.x1,self.x2)\n// execution: math:mid(self.x1,self.x2)\n// attribute: self.x1\n// constant: self\nset str rand2744 attributes\nobj get arg0 rand2743 rand2744\nset str rand2744 x1\nobj get rand2743 rand2742 rand2744\nset str rand2745 x1 attribute is null\nerrnull rand2742 rand2745\n// attribute: self.x2\n// constant: self\nset str rand2748 attributes\nobj get arg0 rand2747 rand2748\nset str rand2748 x2\nobj get rand2747 rand2746 rand2748\nset str rand2749 x2 attribute is null\nerrnull rand2746 rand2749\ncallget rand2741 math:mid rand2742 rand2746\nret rand2741\nret\n~","getY":"~ mthd::getY:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return math:mid(self.y1,self.y2)\n// execution: math:mid(self.y1,self.y2)\n// attribute: self.y1\n// constant: self\nset str rand2753 attributes\nobj get arg0 rand2752 rand2753\nset str rand2753 y1\nobj get rand2752 rand2751 rand2753\nset str rand2754 y1 attribute is null\nerrnull rand2751 rand2754\n// attribute: self.y2\n// constant: self\nset str rand2757 attributes\nobj get arg0 rand2756 rand2757\nset str rand2757 y2\nobj get rand2756 rand2755 rand2757\nset str rand2758 y2 attribute is null\nerrnull rand2755 rand2758\ncallget rand2750 math:mid rand2751 rand2755\nret rand2750\nret\n~","getW":"~ mthd::getW:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.x2 - self.x1\n// operation: self.x2 - self.x1\n// attribute: self.x2\n// constant: self\nset str rand2763 attributes\nobj get arg0 rand2762 rand2763\nset str rand2763 x2\nobj get rand2762 rand2760 rand2763\nset str rand2764 x2 attribute is null\nerrnull rand2760 rand2764\n// attribute: self.x1\n// constant: self\nset str rand2766 attributes\nobj get arg0 rand2765 rand2766\nset str rand2766 x1\nobj get rand2765 rand2761 rand2766\nset str rand2767 x1 attribute is null\nerrnull rand2761 rand2767\nsub rand2759 rand2760 rand2761\nret rand2759\nret\n~","getH":"~ mthd::getH:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return self.y2 - self.y1\n// operation: self.y2 - self.y1\n// attribute: self.y2\n// constant: self\nset str rand2772 attributes\nobj get arg0 rand2771 rand2772\nset str rand2772 y2\nobj get rand2771 rand2769 rand2772\nset str rand2773 y2 attribute is null\nerrnull rand2769 rand2773\n// attribute: self.y1\n// constant: self\nset str rand2775 attributes\nobj get arg0 rand2774 rand2775\nset str rand2775 y1\nobj get rand2774 rand2770 rand2775\nset str rand2776 y1 attribute is null\nerrnull rand2770 rand2776\nsub rand2768 rand2769 rand2770\nret rand2768\nret\n~","getTL":"~ mthd::getTL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y2]\n// array: [self.x1,self.y2]\nset obj rand2777 []\n// attribute: self.x1\n// constant: self\nset str rand2780 attributes\nobj get arg0 rand2779 rand2780\nset str rand2780 x1\nobj get rand2779 rand2778 rand2780\nset str rand2781 x1 attribute is null\nerrnull rand2778 rand2781\narr add rand2777 rand2778\n// attribute: self.y2\n// constant: self\nset str rand2784 attributes\nobj get arg0 rand2783 rand2784\nset str rand2784 y2\nobj get rand2783 rand2782 rand2784\nset str rand2785 y2 attribute is null\nerrnull rand2782 rand2785\narr add rand2777 rand2782\nret rand2777\nret\n~","getT":"~ mthd::getT:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y2]\n// array: [self.getX(),self.y2]\nset obj rand2786 []\n// method: self.getX()\n// constant: self\nset str rand2789 methods\nobj get arg0 rand2788 rand2789\nset str rand2789 getX\nobj get rand2788 rand2788 rand2789\ncallgetvar rand2787 rand2788 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand2786 rand2787\n// attribute: self.y2\n// constant: self\nset str rand2792 attributes\nobj get arg0 rand2791 rand2792\nset str rand2792 y2\nobj get rand2791 rand2790 rand2792\nset str rand2793 y2 attribute is null\nerrnull rand2790 rand2793\narr add rand2786 rand2790\nret rand2786\nret\n~","getTR":"~ mthd::getTR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y2]\n// array: [self.x2,self.y2]\nset obj rand2794 []\n// attribute: self.x2\n// constant: self\nset str rand2797 attributes\nobj get arg0 rand2796 rand2797\nset str rand2797 x2\nobj get rand2796 rand2795 rand2797\nset str rand2798 x2 attribute is null\nerrnull rand2795 rand2798\narr add rand2794 rand2795\n// attribute: self.y2\n// constant: self\nset str rand2801 attributes\nobj get arg0 rand2800 rand2801\nset str rand2801 y2\nobj get rand2800 rand2799 rand2801\nset str rand2802 y2 attribute is null\nerrnull rand2799 rand2802\narr add rand2794 rand2799\nret rand2794\nret\n~","getL":"~ mthd::getL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.getY()]\n// array: [self.x1,self.getY()]\nset obj rand2803 []\n// attribute: self.x1\n// constant: self\nset str rand2806 attributes\nobj get arg0 rand2805 rand2806\nset str rand2806 x1\nobj get rand2805 rand2804 rand2806\nset str rand2807 x1 attribute is null\nerrnull rand2804 rand2807\narr add rand2803 rand2804\n// method: self.getY()\n// constant: self\nset str rand2810 methods\nobj get arg0 rand2809 rand2810\nset str rand2810 getY\nobj get rand2809 rand2809 rand2810\ncallgetvar rand2808 rand2809 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand2803 rand2808\nret rand2803\nret\n~","getM":"~ mthd::getM:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.getY()]\n// array: [self.getX(),self.getY()]\nset obj rand2811 []\n// method: self.getX()\n// constant: self\nset str rand2814 methods\nobj get arg0 rand2813 rand2814\nset str rand2814 getX\nobj get rand2813 rand2813 rand2814\ncallgetvar rand2812 rand2813 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand2811 rand2812\n// method: self.getY()\n// constant: self\nset str rand2817 methods\nobj get arg0 rand2816 rand2817\nset str rand2817 getY\nobj get rand2816 rand2816 rand2817\ncallgetvar rand2815 rand2816 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand2811 rand2815\nret rand2811\nret\n~","getR":"~ mthd::getR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.getY()]\n// array: [self.x2,self.getY()]\nset obj rand2818 []\n// attribute: self.x2\n// constant: self\nset str rand2821 attributes\nobj get arg0 rand2820 rand2821\nset str rand2821 x2\nobj get rand2820 rand2819 rand2821\nset str rand2822 x2 attribute is null\nerrnull rand2819 rand2822\narr add rand2818 rand2819\n// method: self.getY()\n// constant: self\nset str rand2825 methods\nobj get arg0 rand2824 rand2825\nset str rand2825 getY\nobj get rand2824 rand2824 rand2825\ncallgetvar rand2823 rand2824 mthd::getY:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand2818 rand2823\nret rand2818\nret\n~","getBL":"~ mthd::getBL:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x1,self.y1]\n// array: [self.x1,self.y1]\nset obj rand2826 []\n// attribute: self.x1\n// constant: self\nset str rand2829 attributes\nobj get arg0 rand2828 rand2829\nset str rand2829 x1\nobj get rand2828 rand2827 rand2829\nset str rand2830 x1 attribute is null\nerrnull rand2827 rand2830\narr add rand2826 rand2827\n// attribute: self.y1\n// constant: self\nset str rand2833 attributes\nobj get arg0 rand2832 rand2833\nset str rand2833 y1\nobj get rand2832 rand2831 rand2833\nset str rand2834 y1 attribute is null\nerrnull rand2831 rand2834\narr add rand2826 rand2831\nret rand2826\nret\n~","getB":"~ mthd::getB:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.getX(),self.y1]\n// array: [self.getX(),self.y1]\nset obj rand2835 []\n// method: self.getX()\n// constant: self\nset str rand2838 methods\nobj get arg0 rand2837 rand2838\nset str rand2838 getX\nobj get rand2837 rand2837 rand2838\ncallgetvar rand2836 rand2837 mthd::getX:1441a7909c087dbbe7ce59881b9df8b9 arg0 \narr add rand2835 rand2836\n// attribute: self.y1\n// constant: self\nset str rand2841 attributes\nobj get arg0 rand2840 rand2841\nset str rand2841 y1\nobj get rand2840 rand2839 rand2841\nset str rand2842 y1 attribute is null\nerrnull rand2839 rand2842\narr add rand2835 rand2839\nret rand2835\nret\n~","getBR":"~ mthd::getBR:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return [self.x2,self.y1]\n// array: [self.x2,self.y1]\nset obj rand2843 []\n// attribute: self.x2\n// constant: self\nset str rand2846 attributes\nobj get arg0 rand2845 rand2846\nset str rand2846 x2\nobj get rand2845 rand2844 rand2846\nset str rand2847 x2 attribute is null\nerrnull rand2844 rand2847\narr add rand2843 rand2844\n// attribute: self.y1\n// constant: self\nset str rand2850 attributes\nobj get arg0 rand2849 rand2850\nset str rand2850 y1\nobj get rand2849 rand2848 rand2850\nset str rand2851 y1 attribute is null\nerrnull rand2848 rand2851\narr add rand2843 rand2848\nret rand2843\nret\n~","toString":"~ mthd::toString:1441a7909c087dbbe7ce59881b9df8b9\n// statement: return \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\" ++ self.x1 ~++ self.y1 + \"to\" + self.x2 ~++ self.y2 ++ \"}\"\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2~++self.y2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"+self.x2\n// operation: \"Frame{\"++self.x1~++self.y1+\"to\"\n// operation: \"Frame{\"++self.x1~++self.y1\n// operation: \"Frame{\"++self.x1\n// string: \"Frame{\"\nset str rand2863 Frame{\n// attribute: self.x1\n// constant: self\nset str rand2866 attributes\nobj get arg0 rand2865 rand2866\nset str rand2866 x1\nobj get rand2865 rand2864 rand2866\nset str rand2867 x1 attribute is null\nerrnull rand2864 rand2867\nadd rand2861 emptystring rand2863 rand2864\n// attribute: self.y1\n// constant: self\nset str rand2869 attributes\nobj get arg0 rand2868 rand2869\nset str rand2869 y1\nobj get rand2868 rand2862 rand2869\nset str rand2870 y1 attribute is null\nerrnull rand2862 rand2870\nadd rand2859 emptystring rand2861 comma rand2862\n// string: \"to\"\nset str rand2860 to\nadd rand2857 emptystring rand2859 space rand2860\n// attribute: self.x2\n// constant: self\nset str rand2872 attributes\nobj get arg0 rand2871 rand2872\nset str rand2872 x2\nobj get rand2871 rand2858 rand2872\nset str rand2873 x2 attribute is null\nerrnull rand2858 rand2873\nadd rand2855 emptystring rand2857 space rand2858\n// attribute: self.y2\n// constant: self\nset str rand2875 attributes\nobj get arg0 rand2874 rand2875\nset str rand2875 y2\nobj get rand2874 rand2856 rand2875\nset str rand2876 y2 attribute is null\nerrnull rand2856 rand2876\nadd rand2853 emptystring rand2855 comma rand2856\n// string: \"}\"\nset str rand2854 }\nadd rand2852 emptystring rand2853 rand2854\nret rand2852\nret\n~"},"attributes":{}}
set str rand2724 methods
obj get rand2718 rand2723 rand2724
set str rand2724 .cns
obj get rand2723 rand2723 rand2724
callvar rand2723 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2718 rand2719 rand2720 rand2721 rand2722
set obj rand2716 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.frame = frame;\\nself.surface = new Surface(\"pen\", self!.frame);\n// assignment: self.frame = frame\n// constant: self\n// attribute: self.frame\n// constant: self\nset str rand2882 attributes\nobj get arg0 rand2881 rand2882\nset str rand2882 frame\nobj get rand2881 rand2880 rand2882\n// argument: frame\ndupe rand2880 arg1\nobj set rand2881 rand2882 rand2880\n// assignment: self.surface = new Surface(\"pen\", self!.frame)\n// constant: self\n// attribute: self.surface\n// constant: self\nset str rand2886 attributes\nobj get arg0 rand2885 rand2886\nset str rand2886 surface\nobj get rand2885 rand2884 rand2886\n// instance: new Surface(\"pen\", self!.frame)\n// string: \"pen\"\nset str rand2887 pen\n// attribute: self!.frame\n// constant: self\nset str rand2890 attributes\nobj get arg0 rand2889 rand2890\nset str rand2890 frame\nobj get rand2889 rand2888 rand2890\nset obj rand2884 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.type = type;\\\\nself.frame = frame;\\n// assignment: self.type = type\\n// constant: self\\n// attribute: self.type\\n// constant: self\\nset str rand2897 attributes\\nobj get arg0 rand2896 rand2897\\nset str rand2897 type\\nobj get rand2896 rand2895 rand2897\\n// argument: type\\ndupe rand2895 arg1\\nobj set rand2896 rand2897 rand2895\\n// assignment: self.frame = frame\\n// constant: self\\n// attribute: self.frame\\n// constant: self\\nset str rand2900 attributes\\nobj get arg0 rand2899 rand2900\\nset str rand2900 frame\\nobj get rand2899 rand2898 rand2900\\n// argument: frame\\ndupe rand2898 arg2\\nobj set rand2899 rand2900 rand2898\\nret\\n~\",\"clear\":\"~ mthd::clear:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen clear\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use clear method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen clear\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand2905 attributes\\nobj get arg0 rand2904 rand2905\\nset str rand2905 type\\nobj get rand2904 rand2902 rand2905\\nset str rand2906 type attribute is null\\nerrnull rand2902 rand2906\\n// string: \\\"pen\\\"\\nset str rand2903 pen\\neql rand2901 rand2902 rand2903\\njn rand2907 rand2901\\n// segment: raw(\\\"pen clear\\\");\\\\nreturn;\\n// execution: raw(\\\"pen clear\\\")\\npen clear\\n// statement: return\\nret\\n: rand2907\\n// execution: io:throw(\\\"cannot use clear method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use clear method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use clear method on\\\"+self.type\\n// string: \\\"cannot use clear method on\\\"\\nset str rand2912 cannot use clear method on\\n// attribute: self.type\\n// constant: self\\nset str rand2915 attributes\\nobj get arg0 rand2914 rand2915\\nset str rand2915 type\\nobj get rand2914 rand2913 rand2915\\nset str rand2916 type attribute is null\\nerrnull rand2913 rand2916\\nadd rand2910 emptystring rand2912 space rand2913\\n// string: \\\"surface\\\"\\nset str rand2911 surface\\nadd rand2909 emptystring rand2910 space rand2911\\ncall io:throw rand2909\\nret\\n~\",\"line\":\"~ mthd::line:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use line method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand2926 attributes\\nobj get arg0 rand2925 rand2926\\nset str rand2926 type\\nobj get rand2925 rand2923 rand2926\\nset str rand2927 type attribute is null\\nerrnull rand2923 rand2927\\n// string: \\\"pen\\\"\\nset str rand2924 pen\\neql rand2922 rand2923 rand2924\\njn rand2928 rand2922\\n// segment: raw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\");\\\\nreturn;\\n// execution: raw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\")\\ndrawCursor goto arg1 arg2\\npen size arg5\\npen down\\ndrawCursor goto arg3 arg4\\npen up\\n// statement: return\\nret\\n: rand2928\\n// execution: io:throw(\\\"cannot use line method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use line method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use line method on\\\"+self.type\\n// string: \\\"cannot use line method on\\\"\\nset str rand2933 cannot use line method on\\n// attribute: self.type\\n// constant: self\\nset str rand2936 attributes\\nobj get arg0 rand2935 rand2936\\nset str rand2936 type\\nobj get rand2935 rand2934 rand2936\\nset str rand2937 type attribute is null\\nerrnull rand2934 rand2937\\nadd rand2931 emptystring rand2933 space rand2934\\n// string: \\\"surface\\\"\\nset str rand2932 surface\\nadd rand2930 emptystring rand2931 space rand2932\\ncall io:throw rand2930\\nret\\n~\",\"path\":\"~ mthd::path:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: num len = points.length;\\\\nif (!loop) {\\\\nlen -= 1;\\\\n}\\\\nfor (i, len) {\\\\nArr<num:2> point = points[i];\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\n}\\n// assignment: num len = points.length\\n// attribute: points.length\\n// argument: points\\nlen rand2941 arg1\\n// arg_branch: if (!loop) {\\\\nlen -= 1;\\\\n}\\n// operation: !loop\\n// argument: loop\\ninv rand2942 arg3\\njn rand2943 rand2942\\n// segment: len -= 1;\\n// assignment: len -= 1\\n// number: 1\\nset num rand2945 1\\nsub rand2941 rand2941 rand2945\\n: rand2943\\n// arg_branch: for (i, len) {\\\\nArr<num:2> point = points[i];\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\n}\\n// variable: i\\nset num rand2948 1\\nset num rand2949 0\\n// variable: len\\n: rand2946\\nsml rand2950 rand2949 rand2941\\njn rand2947 rand2950\\n// segment: Arr<num:2> point = points[i];\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\n// assignment: Arr<num:2> point = points[i]\\n// key: points[i]\\n// variable: i\\n// argument: points\\nobj get arg1 rand2951 rand2949\\nset str rand2952  doesnt exist on points\\nadd rand2952 rand2949 rand2952\\nernull rand2951 rand2952\\n// assignment: Arr<num:2> npoint = points[i + 1 % points.length]\\n// key: points[i + 1 % points.length]\\n// operation: i + 1 % points.length\\n// operation: i+1\\n// variable: i\\n// number: 1\\nset num rand2957 1\\nadd rand2955 rand2949 rand2957\\n// attribute: points.length\\n// argument: points\\nlen rand2956 arg1\\nmod rand2954 rand2955 rand2956\\n// argument: points\\nobj get arg1 rand2953 rand2954\\nset str rand2958  doesnt exist on points\\nadd rand2958 rand2954 rand2958\\nernull rand2953 rand2958\\n// method: self.line(point[0], point[1], npoint[0], npoint[1], w)\\n// constant: self\\n// key: point[0]\\n// number: 0\\nset num rand2962 0\\n// variable: point\\nobj get rand2951 rand2961 rand2962\\nset str rand2963  doesnt exist on point\\nadd rand2963 rand2962 rand2963\\nernull rand2961 rand2963\\n// key: point[1]\\n// number: 1\\nset num rand2965 1\\n// variable: point\\nobj get rand2951 rand2964 rand2965\\nset str rand2966  doesnt exist on point\\nadd rand2966 rand2965 rand2966\\nernull rand2964 rand2966\\n// key: npoint[0]\\n// number: 0\\nset num rand2968 0\\n// variable: npoint\\nobj get rand2953 rand2967 rand2968\\nset str rand2969  doesnt exist on npoint\\nadd rand2969 rand2968 rand2969\\nernull rand2967 rand2969\\n// key: npoint[1]\\n// number: 1\\nset num rand2971 1\\n// variable: npoint\\nobj get rand2953 rand2970 rand2971\\nset str rand2972  doesnt exist on npoint\\nadd rand2972 rand2971 rand2972\\nernull rand2970 rand2972\\n// argument: w\\nset str rand2960 methods\\nobj get arg0 rand2959 rand2960\\nset str rand2960 line\\nobj get rand2959 rand2959 rand2960\\ncallvar rand2959 mthd::line:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand2961 rand2964 rand2967 rand2970 arg2\\njai rand2946 rand2949\\n: rand2947\\nret\\n~\",\"tri\":\"~ mthd::tri:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use tri method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand2984 attributes\\nobj get arg0 rand2983 rand2984\\nset str rand2984 type\\nobj get rand2983 rand2981 rand2984\\nset str rand2985 type attribute is null\\nerrnull rand2981 rand2985\\n// string: \\\"pen\\\"\\nset str rand2982 pen\\neql rand2980 rand2981 rand2982\\njn rand2986 rand2980\\n// segment: raw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\");\\\\nreturn;\\n// execution: raw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\")\\npen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\n// statement: return\\nret\\n: rand2986\\n// execution: io:throw(\\\"cannot use tri method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use tri method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use tri method on\\\"+self.type\\n// string: \\\"cannot use tri method on\\\"\\nset str rand2991 cannot use tri method on\\n// attribute: self.type\\n// constant: self\\nset str rand2994 attributes\\nobj get arg0 rand2993 rand2994\\nset str rand2994 type\\nobj get rand2993 rand2992 rand2994\\nset str rand2995 type attribute is null\\nerrnull rand2992 rand2995\\nadd rand2989 emptystring rand2991 space rand2992\\n// string: \\\"surface\\\"\\nset str rand2990 surface\\nadd rand2988 emptystring rand2989 space rand2990\\ncall io:throw rand2988\\nret\\n~\",\"quad\":\"~ mthd::quad:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.tri(x1,y1, x2,y2, x3,y3, border);\\\\nself.tri(x2,y2, x3,y3, x4,y4, border);\\n// method: self.tri(x1,y1, x2,y2, x3,y3, border)\\n// constant: self\\n// argument: x1\\n// argument: y1\\n// argument: x2\\n// argument: y2\\n// argument: x3\\n// argument: y3\\n// argument: border\\nset str rand3006 methods\\nobj get arg0 rand3005 rand3006\\nset str rand3006 tri\\nobj get rand3005 rand3005 rand3006\\ncallvar rand3005 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg9\\n// method: self.tri(x2,y2, x3,y3, x4,y4, border)\\n// constant: self\\n// argument: x2\\n// argument: y2\\n// argument: x3\\n// argument: y3\\n// argument: x4\\n// argument: y4\\n// argument: border\\nset str rand3008 methods\\nobj get arg0 rand3007 rand3008\\nset str rand3008 tri\\nobj get rand3007 rand3007 rand3008\\ncallvar rand3007 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg3 arg4 arg5 arg6 arg7 arg8 arg9\\nret\\n~\",\"rect\":\"~ mthd::rect:1441a7909c087dbbe7ce59881b9df8b9\\n// method: self.quad(\\\\nx1, y1,\\\\nx1, y2,\\\\nx2, y1,\\\\nx2, y2,\\\\nborder\\\\n)\\n// constant: self\\n// argument: x1\\n// argument: y1\\n// argument: x1\\n// argument: y2\\n// argument: x2\\n// argument: y1\\n// argument: x2\\n// argument: y2\\n// argument: border\\nset str rand3015 methods\\nobj get arg0 rand3014 rand3015\\nset str rand3015 quad\\nobj get rand3014 rand3014 rand3015\\ncallvar rand3014 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg1 arg4 arg3 arg2 arg3 arg4 arg5\\nret\\n~\",\"square\":\"~ mthd::square:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: halfW = w / 2;\\\\nhalfH = h / 2;\\\\nself.quad(\\\\nx - halfW, y - halfH,\\\\nx - halfW, y + halfH,\\\\nx + halfW, y - halfH,\\\\nx + halfW, y + halfH,\\\\nborder\\\\n);\\n// assignment: halfW = w / 2\\n// operation: w/2\\n// argument: w\\n// number: 2\\nset num rand3022 2\\ndiv rand3021 arg3 rand3022\\n// assignment: halfH = h / 2\\n// operation: h/2\\n// argument: h\\n// number: 2\\nset num rand3024 2\\ndiv rand3023 arg4 rand3024\\n// method: self.quad(\\\\nx - halfW, y - halfH,\\\\nx - halfW, y + halfH,\\\\nx + halfW, y - halfH,\\\\nx + halfW, y + halfH,\\\\nborder\\\\n)\\n// constant: self\\n// operation: x - halfW\\n// argument: x\\n// variable: halfW\\nsub rand3027 arg1 rand3021\\n// operation: y - halfH\\n// argument: y\\n// variable: halfH\\nsub rand3028 arg2 rand3023\\n// operation: x - halfW\\n// argument: x\\n// variable: halfW\\nsub rand3029 arg1 rand3021\\n// operation: y + halfH\\n// argument: y\\n// variable: halfH\\nadd rand3030 arg2 rand3023\\n// operation: x + halfW\\n// argument: x\\n// variable: halfW\\nadd rand3031 arg1 rand3021\\n// operation: y - halfH\\n// argument: y\\n// variable: halfH\\nsub rand3032 arg2 rand3023\\n// operation: x + halfW\\n// argument: x\\n// variable: halfW\\nadd rand3033 arg1 rand3021\\n// operation: y + halfH\\n// argument: y\\n// variable: halfH\\nadd rand3034 arg2 rand3023\\n// argument: border\\nset str rand3026 methods\\nobj get arg0 rand3025 rand3026\\nset str rand3026 quad\\nobj get rand3025 rand3025 rand3026\\ncallvar rand3025 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand3027 rand3028 rand3029 rand3030 rand3031 rand3032 rand3033 rand3034 arg5\\nret\\n~\",\"icon\":\"~ mthd::icon:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use icon method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3045 attributes\\nobj get arg0 rand3044 rand3045\\nset str rand3045 type\\nobj get rand3044 rand3042 rand3045\\nset str rand3046 type attribute is null\\nerrnull rand3042 rand3046\\n// string: \\\"pen\\\"\\nset str rand3043 pen\\neql rand3041 rand3042 rand3043\\njn rand3047 rand3041\\n// segment: raw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\n// execution: raw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\")\\npen icn arg1 arg2 arg3 arg4 arg5 arg6\\n// statement: return\\nret\\n: rand3047\\n// execution: io:throw(\\\"cannot use icon method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use icon method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use icon method on\\\"+self.type\\n// string: \\\"cannot use icon method on\\\"\\nset str rand3052 cannot use icon method on\\n// attribute: self.type\\n// constant: self\\nset str rand3055 attributes\\nobj get arg0 rand3054 rand3055\\nset str rand3055 type\\nobj get rand3054 rand3053 rand3055\\nset str rand3056 type attribute is null\\nerrnull rand3053 rand3056\\nadd rand3050 emptystring rand3052 space rand3053\\n// string: \\\"surface\\\"\\nset str rand3051 surface\\nadd rand3049 emptystring rand3050 space rand3051\\ncall io:throw rand3049\\nret\\n~\",\"text\":\"~ mthd::text:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use text method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3067 attributes\\nobj get arg0 rand3066 rand3067\\nset str rand3067 type\\nobj get rand3066 rand3064 rand3067\\nset str rand3068 type attribute is null\\nerrnull rand3064 rand3068\\n// string: \\\"pen\\\"\\nset str rand3065 pen\\neql rand3063 rand3064 rand3065\\njn rand3069 rand3063\\n// segment: raw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\n// execution: raw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\")\\npen text arg1 arg2 arg3 arg4 arg5 arg6\\n// statement: return\\nret\\n: rand3069\\n// execution: io:throw(\\\"cannot use text method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use text method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use text method on\\\"+self.type\\n// string: \\\"cannot use text method on\\\"\\nset str rand3074 cannot use text method on\\n// attribute: self.type\\n// constant: self\\nset str rand3077 attributes\\nobj get arg0 rand3076 rand3077\\nset str rand3077 type\\nobj get rand3076 rand3075 rand3077\\nset str rand3078 type attribute is null\\nerrnull rand3075 rand3078\\nadd rand3072 emptystring rand3074 space rand3075\\n// string: \\\"surface\\\"\\nset str rand3073 surface\\nadd rand3071 emptystring rand3072 space rand3073\\ncall io:throw rand3071\\nret\\n~\",\"loadFontFromUrl\":\"~ mthd::loadFontFromUrl:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfonturl arg1\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use loadFontFromUrl method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfonturl arg1\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3084 attributes\\nobj get arg0 rand3083 rand3084\\nset str rand3084 type\\nobj get rand3083 rand3081 rand3084\\nset str rand3085 type attribute is null\\nerrnull rand3081 rand3085\\n// string: \\\"pen\\\"\\nset str rand3082 pen\\neql rand3080 rand3081 rand3082\\njn rand3086 rand3080\\n// segment: raw(\\\"pen loadfonturl arg1\\\");\\\\nreturn;\\n// execution: raw(\\\"pen loadfonturl arg1\\\")\\npen loadfonturl arg1\\n// statement: return\\nret\\n: rand3086\\n// execution: io:throw(\\\"cannot use loadFontFromUrl method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use loadFontFromUrl method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use loadFontFromUrl method on\\\"+self.type\\n// string: \\\"cannot use loadFontFromUrl method on\\\"\\nset str rand3091 cannot use loadFontFromUrl method on\\n// attribute: self.type\\n// constant: self\\nset str rand3094 attributes\\nobj get arg0 rand3093 rand3094\\nset str rand3094 type\\nobj get rand3093 rand3092 rand3094\\nset str rand3095 type attribute is null\\nerrnull rand3092 rand3095\\nadd rand3089 emptystring rand3091 space rand3092\\n// string: \\\"surface\\\"\\nset str rand3090 surface\\nadd rand3088 emptystring rand3089 space rand3090\\ncall io:throw rand3088\\nret\\n~\",\"loadFontData\":\"~ mthd::loadFontData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfontdata arg1\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use loadFontData method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfontdata arg1\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3101 attributes\\nobj get arg0 rand3100 rand3101\\nset str rand3101 type\\nobj get rand3100 rand3098 rand3101\\nset str rand3102 type attribute is null\\nerrnull rand3098 rand3102\\n// string: \\\"pen\\\"\\nset str rand3099 pen\\neql rand3097 rand3098 rand3099\\njn rand3103 rand3097\\n// segment: raw(\\\"pen loadfontdata arg1\\\");\\\\nreturn;\\n// execution: raw(\\\"pen loadfontdata arg1\\\")\\npen loadfontdata arg1\\n// statement: return\\nret\\n: rand3103\\n// execution: io:throw(\\\"cannot use loadFontData method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use loadFontData method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use loadFontData method on\\\"+self.type\\n// string: \\\"cannot use loadFontData method on\\\"\\nset str rand3108 cannot use loadFontData method on\\n// attribute: self.type\\n// constant: self\\nset str rand3111 attributes\\nobj get arg0 rand3110 rand3111\\nset str rand3111 type\\nobj get rand3110 rand3109 rand3111\\nset str rand3112 type attribute is null\\nerrnull rand3109 rand3112\\nadd rand3106 emptystring rand3108 space rand3109\\n// string: \\\"surface\\\"\\nset str rand3107 surface\\nadd rand3105 emptystring rand3106 space rand3107\\ncall io:throw rand3105\\nret\\n~\",\"setColor\":\"~ mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen color arg1\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use setColor method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen color arg1\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3118 attributes\\nobj get arg0 rand3117 rand3118\\nset str rand3118 type\\nobj get rand3117 rand3115 rand3118\\nset str rand3119 type attribute is null\\nerrnull rand3115 rand3119\\n// string: \\\"pen\\\"\\nset str rand3116 pen\\neql rand3114 rand3115 rand3116\\njn rand3120 rand3114\\n// segment: raw(\\\"pen color arg1\\\");\\\\nreturn;\\n// execution: raw(\\\"pen color arg1\\\")\\npen color arg1\\n// statement: return\\nret\\n: rand3120\\n// execution: io:throw(\\\"cannot use setColor method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use setColor method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use setColor method on\\\"+self.type\\n// string: \\\"cannot use setColor method on\\\"\\nset str rand3125 cannot use setColor method on\\n// attribute: self.type\\n// constant: self\\nset str rand3128 attributes\\nobj get arg0 rand3127 rand3128\\nset str rand3128 type\\nobj get rand3127 rand3126 rand3128\\nset str rand3129 type attribute is null\\nerrnull rand3126 rand3129\\nadd rand3123 emptystring rand3125 space rand3126\\n// string: \\\"surface\\\"\\nset str rand3124 surface\\nadd rand3122 emptystring rand3123 space rand3124\\ncall io:throw rand3122\\nret\\n~\"},\"attributes\":{}}\nset str rand2892 methods\nobj get rand2884 rand2891 rand2892\nset str rand2892 .cns\nobj get rand2891 rand2891 rand2892\ncallvar rand2891 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2884 rand2887 rand2888\nobj set rand2885 rand2886 rand2884\nret\n~"},"attributes":{"title":"Window"}}
set str rand3130 attributes
obj get rand2716 rand3131 rand3130
// array: [\nnew WindowButton(new Icon())\n]
set obj rand3132 []
// instance: new WindowButton(new Icon())
// instance: new Icon()
set obj rand3134 {"methods":{"draw":"~ mthd::draw:1441a7909c087dbbe7ce59881b9df8b9\n// arg_branch: if (self.kind == \"icn\") {\\nsurface.icon(self.data, size, x, y);\\n}\n// comparison: self.kind == \"icn\"\n// attribute: self.kind\n// constant: self\nset str rand3145 attributes\nobj get arg0 rand3144 rand3145\nset str rand3145 kind\nobj get rand3144 rand3142 rand3145\n// string: \"icn\"\nset str rand3143 icn\neql rand3141 rand3142 rand3143\njn rand3146 rand3141\n// segment: surface.icon(self.data, size, x, y);\n// method: surface.icon(self.data, size, x, y)\n// argument: surface\n// attribute: self.data\n// constant: self\nset str rand3152 attributes\nobj get arg0 rand3151 rand3152\nset str rand3152 data\nobj get rand3151 rand3150 rand3152\n// argument: size\n// argument: x\n// argument: y\n// number: 90\nset num rand3153 90\n// number: 0\nset num rand3154 0\nset str rand3149 methods\nobj get arg1 rand3148 rand3149\nset str rand3149 icon\nobj get rand3148 rand3148 rand3149\ncallvar rand3148 mthd::icon:1441a7909c087dbbe7ce59881b9df8b9 arg1 rand3150 arg4 arg2 arg3 rand3153 rand3154\n: rand3146\nret\n~"},"attributes":{"kind":"icn","data":""}}
set obj rand3133 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.icon = icon;\n// assignment: self.icon = icon\n// constant: self\n// attribute: self.icon\n// constant: self\nset str rand3160 attributes\nobj get arg0 rand3159 rand3160\nset str rand3160 icon\nobj get rand3159 rand3158 rand3160\n// argument: icon\ndupe rand3158 arg1\nobj set rand3159 rand3160 rand3158\nret\n~","update":"~ mthd::update:1441a7909c087dbbe7ce59881b9df8b9\n// segment: num hSize = size / 2;\\nbool hovered = utils:inBox(input:getMouseX(), input:getMouseY(), x - hSize, y - hSize, x + hSize, y + hSize);\\nsurface.setColor(hovered ? theme.tertiary : theme.secondary);\\nsurface.square(x, y, size, size, 10);\\nif (self?.icon) {\\nself.icon.draw(surface, x, y, size);\\n}\n// assignment: num hSize = size / 2\n// operation: size/2\n// argument: size\n// number: 2\nset num rand3168 2\ndiv rand3167 arg3 rand3168\n// assignment: bool hovered = utils:inBox(input:getMouseX(), input:getMouseY(), x - hSize, y - hSize, x + hSize, y + hSize)\n// execution: utils:inBox(input:getMouseX(), input:getMouseY(), x - hSize, y - hSize, x + hSize, y + hSize)\n// execution: input:getMouseX()\ncallget rand3170 input:getMouseX \n// execution: input:getMouseY()\ncallget rand3171 input:getMouseY \n// operation: x - hSize\n// argument: x\n// variable: hSize\nsub rand3172 arg1 rand3167\n// operation: y - hSize\n// argument: y\n// variable: hSize\nsub rand3173 arg2 rand3167\n// operation: x + hSize\n// argument: x\n// variable: hSize\nadd rand3174 arg1 rand3167\n// operation: y + hSize\n// argument: y\n// variable: hSize\nadd rand3175 arg2 rand3167\ncallget rand3169 utils:inBox rand3170 rand3171 rand3172 rand3173 rand3174 rand3175\n// method: surface.setColor(hovered ? theme.tertiary : theme.secondary)\n// argument: surface\n// ternary: hovered ? theme.tertiary : theme.secondary\n// variable: hovered\njn rand3179 rand3169\n// attribute: theme.tertiary\n// argument: theme\nset str rand3183 attributes\nobj get arg4 rand3182 rand3183\nset str rand3183 tertiary\nobj get rand3182 rand3178 rand3183\njp rand3180\n: rand3179\n// attribute: theme.secondary\n// argument: theme\nset str rand3186 attributes\nobj get arg4 rand3185 rand3186\nset str rand3186 secondary\nobj get rand3185 rand3178 rand3186\n: rand3180\nset str rand3177 methods\nobj get arg6 rand3176 rand3177\nset str rand3177 setColor\nobj get rand3176 rand3176 rand3177\ncallvar rand3176 mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9 arg6 rand3178\n// method: surface.square(x, y, size, size, 10)\n// argument: surface\n// argument: x\n// argument: y\n// argument: size\n// argument: size\n// number: 10\nset num rand3189 10\nset str rand3188 methods\nobj get arg6 rand3187 rand3188\nset str rand3188 square\nobj get rand3187 rand3187 rand3188\ncallvar rand3187 mthd::square:1441a7909c087dbbe7ce59881b9df8b9 arg6 arg1 arg2 arg3 arg3 rand3189\n// arg_branch: if (self?.icon) {\\nself.icon.draw(surface, x, y, size);\\n}\n// attribute_check: self?.icon\n// attribute: self.icon\n// constant: self\nset str rand3193 attributes\nobj get arg0 rand3192 rand3193\nset str rand3193 icon\nobj get rand3192 rand3191 rand3193\nisnull rand3190 rand3191\ninv rand3190 rand3190\njn rand3194 rand3190\n// segment: self.icon.draw(surface, x, y, size);\n// method: self.icon.draw(surface, x, y, size)\n// attribute: self.icon\n// constant: self\nset str rand3198 attributes\nobj get arg0 rand3197 rand3198\nset str rand3198 icon\nobj get rand3197 rand3196 rand3198\nset str rand3199 icon attribute is null\nerrnull rand3196 rand3199\n// argument: surface\n// argument: x\n// argument: y\n// argument: size\nset str rand3201 methods\nobj get rand3196 rand3200 rand3201\nset str rand3201 draw\nobj get rand3200 rand3200 rand3201\ncallvar rand3200 mthd::draw:1441a7909c087dbbe7ce59881b9df8b9 rand3196 arg6 arg1 arg2 arg3\n: rand3194\nret\n~"},"attributes":{}}
set str rand3156 methods
obj get rand3133 rand3155 rand3156
set str rand3156 .cns
obj get rand3155 rand3155 rand3156
callvar rand3155 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3133 rand3134
arr add rand3132 rand3133
set str rand3202 buttons
obj set rand3131 rand3202 rand3132
// instance: new WindowRenderSettings()
set obj rand3203 {"methods":{},"attributes":{}}
set str rand3206 attributes
obj get rand3203 rand3207 rand3206
// constant: true
set bool rand3208 true
set str rand3209 renderBase
obj set rand3207 rand3209 rand3208
// constant: true
set bool rand3210 true
set str rand3211 renderMenuBar
obj set rand3207 rand3211 rand3210
set str rand3212 renderSettings
obj set rand3131 rand3212 rand3203
set str rand2878 methods
obj get rand2716 rand2877 rand2878
set str rand2878 .cns
obj get rand2877 rand2877 rand2878
callvar rand2877 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand2716 rand2718
set str rand2717 myID
obj set rand2715 rand2717 rand2716
set str rand3213 windows
obj set rand2712 rand3213 rand2715
set str rand3214 WM:WindowManagerContext
settype rand2632 rand3214
set type rand3215 WM:WindowManagerContext
callget rand2630 globals:setGlobal rand3215 rand2631 rand2632
istypeg rand3216 rand2630 rand3215
ji rand3219 rand3216
set str rand3217 generic function returned 
set str rand3218  not the specified type 
add rand3217 rand3217 .typechecktype rand3218
add rand3217 rand3217 rand3215
err rand3217
: rand3219
// method: ctx.addProvider("normal", new WindowManagerProvider("sys/wms/normal.fbl"))
// variable: ctx
// string: "normal"
set str rand3222 normal
// instance: new WindowManagerProvider("sys/wms/normal.fbl")
// string: "sys/wms/normal.fbl"
set str rand3224 sys/wms/normal.fbl
set obj rand3223 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.path = path;\n// assignment: self.path = path\n// constant: self\n// attribute: self.path\n// constant: self\nset str rand3230 attributes\nobj get arg0 rand3229 rand3230\nset str rand3230 path\nobj get rand3229 rand3228 rand3230\n// argument: path\ndupe rand3228 arg1\nobj set rand3229 rand3230 rand3228\nret\n~","init":"~ mthd::init:1441a7909c087dbbe7ce59881b9df8b9\n// segment: FileHandle handle = fs:open(self.path);\\n\\nCloneData data = new CloneData();\\ndata.set<State>(\"arg0\", state);\\ndata.set<GraphicsState>(\"arg1\", graphicsState);\\ndata.set<Obj<Window>>(\"arg2\", windows);\\nself.proc = new Process(handle.readText(), data);\n// assignment: FileHandle handle = fs:open(self.path)\n// execution: fs:open(self.path)\n// attribute: self.path\n// constant: self\nset str rand3237 attributes\nobj get arg0 rand3236 rand3237\nset str rand3237 path\nobj get rand3236 rand3235 rand3237\nset str rand3238 path attribute is null\nerrnull rand3235 rand3238\ncallget rand3234 fs:open rand3235\n// assignment: CloneData data = new CloneData()\n// instance: new CloneData()\nset obj rand3239 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data = {};\\n// assignment: self.data = {}\\n// constant: self\\n// attribute: self.data\\n// constant: self\\nset str rand3245 attributes\\nobj get arg0 rand3244 rand3245\\nset str rand3245 data\\nobj get rand3244 rand3243 rand3245\\n// object: {}\\nset obj rand3243 {}\\nobj set rand3244 rand3245 rand3243\\nret\\n~\",\"getData\":\"~ mthd::getData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self!.data;\\n// statement: return self!.data\\n// attribute: self!.data\\n// constant: self\\nset str rand3248 attributes\\nobj get arg0 rand3247 rand3248\\nset str rand3248 data\\nobj get rand3247 rand3246 rand3248\\nret rand3246\\nret\\n~\",\"set\":\"~ mthd::set:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.data[key] = data;\\\\nreturn data;\\n// assignment: self.data[key] = data\\n// attribute: self.data\\n// constant: self\\nset str rand3254 attributes\\nobj get arg0 rand3253 rand3254\\nset str rand3254 data\\nobj get rand3253 rand3252 rand3254\\nset str rand3255 data attribute is null\\nerrnull rand3252 rand3255\\n// argument: key\\n// argument: data\\nobj set rand3252 arg1 arg2\\n// statement: return data\\n// argument: data\\nset str rand3256 .generic\\nsettype arg2 rand3256\\nret arg2\\nret\\n~\",\"get\":\"~ mthd::get:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return self.data[key];\\n// statement: return self.data[key]\\n// key: self.data[key]\\n// argument: key\\n// attribute: self.data\\n// constant: self\\nset str rand3263 attributes\\nobj get arg0 rand3262 rand3263\\nset str rand3263 data\\nobj get rand3262 rand3261 rand3263\\nset str rand3264 data attribute is null\\nerrnull rand3261 rand3264\\nobj get rand3261 rand3260 arg1\\nset str rand3265  doesnt exist on self.data\\nadd rand3265 arg1 rand3265\\nernull rand3260 rand3265\\nset str rand3266 .any\\nsettype rand3260 rand3266\\nret rand3260\\nret\\n~\"},\"attributes\":{}}\nset str rand3241 methods\nobj get rand3239 rand3240 rand3241\nset str rand3241 .cns\nobj get rand3240 rand3240 rand3241\ncallvar rand3240 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3239 \n// typed_method: data.set<State>(\"arg0\", state)\n// string: \"arg0\"\nset str rand3269 arg0\n// argument: state\nset str rand3268 methods\nobj get rand3239 rand3267 rand3268\nset str rand3268 set\nobj get rand3267 rand3267 rand3268\ncallvar rand3267 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand3239 rand3269 arg1\n// typed_method: data.set<GraphicsState>(\"arg1\", graphicsState)\n// string: \"arg1\"\nset str rand3272 arg1\n// argument: graphicsState\nset str rand3271 methods\nobj get rand3239 rand3270 rand3271\nset str rand3271 set\nobj get rand3270 rand3270 rand3271\ncallvar rand3270 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand3239 rand3272 arg2\n// typed_method: data.set<Obj<Window>>(\"arg2\", windows)\n// string: \"arg2\"\nset str rand3275 arg2\n// argument: windows\nset str rand3274 methods\nobj get rand3239 rand3273 rand3274\nset str rand3274 set\nobj get rand3273 rand3273 rand3274\ncallvar rand3273 mthd::set:1441a7909c087dbbe7ce59881b9df8b9 rand3239 rand3275 arg3\n// assignment: self.proc = new Process(handle.readText(), data)\n// constant: self\n// attribute: self.proc\n// constant: self\nset str rand3279 attributes\nobj get arg0 rand3278 rand3279\nset str rand3279 proc\nobj get rand3278 rand3277 rand3279\n// instance: new Process(handle.readText(), data)\n// method: handle.readText()\n// variable: handle\nset str rand3282 methods\nobj get rand3234 rand3281 rand3282\nset str rand3282 readText\nobj get rand3281 rand3281 rand3282\ncallgetvar rand3280 rand3281 mthd::readText:1441a7909c087dbbe7ce59881b9df8b9 rand3234 \n// variable: data\nset obj rand3277 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.clone = new Clone(\\\"fbl\\\", code, data);\\n// assignment: self.clone = new Clone(\\\"fbl\\\", code, data)\\n// constant: self\\n// attribute: self.clone\\n// constant: self\\nset str rand3290 attributes\\nobj get arg0 rand3289 rand3290\\nset str rand3290 clone\\nobj get rand3289 rand3288 rand3290\\n// instance: new Clone(\\\"fbl\\\", code, data)\\n// string: \\\"fbl\\\"\\nset str rand3291 fbl\\n// argument: code\\n// argument: data\\nset obj rand3288 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.id = _createClone(type,code,data.getData());\\\\n// assignment: self.id = _createClone(type,code,data.getData())\\\\n// constant: self\\\\n// attribute: self.id\\\\n// constant: self\\\\nset str rand3300 attributes\\\\nobj get arg0 rand3299 rand3300\\\\nset str rand3300 id\\\\nobj get rand3299 rand3298 rand3300\\\\n// execution: _createClone(type,code,data.getData())\\\\n// argument: type\\\\n// argument: code\\\\n// method: data.getData()\\\\n// argument: data\\\\nset str rand3303 methods\\\\nobj get arg3 rand3302 rand3303\\\\nset str rand3303 getData\\\\nobj get rand3302 rand3302 rand3303\\\\ncallgetvar rand3301 rand3302 mthd::getData:1441a7909c087dbbe7ce59881b9df8b9 arg3 \\\\ncallget rand3298 clone:_createClone arg1 arg2 rand3301\\\\nobj set rand3299 rand3300 rand3298\\\\nret\\\\n~\\\",\\\"kill\\\":\\\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: _killClone(self!.id);\\\\n// execution: _killClone(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand3306 attributes\\\\nobj get arg0 rand3305 rand3306\\\\nset str rand3306 id\\\\nobj get rand3305 rand3304 rand3306\\\\ncall clone:_killClone rand3304\\\\nret\\\\n~\\\",\\\"continue\\\":\\\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: d = getCloneData<Obj<any>>(self!.id);\\\\\\\\nif (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// assignment: d = getCloneData<Obj<any>>(self!.id)\\\\n// typed_execution: getCloneData<Obj<any>>(self!.id)\\\\n// attribute: self!.id\\\\n// constant: self\\\\nset str rand3310 attributes\\\\nobj get arg0 rand3309 rand3310\\\\nset str rand3310 id\\\\nobj get rand3309 rand3308 rand3310\\\\nset type rand3311 Obj<.any>\\\\ncallget rand3307 clone:getCloneData rand3311 rand3308\\\\nistypeg rand3312 rand3307 rand3311\\\\nji rand3315 rand3312\\\\nset str rand3313 generic function returned \\\\nset str rand3314  not the specified type \\\\nadd rand3313 rand3313 .typechecktype rand3314\\\\nadd rand3313 rand3313 rand3311\\\\nerr rand3313\\\\n: rand3315\\\\n// arg_branch: if (d) {\\\\\\\\nd[\\\\\\\"continue\\\\\\\"] = true;\\\\\\\\n}\\\\n// variable: d\\\\njn rand3316 rand3307\\\\n// segment: d[\\\\\\\"continue\\\\\\\"] = true;\\\\n// assignment: d[\\\\\\\"continue\\\\\\\"] = true\\\\n// variable: d\\\\n// string: \\\\\\\"continue\\\\\\\"\\\\nset str rand3318 continue\\\\n// constant: true\\\\nset bool rand3319 true\\\\nobj set rand3307 rand3318 rand3319\\\\n: rand3316\\\\nret\\\\n~\\\",\\\"getCloneData\\\":\\\"~ mthd::getCloneData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: return getCloneData<t>(id);\\\\n// statement: return getCloneData<t>(id)\\\\n// typed_execution: getCloneData<t>(id)\\\\n// argument: id\\\\nset type rand3323 .generic\\\\ncallget rand3322 clone:getCloneData rand3323 arg1\\\\nistypeg rand3324 rand3322 rand3323\\\\nji rand3327 rand3324\\\\nset str rand3325 generic function returned \\\\nset str rand3326  not the specified type \\\\nadd rand3325 rand3325 .typechecktype rand3326\\\\nadd rand3325 rand3325 rand3323\\\\nerr rand3325\\\\n: rand3327\\\\nset str rand3328 .generic\\\\nsettype rand3322 rand3328\\\\nret rand3322\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand3293 methods\\nobj get rand3288 rand3292 rand3293\\nset str rand3293 .cns\\nobj get rand3292 rand3292 rand3293\\ncallvar rand3292 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3288 rand3291 arg1 arg2\\nobj set rand3289 rand3290 rand3288\\nret\\n~\",\"kill\":\"~ mthd::kill:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.active = false;\\\\nself!.clone.kill();\\n// assignment: self.active = false\\n// constant: self\\n// attribute: self.active\\n// constant: self\\nset str rand3332 attributes\\nobj get arg0 rand3331 rand3332\\nset str rand3332 active\\nobj get rand3331 rand3330 rand3332\\n// constant: false\\nset bool rand3330 false\\nobj set rand3331 rand3332 rand3330\\n// method: self!.clone.kill()\\n// attribute: self!.clone\\n// constant: self\\nset str rand3335 attributes\\nobj get arg0 rand3334 rand3335\\nset str rand3335 clone\\nobj get rand3334 rand3333 rand3335\\nset str rand3337 methods\\nobj get rand3333 rand3336 rand3337\\nset str rand3337 kill\\nobj get rand3336 rand3336 rand3337\\ncallvar rand3336 mthd::kill:1441a7909c087dbbe7ce59881b9df8b9 rand3333 \\nret\\n~\",\"continue\":\"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self!.clone.continue();\\n// method: self!.clone.continue()\\n// attribute: self!.clone\\n// constant: self\\nset str rand3340 attributes\\nobj get arg0 rand3339 rand3340\\nset str rand3340 clone\\nobj get rand3339 rand3338 rand3340\\nset str rand3342 methods\\nobj get rand3338 rand3341 rand3342\\nset str rand3342 continue\\nobj get rand3341 rand3341 rand3342\\ncallvar rand3341 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand3338 \\nret\\n~\",\"getAlive\":\"~ mthd::getAlive:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return raw(\\\"clone alive .target\\\", self.clone.id);\\n// statement: return raw(\\\"clone alive .target\\\", self.clone.id)\\n// execution: raw(\\\"clone alive .target\\\", self.clone.id)\\n// attribute: self.clone.id\\n// attribute: self.clone\\n// constant: self\\nset str rand3348 attributes\\nobj get arg0 rand3347 rand3348\\nset str rand3348 clone\\nobj get rand3347 rand3345 rand3348\\nset str rand3349 clone attribute is null\\nerrnull rand3345 rand3349\\nset str rand3350 attributes\\nobj get rand3345 rand3346 rand3350\\nset str rand3350 id\\nobj get rand3346 rand3344 rand3350\\nset str rand3351 id attribute is null\\nerrnull rand3344 rand3351\\nclone alive rand3343 rand3344\\nret rand3343\\nret\\n~\",\"getScope\":\"~ mthd::getScope:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: return clone:getCloneData<t>(self!.clone!.id);\\n// statement: return clone:getCloneData<t>(self!.clone!.id)\\n// typed_execution: clone:getCloneData<t>(self!.clone!.id)\\n// attribute: self!.clone!.id\\n// attribute: self!.clone\\n// constant: self\\nset str rand3358 attributes\\nobj get arg0 rand3357 rand3358\\nset str rand3358 clone\\nobj get rand3357 rand3355 rand3358\\nset str rand3359 attributes\\nobj get rand3355 rand3356 rand3359\\nset str rand3359 id\\nobj get rand3356 rand3354 rand3359\\nset type rand3360 .generic\\ncallget rand3353 clone:getCloneData rand3360 rand3354\\nistypeg rand3361 rand3353 rand3360\\nji rand3364 rand3361\\nset str rand3362 generic function returned \\nset str rand3363  not the specified type \\nadd rand3362 rand3362 .typechecktype rand3363\\nadd rand3362 rand3362 rand3360\\nerr rand3362\\n: rand3364\\nset str rand3365 .generic\\nsettype rand3353 rand3365\\nret rand3353\\nret\\n~\"},\"attributes\":{}}\nset str rand3366 attributes\nobj get rand3277 rand3367 rand3366\n// constant: true\nset bool rand3368 true\nset str rand3369 active\nobj set rand3367 rand3369 rand3368\nset str rand3284 methods\nobj get rand3277 rand3283 rand3284\nset str rand3284 .cns\nobj get rand3283 rand3283 rand3284\ncallvar rand3283 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3277 rand3280 rand3239\nobj set rand3278 rand3279 rand3277\nret\n~","continue":"~ mthd::continue:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (self?.proc) {\\nself.proc.continue();\\n} else {\\nio:throw(\"no wm to continue\");\\n}\n// arg_branch: if (self?.proc) {\\nself.proc.continue();\\n}\n// attribute_check: self?.proc\n// attribute: self.proc\n// constant: self\nset str rand3373 attributes\nobj get arg0 rand3372 rand3373\nset str rand3373 proc\nobj get rand3372 rand3371 rand3373\nisnull rand3370 rand3371\ninv rand3370 rand3370\njn rand3374 rand3370\n// segment: self.proc.continue();\n// method: self.proc.continue()\n// attribute: self.proc\n// constant: self\nset str rand3378 attributes\nobj get arg0 rand3377 rand3378\nset str rand3378 proc\nobj get rand3377 rand3376 rand3378\nset str rand3379 proc attribute is null\nerrnull rand3376 rand3379\nset str rand3381 methods\nobj get rand3376 rand3380 rand3381\nset str rand3381 continue\nobj get rand3380 rand3380 rand3381\ncallvar rand3380 mthd::continue:1441a7909c087dbbe7ce59881b9df8b9 rand3376 \n: rand3374\njp rand3383\n: rand3374\n// segment: io:throw(\"no wm to continue\");\n// execution: io:throw(\"no wm to continue\")\n// string: \"no wm to continue\"\nset str rand3384 no wm to continue\ncall io:throw rand3384\n: rand3383\nret\n~"},"attributes":{}}
set str rand3226 methods
obj get rand3223 rand3225 rand3226
set str rand3226 .cns
obj get rand3225 rand3225 rand3226
callvar rand3225 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3223 rand3224
set str rand3221 methods
obj get rand2630 rand3220 rand3221
set str rand3221 addProvider
obj get rand3220 rand3220 rand3221
callvar rand3220 mthd::addProvider:1441a7909c087dbbe7ce59881b9df8b9 rand2630 rand3222 rand3223
// method: ctx.setCurrentProvider("normal")
// variable: ctx
// string: "normal"
set str rand3387 normal
set str rand3386 methods
obj get rand2630 rand3385 rand3386
set str rand3386 setCurrentProvider
obj get rand3385 rand3385 rand3386
callvar rand3385 mthd::setCurrentProvider:1441a7909c087dbbe7ce59881b9df8b9 rand2630 rand3387
// method: ctx.startProvider(state, graphicsState)
// variable: ctx
// argument: state
// argument: graphicsState
set str rand3389 methods
obj get rand2630 rand3388 rand3389
set str rand3389 startProvider
obj get rand3388 rand3388 rand3389
callvar rand3388 mthd::startProvider:1441a7909c087dbbe7ce59881b9df8b9 rand2630 arg0 arg1
// method: graphicsState.drawSurface.loadFontFromUrl(state.config.fontUrl)
// attribute: graphicsState.drawSurface
// argument: graphicsState
set str rand3392 attributes
obj get arg1 rand3391 rand3392
set str rand3392 drawSurface
obj get rand3391 rand3390 rand3392
set str rand3393 drawSurface attribute is null
errnull rand3390 rand3393
// attribute: state.config.fontUrl
// attribute: state.config
// argument: state
set str rand3400 attributes
obj get arg0 rand3399 rand3400
set str rand3400 config
obj get rand3399 rand3397 rand3400
set str rand3401 attributes
obj get rand3397 rand3398 rand3401
set str rand3401 fontUrl
obj get rand3398 rand3396 rand3401
set str rand3395 methods
obj get rand3390 rand3394 rand3395
set str rand3395 loadFontFromUrl
obj get rand3394 rand3394 rand3395
callvar rand3394 mthd::loadFontFromUrl:1441a7909c087dbbe7ce59881b9df8b9 rand3390 rand3396
ret
~
~ WM:update
// segment: WindowManagerContext ctx = globals:getGlobal<WindowManagerContext>("wmContext");\n\nctx.update();
// assignment: WindowManagerContext ctx = globals:getGlobal<WindowManagerContext>("wmContext")
// typed_execution: globals:getGlobal<WindowManagerContext>("wmContext")
// string: "wmContext"
set str rand3406 wmContext
// constant: true
set bool rand3407 true
set type rand3408 WM:WindowManagerContext
callget rand3405 globals:getGlobal rand3408 rand3406 rand3407
istypeg rand3409 rand3405 rand3408
ji rand3412 rand3409
set str rand3410 generic function returned 
set str rand3411  not the specified type 
add rand3410 rand3410 .typechecktype rand3411
add rand3410 rand3410 rand3408
err rand3410
: rand3412
// method: ctx.update()
// variable: ctx
set str rand3414 methods
obj get rand3405 rand3413 rand3414
set str rand3414 update
obj get rand3413 rand3413 rand3414
callvar rand3413 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 rand3405 
ret
~
~ desktop:init
// segment: WM:init(state, graphicsState);
// execution: WM:init(state, graphicsState)
// argument: state
// argument: graphicsState
call WM:init arg0 arg1
ret
~
~ desktop:update
// segment: WM:update(state, graphicsState);
// execution: WM:update(state, graphicsState)
// argument: state
// argument: graphicsState
call WM:update arg0 arg1
ret
~
~ stateManager:initState
// segment: if (state.type == "terminal") {\nterminal:init(state, graphicsState);\n}\nif (state.type == "desktop") {\ndesktop:init(state, graphicsState);\n}
// arg_branch: if (state.type == "terminal") {\nterminal:init(state, graphicsState);\n}
// comparison: state.type == "terminal"
// attribute: state.type
// argument: state
set str rand3430 attributes
obj get arg0 rand3429 rand3430
set str rand3430 type
obj get rand3429 rand3427 rand3430
// string: "terminal"
set str rand3428 terminal
eql rand3426 rand3427 rand3428
jn rand3431 rand3426
// segment: terminal:init(state, graphicsState);
// execution: terminal:init(state, graphicsState)
// argument: state
// argument: graphicsState
call terminal:init arg0 arg1
: rand3431
// arg_branch: if (state.type == "desktop") {\ndesktop:init(state, graphicsState);\n}
// comparison: state.type == "desktop"
// attribute: state.type
// argument: state
set str rand3437 attributes
obj get arg0 rand3436 rand3437
set str rand3437 type
obj get rand3436 rand3434 rand3437
// string: "desktop"
set str rand3435 desktop
eql rand3433 rand3434 rand3435
jn rand3438 rand3433
// segment: desktop:init(state, graphicsState);
// execution: desktop:init(state, graphicsState)
// argument: state
// argument: graphicsState
call desktop:init arg0 arg1
: rand3438
ret
~
~ stateManager:updateState
// segment: state.time.updateFrame();\nif (state.wait > 0) {\nstate.wait --;\n} else {\nif (state.needsInit) {\nstate.needsInit = false;\ninitState(state, graphicsState);\n}\nif (state.type == "terminal") {\nterminal:update(state, graphicsState);\n} else (state.type == "desktop") {\ndesktop:update(state, graphicsState);\n}\n}
// method: state.time.updateFrame()
// attribute: state.time
// argument: state
set str rand3446 attributes
obj get arg0 rand3445 rand3446
set str rand3446 time
obj get rand3445 rand3444 rand3446
set str rand3448 methods
obj get rand3444 rand3447 rand3448
set str rand3448 updateFrame
obj get rand3447 rand3447 rand3448
callvar rand3447 mthd::updateFrame:1441a7909c087dbbe7ce59881b9df8b9 rand3444 
// arg_branch: if (state.wait > 0) {\nstate.wait --;\n}
// comparison: state.wait > 0
// attribute: state.wait
// argument: state
set str rand3453 attributes
obj get arg0 rand3452 rand3453
set str rand3453 wait
obj get rand3452 rand3450 rand3453
// number: 0
set num rand3451 0
gtr rand3449 rand3450 rand3451
jn rand3454 rand3449
// segment: state.wait --;
// assignment: state.wait --
// argument: state
// attribute: state.wait
// argument: state
set str rand3458 attributes
obj get arg0 rand3457 rand3458
set str rand3458 wait
obj get rand3457 rand3456 rand3458
set num rand3460 1
sub rand3456 rand3456 rand3460
obj set rand3457 rand3458 rand3456
: rand3454
jp rand3463
: rand3454
// segment: if (state.needsInit) {\nstate.needsInit = false;\ninitState(state, graphicsState);\n}\nif (state.type == "terminal") {\nterminal:update(state, graphicsState);\n} else (state.type == "desktop") {\ndesktop:update(state, graphicsState);\n}
// arg_branch: if (state.needsInit) {\nstate.needsInit = false;\ninitState(state, graphicsState);\n}
// attribute: state.needsInit
// argument: state
set str rand3466 attributes
obj get arg0 rand3465 rand3466
set str rand3466 needsInit
obj get rand3465 rand3464 rand3466
jn rand3467 rand3464
// segment: state.needsInit = false;\ninitState(state, graphicsState);
// assignment: state.needsInit = false
// argument: state
// attribute: state.needsInit
// argument: state
set str rand3472 attributes
obj get arg0 rand3471 rand3472
set str rand3472 needsInit
obj get rand3471 rand3470 rand3472
// constant: false
set bool rand3470 false
obj set rand3471 rand3472 rand3470
// execution: initState(state, graphicsState)
// argument: state
// argument: graphicsState
call stateManager:initState arg0 arg1
: rand3467
// arg_branch: if (state.type == "terminal") {\nterminal:update(state, graphicsState);\n}
// comparison: state.type == "terminal"
// attribute: state.type
// argument: state
set str rand3477 attributes
obj get arg0 rand3476 rand3477
set str rand3477 type
obj get rand3476 rand3474 rand3477
// string: "terminal"
set str rand3475 terminal
eql rand3473 rand3474 rand3475
jn rand3478 rand3473
// segment: terminal:update(state, graphicsState);
// execution: terminal:update(state, graphicsState)
// argument: state
// argument: graphicsState
call terminal:update arg0 arg1
: rand3478
jp rand3480
: rand3478
// comparison: state.type == "desktop"
// attribute: state.type
// argument: state
set str rand3485 attributes
obj get arg0 rand3484 rand3485
set str rand3485 type
obj get rand3484 rand3482 rand3485
// string: "desktop"
set str rand3483 desktop
eql rand3481 rand3482 rand3483
jn rand3480 rand3481
// segment: desktop:update(state, graphicsState);
// execution: desktop:update(state, graphicsState)
// argument: state
// argument: graphicsState
call desktop:update arg0 arg1
: rand3480
: rand3463
ret
~
~ main
// segment: fs:init();\n\nstate = state:getDefault();\ngraphicsState = new GraphicsState();\nstateManager:initState(state, graphicsState);\nforever {\nstate.inputState.update();\nstateManager:updateState(state, graphicsState);\n}
// execution: fs:init()
call fs:init 
// assignment: state = state:getDefault()
// execution: state:getDefault()
callget rand3489 state:getDefault 
// assignment: graphicsState = new GraphicsState()
// instance: new GraphicsState()
set obj rand3490 {"methods":{".cns":"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.newDisplay(getDefaultFrame());\\nself.drawSurface = new Surface();\n// method: self.newDisplay(getDefaultFrame())\n// constant: self\n// execution: getDefaultFrame()\ncallget rand3495 graphics:getDefaultFrame \nset str rand3494 methods\nobj get arg0 rand3493 rand3494\nset str rand3494 newDisplay\nobj get rand3493 rand3493 rand3494\ncallvar rand3493 mthd::newDisplay:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand3495\n// assignment: self.drawSurface = new Surface()\n// constant: self\n// attribute: self.drawSurface\n// constant: self\nset str rand3499 attributes\nobj get arg0 rand3498 rand3499\nset str rand3499 drawSurface\nobj get rand3498 rand3497 rand3499\n// instance: new Surface()\n// string: \"pen\"\nset str rand3500 pen\n// execution: getDefaultFrame()\ncallget rand3501 graphics:getDefaultFrame \nset obj rand3497 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.type = type;\\\\nself.frame = frame;\\n// assignment: self.type = type\\n// constant: self\\n// attribute: self.type\\n// constant: self\\nset str rand3508 attributes\\nobj get arg0 rand3507 rand3508\\nset str rand3508 type\\nobj get rand3507 rand3506 rand3508\\n// argument: type\\ndupe rand3506 arg1\\nobj set rand3507 rand3508 rand3506\\n// assignment: self.frame = frame\\n// constant: self\\n// attribute: self.frame\\n// constant: self\\nset str rand3511 attributes\\nobj get arg0 rand3510 rand3511\\nset str rand3511 frame\\nobj get rand3510 rand3509 rand3511\\n// argument: frame\\ndupe rand3509 arg2\\nobj set rand3510 rand3511 rand3509\\nret\\n~\",\"clear\":\"~ mthd::clear:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen clear\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use clear method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen clear\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3516 attributes\\nobj get arg0 rand3515 rand3516\\nset str rand3516 type\\nobj get rand3515 rand3513 rand3516\\nset str rand3517 type attribute is null\\nerrnull rand3513 rand3517\\n// string: \\\"pen\\\"\\nset str rand3514 pen\\neql rand3512 rand3513 rand3514\\njn rand3518 rand3512\\n// segment: raw(\\\"pen clear\\\");\\\\nreturn;\\n// execution: raw(\\\"pen clear\\\")\\npen clear\\n// statement: return\\nret\\n: rand3518\\n// execution: io:throw(\\\"cannot use clear method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use clear method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use clear method on\\\"+self.type\\n// string: \\\"cannot use clear method on\\\"\\nset str rand3523 cannot use clear method on\\n// attribute: self.type\\n// constant: self\\nset str rand3526 attributes\\nobj get arg0 rand3525 rand3526\\nset str rand3526 type\\nobj get rand3525 rand3524 rand3526\\nset str rand3527 type attribute is null\\nerrnull rand3524 rand3527\\nadd rand3521 emptystring rand3523 space rand3524\\n// string: \\\"surface\\\"\\nset str rand3522 surface\\nadd rand3520 emptystring rand3521 space rand3522\\ncall io:throw rand3520\\nret\\n~\",\"line\":\"~ mthd::line:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use line method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3537 attributes\\nobj get arg0 rand3536 rand3537\\nset str rand3537 type\\nobj get rand3536 rand3534 rand3537\\nset str rand3538 type attribute is null\\nerrnull rand3534 rand3538\\n// string: \\\"pen\\\"\\nset str rand3535 pen\\neql rand3533 rand3534 rand3535\\njn rand3539 rand3533\\n// segment: raw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\");\\\\nreturn;\\n// execution: raw(\\\"drawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\")\\ndrawCursor goto arg1 arg2\\npen size arg5\\npen down\\ndrawCursor goto arg3 arg4\\npen up\\n// statement: return\\nret\\n: rand3539\\n// execution: io:throw(\\\"cannot use line method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use line method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use line method on\\\"+self.type\\n// string: \\\"cannot use line method on\\\"\\nset str rand3544 cannot use line method on\\n// attribute: self.type\\n// constant: self\\nset str rand3547 attributes\\nobj get arg0 rand3546 rand3547\\nset str rand3547 type\\nobj get rand3546 rand3545 rand3547\\nset str rand3548 type attribute is null\\nerrnull rand3545 rand3548\\nadd rand3542 emptystring rand3544 space rand3545\\n// string: \\\"surface\\\"\\nset str rand3543 surface\\nadd rand3541 emptystring rand3542 space rand3543\\ncall io:throw rand3541\\nret\\n~\",\"path\":\"~ mthd::path:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: num len = points.length;\\\\nif (!loop) {\\\\nlen -= 1;\\\\n}\\\\nfor (i, len) {\\\\nArr<num:2> point = points[i];\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\n}\\n// assignment: num len = points.length\\n// attribute: points.length\\n// argument: points\\nlen rand3552 arg1\\n// arg_branch: if (!loop) {\\\\nlen -= 1;\\\\n}\\n// operation: !loop\\n// argument: loop\\ninv rand3553 arg3\\njn rand3554 rand3553\\n// segment: len -= 1;\\n// assignment: len -= 1\\n// number: 1\\nset num rand3556 1\\nsub rand3552 rand3552 rand3556\\n: rand3554\\n// arg_branch: for (i, len) {\\\\nArr<num:2> point = points[i];\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\n}\\n// variable: i\\nset num rand3559 1\\nset num rand3560 0\\n// variable: len\\n: rand3557\\nsml rand3561 rand3560 rand3552\\njn rand3558 rand3561\\n// segment: Arr<num:2> point = points[i];\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\n// assignment: Arr<num:2> point = points[i]\\n// key: points[i]\\n// variable: i\\n// argument: points\\nobj get arg1 rand3562 rand3560\\nset str rand3563  doesnt exist on points\\nadd rand3563 rand3560 rand3563\\nernull rand3562 rand3563\\n// assignment: Arr<num:2> npoint = points[i + 1 % points.length]\\n// key: points[i + 1 % points.length]\\n// operation: i + 1 % points.length\\n// operation: i+1\\n// variable: i\\n// number: 1\\nset num rand3568 1\\nadd rand3566 rand3560 rand3568\\n// attribute: points.length\\n// argument: points\\nlen rand3567 arg1\\nmod rand3565 rand3566 rand3567\\n// argument: points\\nobj get arg1 rand3564 rand3565\\nset str rand3569  doesnt exist on points\\nadd rand3569 rand3565 rand3569\\nernull rand3564 rand3569\\n// method: self.line(point[0], point[1], npoint[0], npoint[1], w)\\n// constant: self\\n// key: point[0]\\n// number: 0\\nset num rand3573 0\\n// variable: point\\nobj get rand3562 rand3572 rand3573\\nset str rand3574  doesnt exist on point\\nadd rand3574 rand3573 rand3574\\nernull rand3572 rand3574\\n// key: point[1]\\n// number: 1\\nset num rand3576 1\\n// variable: point\\nobj get rand3562 rand3575 rand3576\\nset str rand3577  doesnt exist on point\\nadd rand3577 rand3576 rand3577\\nernull rand3575 rand3577\\n// key: npoint[0]\\n// number: 0\\nset num rand3579 0\\n// variable: npoint\\nobj get rand3564 rand3578 rand3579\\nset str rand3580  doesnt exist on npoint\\nadd rand3580 rand3579 rand3580\\nernull rand3578 rand3580\\n// key: npoint[1]\\n// number: 1\\nset num rand3582 1\\n// variable: npoint\\nobj get rand3564 rand3581 rand3582\\nset str rand3583  doesnt exist on npoint\\nadd rand3583 rand3582 rand3583\\nernull rand3581 rand3583\\n// argument: w\\nset str rand3571 methods\\nobj get arg0 rand3570 rand3571\\nset str rand3571 line\\nobj get rand3570 rand3570 rand3571\\ncallvar rand3570 mthd::line:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand3572 rand3575 rand3578 rand3581 arg2\\njai rand3557 rand3560\\n: rand3558\\nret\\n~\",\"tri\":\"~ mthd::tri:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use tri method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3595 attributes\\nobj get arg0 rand3594 rand3595\\nset str rand3595 type\\nobj get rand3594 rand3592 rand3595\\nset str rand3596 type attribute is null\\nerrnull rand3592 rand3596\\n// string: \\\"pen\\\"\\nset str rand3593 pen\\neql rand3591 rand3592 rand3593\\njn rand3597 rand3591\\n// segment: raw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\");\\\\nreturn;\\n// execution: raw(\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\")\\npen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\n// statement: return\\nret\\n: rand3597\\n// execution: io:throw(\\\"cannot use tri method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use tri method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use tri method on\\\"+self.type\\n// string: \\\"cannot use tri method on\\\"\\nset str rand3602 cannot use tri method on\\n// attribute: self.type\\n// constant: self\\nset str rand3605 attributes\\nobj get arg0 rand3604 rand3605\\nset str rand3605 type\\nobj get rand3604 rand3603 rand3605\\nset str rand3606 type attribute is null\\nerrnull rand3603 rand3606\\nadd rand3600 emptystring rand3602 space rand3603\\n// string: \\\"surface\\\"\\nset str rand3601 surface\\nadd rand3599 emptystring rand3600 space rand3601\\ncall io:throw rand3599\\nret\\n~\",\"quad\":\"~ mthd::quad:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.tri(x1,y1, x2,y2, x3,y3, border);\\\\nself.tri(x2,y2, x3,y3, x4,y4, border);\\n// method: self.tri(x1,y1, x2,y2, x3,y3, border)\\n// constant: self\\n// argument: x1\\n// argument: y1\\n// argument: x2\\n// argument: y2\\n// argument: x3\\n// argument: y3\\n// argument: border\\nset str rand3617 methods\\nobj get arg0 rand3616 rand3617\\nset str rand3617 tri\\nobj get rand3616 rand3616 rand3617\\ncallvar rand3616 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg9\\n// method: self.tri(x2,y2, x3,y3, x4,y4, border)\\n// constant: self\\n// argument: x2\\n// argument: y2\\n// argument: x3\\n// argument: y3\\n// argument: x4\\n// argument: y4\\n// argument: border\\nset str rand3619 methods\\nobj get arg0 rand3618 rand3619\\nset str rand3619 tri\\nobj get rand3618 rand3618 rand3619\\ncallvar rand3618 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg3 arg4 arg5 arg6 arg7 arg8 arg9\\nret\\n~\",\"rect\":\"~ mthd::rect:1441a7909c087dbbe7ce59881b9df8b9\\n// method: self.quad(\\\\nx1, y1,\\\\nx1, y2,\\\\nx2, y1,\\\\nx2, y2,\\\\nborder\\\\n)\\n// constant: self\\n// argument: x1\\n// argument: y1\\n// argument: x1\\n// argument: y2\\n// argument: x2\\n// argument: y1\\n// argument: x2\\n// argument: y2\\n// argument: border\\nset str rand3626 methods\\nobj get arg0 rand3625 rand3626\\nset str rand3626 quad\\nobj get rand3625 rand3625 rand3626\\ncallvar rand3625 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg1 arg4 arg3 arg2 arg3 arg4 arg5\\nret\\n~\",\"square\":\"~ mthd::square:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: halfW = w / 2;\\\\nhalfH = h / 2;\\\\nself.quad(\\\\nx - halfW, y - halfH,\\\\nx - halfW, y + halfH,\\\\nx + halfW, y - halfH,\\\\nx + halfW, y + halfH,\\\\nborder\\\\n);\\n// assignment: halfW = w / 2\\n// operation: w/2\\n// argument: w\\n// number: 2\\nset num rand3633 2\\ndiv rand3632 arg3 rand3633\\n// assignment: halfH = h / 2\\n// operation: h/2\\n// argument: h\\n// number: 2\\nset num rand3635 2\\ndiv rand3634 arg4 rand3635\\n// method: self.quad(\\\\nx - halfW, y - halfH,\\\\nx - halfW, y + halfH,\\\\nx + halfW, y - halfH,\\\\nx + halfW, y + halfH,\\\\nborder\\\\n)\\n// constant: self\\n// operation: x - halfW\\n// argument: x\\n// variable: halfW\\nsub rand3638 arg1 rand3632\\n// operation: y - halfH\\n// argument: y\\n// variable: halfH\\nsub rand3639 arg2 rand3634\\n// operation: x - halfW\\n// argument: x\\n// variable: halfW\\nsub rand3640 arg1 rand3632\\n// operation: y + halfH\\n// argument: y\\n// variable: halfH\\nadd rand3641 arg2 rand3634\\n// operation: x + halfW\\n// argument: x\\n// variable: halfW\\nadd rand3642 arg1 rand3632\\n// operation: y - halfH\\n// argument: y\\n// variable: halfH\\nsub rand3643 arg2 rand3634\\n// operation: x + halfW\\n// argument: x\\n// variable: halfW\\nadd rand3644 arg1 rand3632\\n// operation: y + halfH\\n// argument: y\\n// variable: halfH\\nadd rand3645 arg2 rand3634\\n// argument: border\\nset str rand3637 methods\\nobj get arg0 rand3636 rand3637\\nset str rand3637 quad\\nobj get rand3636 rand3636 rand3637\\ncallvar rand3636 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand3638 rand3639 rand3640 rand3641 rand3642 rand3643 rand3644 rand3645 arg5\\nret\\n~\",\"icon\":\"~ mthd::icon:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use icon method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3656 attributes\\nobj get arg0 rand3655 rand3656\\nset str rand3656 type\\nobj get rand3655 rand3653 rand3656\\nset str rand3657 type attribute is null\\nerrnull rand3653 rand3657\\n// string: \\\"pen\\\"\\nset str rand3654 pen\\neql rand3652 rand3653 rand3654\\njn rand3658 rand3652\\n// segment: raw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\n// execution: raw(\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\")\\npen icn arg1 arg2 arg3 arg4 arg5 arg6\\n// statement: return\\nret\\n: rand3658\\n// execution: io:throw(\\\"cannot use icon method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use icon method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use icon method on\\\"+self.type\\n// string: \\\"cannot use icon method on\\\"\\nset str rand3663 cannot use icon method on\\n// attribute: self.type\\n// constant: self\\nset str rand3666 attributes\\nobj get arg0 rand3665 rand3666\\nset str rand3666 type\\nobj get rand3665 rand3664 rand3666\\nset str rand3667 type attribute is null\\nerrnull rand3664 rand3667\\nadd rand3661 emptystring rand3663 space rand3664\\n// string: \\\"surface\\\"\\nset str rand3662 surface\\nadd rand3660 emptystring rand3661 space rand3662\\ncall io:throw rand3660\\nret\\n~\",\"text\":\"~ mthd::text:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use text method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3678 attributes\\nobj get arg0 rand3677 rand3678\\nset str rand3678 type\\nobj get rand3677 rand3675 rand3678\\nset str rand3679 type attribute is null\\nerrnull rand3675 rand3679\\n// string: \\\"pen\\\"\\nset str rand3676 pen\\neql rand3674 rand3675 rand3676\\njn rand3680 rand3674\\n// segment: raw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\");\\\\nreturn;\\n// execution: raw(\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\")\\npen text arg1 arg2 arg3 arg4 arg5 arg6\\n// statement: return\\nret\\n: rand3680\\n// execution: io:throw(\\\"cannot use text method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use text method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use text method on\\\"+self.type\\n// string: \\\"cannot use text method on\\\"\\nset str rand3685 cannot use text method on\\n// attribute: self.type\\n// constant: self\\nset str rand3688 attributes\\nobj get arg0 rand3687 rand3688\\nset str rand3688 type\\nobj get rand3687 rand3686 rand3688\\nset str rand3689 type attribute is null\\nerrnull rand3686 rand3689\\nadd rand3683 emptystring rand3685 space rand3686\\n// string: \\\"surface\\\"\\nset str rand3684 surface\\nadd rand3682 emptystring rand3683 space rand3684\\ncall io:throw rand3682\\nret\\n~\",\"loadFontFromUrl\":\"~ mthd::loadFontFromUrl:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfonturl arg1\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use loadFontFromUrl method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfonturl arg1\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3695 attributes\\nobj get arg0 rand3694 rand3695\\nset str rand3695 type\\nobj get rand3694 rand3692 rand3695\\nset str rand3696 type attribute is null\\nerrnull rand3692 rand3696\\n// string: \\\"pen\\\"\\nset str rand3693 pen\\neql rand3691 rand3692 rand3693\\njn rand3697 rand3691\\n// segment: raw(\\\"pen loadfonturl arg1\\\");\\\\nreturn;\\n// execution: raw(\\\"pen loadfonturl arg1\\\")\\npen loadfonturl arg1\\n// statement: return\\nret\\n: rand3697\\n// execution: io:throw(\\\"cannot use loadFontFromUrl method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use loadFontFromUrl method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use loadFontFromUrl method on\\\"+self.type\\n// string: \\\"cannot use loadFontFromUrl method on\\\"\\nset str rand3702 cannot use loadFontFromUrl method on\\n// attribute: self.type\\n// constant: self\\nset str rand3705 attributes\\nobj get arg0 rand3704 rand3705\\nset str rand3705 type\\nobj get rand3704 rand3703 rand3705\\nset str rand3706 type attribute is null\\nerrnull rand3703 rand3706\\nadd rand3700 emptystring rand3702 space rand3703\\n// string: \\\"surface\\\"\\nset str rand3701 surface\\nadd rand3699 emptystring rand3700 space rand3701\\ncall io:throw rand3699\\nret\\n~\",\"loadFontData\":\"~ mthd::loadFontData:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfontdata arg1\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use loadFontData method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen loadfontdata arg1\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3712 attributes\\nobj get arg0 rand3711 rand3712\\nset str rand3712 type\\nobj get rand3711 rand3709 rand3712\\nset str rand3713 type attribute is null\\nerrnull rand3709 rand3713\\n// string: \\\"pen\\\"\\nset str rand3710 pen\\neql rand3708 rand3709 rand3710\\njn rand3714 rand3708\\n// segment: raw(\\\"pen loadfontdata arg1\\\");\\\\nreturn;\\n// execution: raw(\\\"pen loadfontdata arg1\\\")\\npen loadfontdata arg1\\n// statement: return\\nret\\n: rand3714\\n// execution: io:throw(\\\"cannot use loadFontData method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use loadFontData method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use loadFontData method on\\\"+self.type\\n// string: \\\"cannot use loadFontData method on\\\"\\nset str rand3719 cannot use loadFontData method on\\n// attribute: self.type\\n// constant: self\\nset str rand3722 attributes\\nobj get arg0 rand3721 rand3722\\nset str rand3722 type\\nobj get rand3721 rand3720 rand3722\\nset str rand3723 type attribute is null\\nerrnull rand3720 rand3723\\nadd rand3717 emptystring rand3719 space rand3720\\n// string: \\\"surface\\\"\\nset str rand3718 surface\\nadd rand3716 emptystring rand3717 space rand3718\\ncall io:throw rand3716\\nret\\n~\",\"setColor\":\"~ mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen color arg1\\\");\\\\nreturn;\\\\n}\\\\n\\\\nio:throw(\\\"cannot use setColor method on\\\" + self.type + \\\"surface\\\");\\n// arg_branch: if (self.type == \\\"pen\\\") {\\\\nraw(\\\"pen color arg1\\\");\\\\nreturn;\\\\n}\\n// comparison: self.type == \\\"pen\\\"\\n// attribute: self.type\\n// constant: self\\nset str rand3729 attributes\\nobj get arg0 rand3728 rand3729\\nset str rand3729 type\\nobj get rand3728 rand3726 rand3729\\nset str rand3730 type attribute is null\\nerrnull rand3726 rand3730\\n// string: \\\"pen\\\"\\nset str rand3727 pen\\neql rand3725 rand3726 rand3727\\njn rand3731 rand3725\\n// segment: raw(\\\"pen color arg1\\\");\\\\nreturn;\\n// execution: raw(\\\"pen color arg1\\\")\\npen color arg1\\n// statement: return\\nret\\n: rand3731\\n// execution: io:throw(\\\"cannot use setColor method on\\\" + self.type + \\\"surface\\\")\\n// operation: \\\"cannot use setColor method on\\\" + self.type + \\\"surface\\\"\\n// operation: \\\"cannot use setColor method on\\\"+self.type\\n// string: \\\"cannot use setColor method on\\\"\\nset str rand3736 cannot use setColor method on\\n// attribute: self.type\\n// constant: self\\nset str rand3739 attributes\\nobj get arg0 rand3738 rand3739\\nset str rand3739 type\\nobj get rand3738 rand3737 rand3739\\nset str rand3740 type attribute is null\\nerrnull rand3737 rand3740\\nadd rand3734 emptystring rand3736 space rand3737\\n// string: \\\"surface\\\"\\nset str rand3735 surface\\nadd rand3733 emptystring rand3734 space rand3735\\ncall io:throw rand3733\\nret\\n~\"},\"attributes\":{}}\nset str rand3503 methods\nobj get rand3497 rand3502 rand3503\nset str rand3503 .cns\nobj get rand3502 rand3502 rand3503\ncallvar rand3502 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3497 rand3500 rand3501\nobj set rand3498 rand3499 rand3497\nret\n~","newDisplay":"~ mthd::newDisplay:1441a7909c087dbbe7ce59881b9df8b9\n// segment: if (self?.displays) {\\nself!.displays.append(new Display(frame));\\n} else {\\nself.displays = [new Display(frame)];\\n}\n// arg_branch: if (self?.displays) {\\nself!.displays.append(new Display(frame));\\n}\n// attribute_check: self?.displays\n// attribute: self.displays\n// constant: self\nset str rand3745 attributes\nobj get arg0 rand3744 rand3745\nset str rand3745 displays\nobj get rand3744 rand3743 rand3745\nisnull rand3742 rand3743\ninv rand3742 rand3742\njn rand3746 rand3742\n// segment: self!.displays.append(new Display(frame));\n// method: self!.displays.append(new Display(frame))\n// attribute: self!.displays\n// constant: self\nset str rand3750 attributes\nobj get arg0 rand3749 rand3750\nset str rand3750 displays\nobj get rand3749 rand3748 rand3750\n// instance: new Display(frame)\n// argument: frame\nset obj rand3751 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.surface = new Surface(\\\"pen\\\", frame);\\n// assignment: self.surface = new Surface(\\\"pen\\\", frame)\\n// constant: self\\n// attribute: self.surface\\n// constant: self\\nset str rand3758 attributes\\nobj get arg0 rand3757 rand3758\\nset str rand3758 surface\\nobj get rand3757 rand3756 rand3758\\n// instance: new Surface(\\\"pen\\\", frame)\\n// string: \\\"pen\\\"\\nset str rand3759 pen\\n// argument: frame\\nset obj rand3756 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.type = type;\\\\\\\\nself.frame = frame;\\\\n// assignment: self.type = type\\\\n// constant: self\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3766 attributes\\\\nobj get arg0 rand3765 rand3766\\\\nset str rand3766 type\\\\nobj get rand3765 rand3764 rand3766\\\\n// argument: type\\\\ndupe rand3764 arg1\\\\nobj set rand3765 rand3766 rand3764\\\\n// assignment: self.frame = frame\\\\n// constant: self\\\\n// attribute: self.frame\\\\n// constant: self\\\\nset str rand3769 attributes\\\\nobj get arg0 rand3768 rand3769\\\\nset str rand3769 frame\\\\nobj get rand3768 rand3767 rand3769\\\\n// argument: frame\\\\ndupe rand3767 arg2\\\\nobj set rand3768 rand3769 rand3767\\\\nret\\\\n~\\\",\\\"clear\\\":\\\"~ mthd::clear:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen clear\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use clear method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen clear\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3774 attributes\\\\nobj get arg0 rand3773 rand3774\\\\nset str rand3774 type\\\\nobj get rand3773 rand3771 rand3774\\\\nset str rand3775 type attribute is null\\\\nerrnull rand3771 rand3775\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3772 pen\\\\neql rand3770 rand3771 rand3772\\\\njn rand3776 rand3770\\\\n// segment: raw(\\\\\\\"pen clear\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen clear\\\\\\\")\\\\npen clear\\\\n// statement: return\\\\nret\\\\n: rand3776\\\\n// execution: io:throw(\\\\\\\"cannot use clear method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use clear method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use clear method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use clear method on\\\\\\\"\\\\nset str rand3781 cannot use clear method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3784 attributes\\\\nobj get arg0 rand3783 rand3784\\\\nset str rand3784 type\\\\nobj get rand3783 rand3782 rand3784\\\\nset str rand3785 type attribute is null\\\\nerrnull rand3782 rand3785\\\\nadd rand3779 emptystring rand3781 space rand3782\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3780 surface\\\\nadd rand3778 emptystring rand3779 space rand3780\\\\ncall io:throw rand3778\\\\nret\\\\n~\\\",\\\"line\\\":\\\"~ mthd::line:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use line method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3795 attributes\\\\nobj get arg0 rand3794 rand3795\\\\nset str rand3795 type\\\\nobj get rand3794 rand3792 rand3795\\\\nset str rand3796 type attribute is null\\\\nerrnull rand3792 rand3796\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3793 pen\\\\neql rand3791 rand3792 rand3793\\\\njn rand3797 rand3791\\\\n// segment: raw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\")\\\\ndrawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\\n// statement: return\\\\nret\\\\n: rand3797\\\\n// execution: io:throw(\\\\\\\"cannot use line method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use line method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use line method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use line method on\\\\\\\"\\\\nset str rand3802 cannot use line method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3805 attributes\\\\nobj get arg0 rand3804 rand3805\\\\nset str rand3805 type\\\\nobj get rand3804 rand3803 rand3805\\\\nset str rand3806 type attribute is null\\\\nerrnull rand3803 rand3806\\\\nadd rand3800 emptystring rand3802 space rand3803\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3801 surface\\\\nadd rand3799 emptystring rand3800 space rand3801\\\\ncall io:throw rand3799\\\\nret\\\\n~\\\",\\\"path\\\":\\\"~ mthd::path:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: num len = points.length;\\\\\\\\nif (!loop) {\\\\\\\\nlen -= 1;\\\\\\\\n}\\\\\\\\nfor (i, len) {\\\\\\\\nArr<num:2> point = points[i];\\\\\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\\\\\n}\\\\n// assignment: num len = points.length\\\\n// attribute: points.length\\\\n// argument: points\\\\nlen rand3810 arg1\\\\n// arg_branch: if (!loop) {\\\\\\\\nlen -= 1;\\\\\\\\n}\\\\n// operation: !loop\\\\n// argument: loop\\\\ninv rand3811 arg3\\\\njn rand3812 rand3811\\\\n// segment: len -= 1;\\\\n// assignment: len -= 1\\\\n// number: 1\\\\nset num rand3814 1\\\\nsub rand3810 rand3810 rand3814\\\\n: rand3812\\\\n// arg_branch: for (i, len) {\\\\\\\\nArr<num:2> point = points[i];\\\\\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\\\\\n}\\\\n// variable: i\\\\nset num rand3817 1\\\\nset num rand3818 0\\\\n// variable: len\\\\n: rand3815\\\\nsml rand3819 rand3818 rand3810\\\\njn rand3816 rand3819\\\\n// segment: Arr<num:2> point = points[i];\\\\\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\n// assignment: Arr<num:2> point = points[i]\\\\n// key: points[i]\\\\n// variable: i\\\\n// argument: points\\\\nobj get arg1 rand3820 rand3818\\\\nset str rand3821  doesnt exist on points\\\\nadd rand3821 rand3818 rand3821\\\\nernull rand3820 rand3821\\\\n// assignment: Arr<num:2> npoint = points[i + 1 % points.length]\\\\n// key: points[i + 1 % points.length]\\\\n// operation: i + 1 % points.length\\\\n// operation: i+1\\\\n// variable: i\\\\n// number: 1\\\\nset num rand3826 1\\\\nadd rand3824 rand3818 rand3826\\\\n// attribute: points.length\\\\n// argument: points\\\\nlen rand3825 arg1\\\\nmod rand3823 rand3824 rand3825\\\\n// argument: points\\\\nobj get arg1 rand3822 rand3823\\\\nset str rand3827  doesnt exist on points\\\\nadd rand3827 rand3823 rand3827\\\\nernull rand3822 rand3827\\\\n// method: self.line(point[0], point[1], npoint[0], npoint[1], w)\\\\n// constant: self\\\\n// key: point[0]\\\\n// number: 0\\\\nset num rand3831 0\\\\n// variable: point\\\\nobj get rand3820 rand3830 rand3831\\\\nset str rand3832  doesnt exist on point\\\\nadd rand3832 rand3831 rand3832\\\\nernull rand3830 rand3832\\\\n// key: point[1]\\\\n// number: 1\\\\nset num rand3834 1\\\\n// variable: point\\\\nobj get rand3820 rand3833 rand3834\\\\nset str rand3835  doesnt exist on point\\\\nadd rand3835 rand3834 rand3835\\\\nernull rand3833 rand3835\\\\n// key: npoint[0]\\\\n// number: 0\\\\nset num rand3837 0\\\\n// variable: npoint\\\\nobj get rand3822 rand3836 rand3837\\\\nset str rand3838  doesnt exist on npoint\\\\nadd rand3838 rand3837 rand3838\\\\nernull rand3836 rand3838\\\\n// key: npoint[1]\\\\n// number: 1\\\\nset num rand3840 1\\\\n// variable: npoint\\\\nobj get rand3822 rand3839 rand3840\\\\nset str rand3841  doesnt exist on npoint\\\\nadd rand3841 rand3840 rand3841\\\\nernull rand3839 rand3841\\\\n// argument: w\\\\nset str rand3829 methods\\\\nobj get arg0 rand3828 rand3829\\\\nset str rand3829 line\\\\nobj get rand3828 rand3828 rand3829\\\\ncallvar rand3828 mthd::line:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand3830 rand3833 rand3836 rand3839 arg2\\\\njai rand3815 rand3818\\\\n: rand3816\\\\nret\\\\n~\\\",\\\"tri\\\":\\\"~ mthd::tri:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use tri method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3853 attributes\\\\nobj get arg0 rand3852 rand3853\\\\nset str rand3853 type\\\\nobj get rand3852 rand3850 rand3853\\\\nset str rand3854 type attribute is null\\\\nerrnull rand3850 rand3854\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3851 pen\\\\neql rand3849 rand3850 rand3851\\\\njn rand3855 rand3849\\\\n// segment: raw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\")\\\\npen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\n// statement: return\\\\nret\\\\n: rand3855\\\\n// execution: io:throw(\\\\\\\"cannot use tri method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use tri method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use tri method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use tri method on\\\\\\\"\\\\nset str rand3860 cannot use tri method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3863 attributes\\\\nobj get arg0 rand3862 rand3863\\\\nset str rand3863 type\\\\nobj get rand3862 rand3861 rand3863\\\\nset str rand3864 type attribute is null\\\\nerrnull rand3861 rand3864\\\\nadd rand3858 emptystring rand3860 space rand3861\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3859 surface\\\\nadd rand3857 emptystring rand3858 space rand3859\\\\ncall io:throw rand3857\\\\nret\\\\n~\\\",\\\"quad\\\":\\\"~ mthd::quad:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.tri(x1,y1, x2,y2, x3,y3, border);\\\\\\\\nself.tri(x2,y2, x3,y3, x4,y4, border);\\\\n// method: self.tri(x1,y1, x2,y2, x3,y3, border)\\\\n// constant: self\\\\n// argument: x1\\\\n// argument: y1\\\\n// argument: x2\\\\n// argument: y2\\\\n// argument: x3\\\\n// argument: y3\\\\n// argument: border\\\\nset str rand3875 methods\\\\nobj get arg0 rand3874 rand3875\\\\nset str rand3875 tri\\\\nobj get rand3874 rand3874 rand3875\\\\ncallvar rand3874 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg9\\\\n// method: self.tri(x2,y2, x3,y3, x4,y4, border)\\\\n// constant: self\\\\n// argument: x2\\\\n// argument: y2\\\\n// argument: x3\\\\n// argument: y3\\\\n// argument: x4\\\\n// argument: y4\\\\n// argument: border\\\\nset str rand3877 methods\\\\nobj get arg0 rand3876 rand3877\\\\nset str rand3877 tri\\\\nobj get rand3876 rand3876 rand3877\\\\ncallvar rand3876 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg3 arg4 arg5 arg6 arg7 arg8 arg9\\\\nret\\\\n~\\\",\\\"rect\\\":\\\"~ mthd::rect:1441a7909c087dbbe7ce59881b9df8b9\\\\n// method: self.quad(\\\\\\\\nx1, y1,\\\\\\\\nx1, y2,\\\\\\\\nx2, y1,\\\\\\\\nx2, y2,\\\\\\\\nborder\\\\\\\\n)\\\\n// constant: self\\\\n// argument: x1\\\\n// argument: y1\\\\n// argument: x1\\\\n// argument: y2\\\\n// argument: x2\\\\n// argument: y1\\\\n// argument: x2\\\\n// argument: y2\\\\n// argument: border\\\\nset str rand3884 methods\\\\nobj get arg0 rand3883 rand3884\\\\nset str rand3884 quad\\\\nobj get rand3883 rand3883 rand3884\\\\ncallvar rand3883 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg1 arg4 arg3 arg2 arg3 arg4 arg5\\\\nret\\\\n~\\\",\\\"square\\\":\\\"~ mthd::square:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: halfW = w / 2;\\\\\\\\nhalfH = h / 2;\\\\\\\\nself.quad(\\\\\\\\nx - halfW, y - halfH,\\\\\\\\nx - halfW, y + halfH,\\\\\\\\nx + halfW, y - halfH,\\\\\\\\nx + halfW, y + halfH,\\\\\\\\nborder\\\\\\\\n);\\\\n// assignment: halfW = w / 2\\\\n// operation: w/2\\\\n// argument: w\\\\n// number: 2\\\\nset num rand3891 2\\\\ndiv rand3890 arg3 rand3891\\\\n// assignment: halfH = h / 2\\\\n// operation: h/2\\\\n// argument: h\\\\n// number: 2\\\\nset num rand3893 2\\\\ndiv rand3892 arg4 rand3893\\\\n// method: self.quad(\\\\\\\\nx - halfW, y - halfH,\\\\\\\\nx - halfW, y + halfH,\\\\\\\\nx + halfW, y - halfH,\\\\\\\\nx + halfW, y + halfH,\\\\\\\\nborder\\\\\\\\n)\\\\n// constant: self\\\\n// operation: x - halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nsub rand3896 arg1 rand3890\\\\n// operation: y - halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nsub rand3897 arg2 rand3892\\\\n// operation: x - halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nsub rand3898 arg1 rand3890\\\\n// operation: y + halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nadd rand3899 arg2 rand3892\\\\n// operation: x + halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nadd rand3900 arg1 rand3890\\\\n// operation: y - halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nsub rand3901 arg2 rand3892\\\\n// operation: x + halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nadd rand3902 arg1 rand3890\\\\n// operation: y + halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nadd rand3903 arg2 rand3892\\\\n// argument: border\\\\nset str rand3895 methods\\\\nobj get arg0 rand3894 rand3895\\\\nset str rand3895 quad\\\\nobj get rand3894 rand3894 rand3895\\\\ncallvar rand3894 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand3896 rand3897 rand3898 rand3899 rand3900 rand3901 rand3902 rand3903 arg5\\\\nret\\\\n~\\\",\\\"icon\\\":\\\"~ mthd::icon:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use icon method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3914 attributes\\\\nobj get arg0 rand3913 rand3914\\\\nset str rand3914 type\\\\nobj get rand3913 rand3911 rand3914\\\\nset str rand3915 type attribute is null\\\\nerrnull rand3911 rand3915\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3912 pen\\\\neql rand3910 rand3911 rand3912\\\\njn rand3916 rand3910\\\\n// segment: raw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\")\\\\npen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\n// statement: return\\\\nret\\\\n: rand3916\\\\n// execution: io:throw(\\\\\\\"cannot use icon method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use icon method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use icon method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use icon method on\\\\\\\"\\\\nset str rand3921 cannot use icon method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3924 attributes\\\\nobj get arg0 rand3923 rand3924\\\\nset str rand3924 type\\\\nobj get rand3923 rand3922 rand3924\\\\nset str rand3925 type attribute is null\\\\nerrnull rand3922 rand3925\\\\nadd rand3919 emptystring rand3921 space rand3922\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3920 surface\\\\nadd rand3918 emptystring rand3919 space rand3920\\\\ncall io:throw rand3918\\\\nret\\\\n~\\\",\\\"text\\\":\\\"~ mthd::text:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use text method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3936 attributes\\\\nobj get arg0 rand3935 rand3936\\\\nset str rand3936 type\\\\nobj get rand3935 rand3933 rand3936\\\\nset str rand3937 type attribute is null\\\\nerrnull rand3933 rand3937\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3934 pen\\\\neql rand3932 rand3933 rand3934\\\\njn rand3938 rand3932\\\\n// segment: raw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\")\\\\npen text arg1 arg2 arg3 arg4 arg5 arg6\\\\n// statement: return\\\\nret\\\\n: rand3938\\\\n// execution: io:throw(\\\\\\\"cannot use text method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use text method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use text method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use text method on\\\\\\\"\\\\nset str rand3943 cannot use text method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3946 attributes\\\\nobj get arg0 rand3945 rand3946\\\\nset str rand3946 type\\\\nobj get rand3945 rand3944 rand3946\\\\nset str rand3947 type attribute is null\\\\nerrnull rand3944 rand3947\\\\nadd rand3941 emptystring rand3943 space rand3944\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3942 surface\\\\nadd rand3940 emptystring rand3941 space rand3942\\\\ncall io:throw rand3940\\\\nret\\\\n~\\\",\\\"loadFontFromUrl\\\":\\\"~ mthd::loadFontFromUrl:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfonturl arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use loadFontFromUrl method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfonturl arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3953 attributes\\\\nobj get arg0 rand3952 rand3953\\\\nset str rand3953 type\\\\nobj get rand3952 rand3950 rand3953\\\\nset str rand3954 type attribute is null\\\\nerrnull rand3950 rand3954\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3951 pen\\\\neql rand3949 rand3950 rand3951\\\\njn rand3955 rand3949\\\\n// segment: raw(\\\\\\\"pen loadfonturl arg1\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen loadfonturl arg1\\\\\\\")\\\\npen loadfonturl arg1\\\\n// statement: return\\\\nret\\\\n: rand3955\\\\n// execution: io:throw(\\\\\\\"cannot use loadFontFromUrl method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use loadFontFromUrl method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use loadFontFromUrl method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use loadFontFromUrl method on\\\\\\\"\\\\nset str rand3960 cannot use loadFontFromUrl method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3963 attributes\\\\nobj get arg0 rand3962 rand3963\\\\nset str rand3963 type\\\\nobj get rand3962 rand3961 rand3963\\\\nset str rand3964 type attribute is null\\\\nerrnull rand3961 rand3964\\\\nadd rand3958 emptystring rand3960 space rand3961\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3959 surface\\\\nadd rand3957 emptystring rand3958 space rand3959\\\\ncall io:throw rand3957\\\\nret\\\\n~\\\",\\\"loadFontData\\\":\\\"~ mthd::loadFontData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfontdata arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use loadFontData method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfontdata arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3970 attributes\\\\nobj get arg0 rand3969 rand3970\\\\nset str rand3970 type\\\\nobj get rand3969 rand3967 rand3970\\\\nset str rand3971 type attribute is null\\\\nerrnull rand3967 rand3971\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3968 pen\\\\neql rand3966 rand3967 rand3968\\\\njn rand3972 rand3966\\\\n// segment: raw(\\\\\\\"pen loadfontdata arg1\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen loadfontdata arg1\\\\\\\")\\\\npen loadfontdata arg1\\\\n// statement: return\\\\nret\\\\n: rand3972\\\\n// execution: io:throw(\\\\\\\"cannot use loadFontData method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use loadFontData method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use loadFontData method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use loadFontData method on\\\\\\\"\\\\nset str rand3977 cannot use loadFontData method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3980 attributes\\\\nobj get arg0 rand3979 rand3980\\\\nset str rand3980 type\\\\nobj get rand3979 rand3978 rand3980\\\\nset str rand3981 type attribute is null\\\\nerrnull rand3978 rand3981\\\\nadd rand3975 emptystring rand3977 space rand3978\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3976 surface\\\\nadd rand3974 emptystring rand3975 space rand3976\\\\ncall io:throw rand3974\\\\nret\\\\n~\\\",\\\"setColor\\\":\\\"~ mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen color arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use setColor method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen color arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3987 attributes\\\\nobj get arg0 rand3986 rand3987\\\\nset str rand3987 type\\\\nobj get rand3986 rand3984 rand3987\\\\nset str rand3988 type attribute is null\\\\nerrnull rand3984 rand3988\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand3985 pen\\\\neql rand3983 rand3984 rand3985\\\\njn rand3989 rand3983\\\\n// segment: raw(\\\\\\\"pen color arg1\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen color arg1\\\\\\\")\\\\npen color arg1\\\\n// statement: return\\\\nret\\\\n: rand3989\\\\n// execution: io:throw(\\\\\\\"cannot use setColor method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use setColor method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use setColor method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use setColor method on\\\\\\\"\\\\nset str rand3994 cannot use setColor method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand3997 attributes\\\\nobj get arg0 rand3996 rand3997\\\\nset str rand3997 type\\\\nobj get rand3996 rand3995 rand3997\\\\nset str rand3998 type attribute is null\\\\nerrnull rand3995 rand3998\\\\nadd rand3992 emptystring rand3994 space rand3995\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand3993 surface\\\\nadd rand3991 emptystring rand3992 space rand3993\\\\ncall io:throw rand3991\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand3761 methods\\nobj get rand3756 rand3760 rand3761\\nset str rand3761 .cns\\nobj get rand3760 rand3760 rand3761\\ncallvar rand3760 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3756 rand3759 arg1\\nobj set rand3757 rand3758 rand3756\\nret\\n~\"},\"attributes\":{}}\nset str rand3753 methods\nobj get rand3751 rand3752 rand3753\nset str rand3753 .cns\nobj get rand3752 rand3752 rand3753\ncallvar rand3752 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3751 arg1\narr add rand3748 rand3751\n: rand3746\njp rand4000\n: rand3746\n// segment: self.displays = [new Display(frame)];\n// assignment: self.displays = [new Display(frame)]\n// constant: self\n// attribute: self.displays\n// constant: self\nset str rand4004 attributes\nobj get arg0 rand4003 rand4004\nset str rand4004 displays\nobj get rand4003 rand4002 rand4004\n// array: [new Display(frame)]\nset obj rand4002 []\n// instance: new Display(frame)\n// argument: frame\nset obj rand4005 {\"methods\":{\".cns\":\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\n// segment: self.surface = new Surface(\\\"pen\\\", frame);\\n// assignment: self.surface = new Surface(\\\"pen\\\", frame)\\n// constant: self\\n// attribute: self.surface\\n// constant: self\\nset str rand4012 attributes\\nobj get arg0 rand4011 rand4012\\nset str rand4012 surface\\nobj get rand4011 rand4010 rand4012\\n// instance: new Surface(\\\"pen\\\", frame)\\n// string: \\\"pen\\\"\\nset str rand4013 pen\\n// argument: frame\\nset obj rand4010 {\\\"methods\\\":{\\\".cns\\\":\\\"~ mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.type = type;\\\\\\\\nself.frame = frame;\\\\n// assignment: self.type = type\\\\n// constant: self\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4020 attributes\\\\nobj get arg0 rand4019 rand4020\\\\nset str rand4020 type\\\\nobj get rand4019 rand4018 rand4020\\\\n// argument: type\\\\ndupe rand4018 arg1\\\\nobj set rand4019 rand4020 rand4018\\\\n// assignment: self.frame = frame\\\\n// constant: self\\\\n// attribute: self.frame\\\\n// constant: self\\\\nset str rand4023 attributes\\\\nobj get arg0 rand4022 rand4023\\\\nset str rand4023 frame\\\\nobj get rand4022 rand4021 rand4023\\\\n// argument: frame\\\\ndupe rand4021 arg2\\\\nobj set rand4022 rand4023 rand4021\\\\nret\\\\n~\\\",\\\"clear\\\":\\\"~ mthd::clear:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen clear\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use clear method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen clear\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4028 attributes\\\\nobj get arg0 rand4027 rand4028\\\\nset str rand4028 type\\\\nobj get rand4027 rand4025 rand4028\\\\nset str rand4029 type attribute is null\\\\nerrnull rand4025 rand4029\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4026 pen\\\\neql rand4024 rand4025 rand4026\\\\njn rand4030 rand4024\\\\n// segment: raw(\\\\\\\"pen clear\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen clear\\\\\\\")\\\\npen clear\\\\n// statement: return\\\\nret\\\\n: rand4030\\\\n// execution: io:throw(\\\\\\\"cannot use clear method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use clear method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use clear method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use clear method on\\\\\\\"\\\\nset str rand4035 cannot use clear method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4038 attributes\\\\nobj get arg0 rand4037 rand4038\\\\nset str rand4038 type\\\\nobj get rand4037 rand4036 rand4038\\\\nset str rand4039 type attribute is null\\\\nerrnull rand4036 rand4039\\\\nadd rand4033 emptystring rand4035 space rand4036\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4034 surface\\\\nadd rand4032 emptystring rand4033 space rand4034\\\\ncall io:throw rand4032\\\\nret\\\\n~\\\",\\\"line\\\":\\\"~ mthd::line:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use line method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4049 attributes\\\\nobj get arg0 rand4048 rand4049\\\\nset str rand4049 type\\\\nobj get rand4048 rand4046 rand4049\\\\nset str rand4050 type attribute is null\\\\nerrnull rand4046 rand4050\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4047 pen\\\\neql rand4045 rand4046 rand4047\\\\njn rand4051 rand4045\\\\n// segment: raw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"drawCursor goto arg1 arg2\\\\\\\\npen size arg5\\\\\\\\npen down\\\\\\\\ndrawCursor goto arg3 arg4\\\\\\\\npen up\\\\\\\")\\\\ndrawCursor goto arg1 arg2\\\\npen size arg5\\\\npen down\\\\ndrawCursor goto arg3 arg4\\\\npen up\\\\n// statement: return\\\\nret\\\\n: rand4051\\\\n// execution: io:throw(\\\\\\\"cannot use line method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use line method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use line method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use line method on\\\\\\\"\\\\nset str rand4056 cannot use line method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4059 attributes\\\\nobj get arg0 rand4058 rand4059\\\\nset str rand4059 type\\\\nobj get rand4058 rand4057 rand4059\\\\nset str rand4060 type attribute is null\\\\nerrnull rand4057 rand4060\\\\nadd rand4054 emptystring rand4056 space rand4057\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4055 surface\\\\nadd rand4053 emptystring rand4054 space rand4055\\\\ncall io:throw rand4053\\\\nret\\\\n~\\\",\\\"path\\\":\\\"~ mthd::path:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: num len = points.length;\\\\\\\\nif (!loop) {\\\\\\\\nlen -= 1;\\\\\\\\n}\\\\\\\\nfor (i, len) {\\\\\\\\nArr<num:2> point = points[i];\\\\\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\\\\\n}\\\\n// assignment: num len = points.length\\\\n// attribute: points.length\\\\n// argument: points\\\\nlen rand4064 arg1\\\\n// arg_branch: if (!loop) {\\\\\\\\nlen -= 1;\\\\\\\\n}\\\\n// operation: !loop\\\\n// argument: loop\\\\ninv rand4065 arg3\\\\njn rand4066 rand4065\\\\n// segment: len -= 1;\\\\n// assignment: len -= 1\\\\n// number: 1\\\\nset num rand4068 1\\\\nsub rand4064 rand4064 rand4068\\\\n: rand4066\\\\n// arg_branch: for (i, len) {\\\\\\\\nArr<num:2> point = points[i];\\\\\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\\\\\n}\\\\n// variable: i\\\\nset num rand4071 1\\\\nset num rand4072 0\\\\n// variable: len\\\\n: rand4069\\\\nsml rand4073 rand4072 rand4064\\\\njn rand4070 rand4073\\\\n// segment: Arr<num:2> point = points[i];\\\\\\\\nArr<num:2> npoint = points[i + 1 % points.length];\\\\\\\\nself.line(point[0], point[1], npoint[0], npoint[1], w);\\\\n// assignment: Arr<num:2> point = points[i]\\\\n// key: points[i]\\\\n// variable: i\\\\n// argument: points\\\\nobj get arg1 rand4074 rand4072\\\\nset str rand4075  doesnt exist on points\\\\nadd rand4075 rand4072 rand4075\\\\nernull rand4074 rand4075\\\\n// assignment: Arr<num:2> npoint = points[i + 1 % points.length]\\\\n// key: points[i + 1 % points.length]\\\\n// operation: i + 1 % points.length\\\\n// operation: i+1\\\\n// variable: i\\\\n// number: 1\\\\nset num rand4080 1\\\\nadd rand4078 rand4072 rand4080\\\\n// attribute: points.length\\\\n// argument: points\\\\nlen rand4079 arg1\\\\nmod rand4077 rand4078 rand4079\\\\n// argument: points\\\\nobj get arg1 rand4076 rand4077\\\\nset str rand4081  doesnt exist on points\\\\nadd rand4081 rand4077 rand4081\\\\nernull rand4076 rand4081\\\\n// method: self.line(point[0], point[1], npoint[0], npoint[1], w)\\\\n// constant: self\\\\n// key: point[0]\\\\n// number: 0\\\\nset num rand4085 0\\\\n// variable: point\\\\nobj get rand4074 rand4084 rand4085\\\\nset str rand4086  doesnt exist on point\\\\nadd rand4086 rand4085 rand4086\\\\nernull rand4084 rand4086\\\\n// key: point[1]\\\\n// number: 1\\\\nset num rand4088 1\\\\n// variable: point\\\\nobj get rand4074 rand4087 rand4088\\\\nset str rand4089  doesnt exist on point\\\\nadd rand4089 rand4088 rand4089\\\\nernull rand4087 rand4089\\\\n// key: npoint[0]\\\\n// number: 0\\\\nset num rand4091 0\\\\n// variable: npoint\\\\nobj get rand4076 rand4090 rand4091\\\\nset str rand4092  doesnt exist on npoint\\\\nadd rand4092 rand4091 rand4092\\\\nernull rand4090 rand4092\\\\n// key: npoint[1]\\\\n// number: 1\\\\nset num rand4094 1\\\\n// variable: npoint\\\\nobj get rand4076 rand4093 rand4094\\\\nset str rand4095  doesnt exist on npoint\\\\nadd rand4095 rand4094 rand4095\\\\nernull rand4093 rand4095\\\\n// argument: w\\\\nset str rand4083 methods\\\\nobj get arg0 rand4082 rand4083\\\\nset str rand4083 line\\\\nobj get rand4082 rand4082 rand4083\\\\ncallvar rand4082 mthd::line:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand4084 rand4087 rand4090 rand4093 arg2\\\\njai rand4069 rand4072\\\\n: rand4070\\\\nret\\\\n~\\\",\\\"tri\\\":\\\"~ mthd::tri:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use tri method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4107 attributes\\\\nobj get arg0 rand4106 rand4107\\\\nset str rand4107 type\\\\nobj get rand4106 rand4104 rand4107\\\\nset str rand4108 type attribute is null\\\\nerrnull rand4104 rand4108\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4105 pen\\\\neql rand4103 rand4104 rand4105\\\\njn rand4109 rand4103\\\\n// segment: raw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\\\\")\\\\npen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7\\\\n// statement: return\\\\nret\\\\n: rand4109\\\\n// execution: io:throw(\\\\\\\"cannot use tri method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use tri method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use tri method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use tri method on\\\\\\\"\\\\nset str rand4114 cannot use tri method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4117 attributes\\\\nobj get arg0 rand4116 rand4117\\\\nset str rand4117 type\\\\nobj get rand4116 rand4115 rand4117\\\\nset str rand4118 type attribute is null\\\\nerrnull rand4115 rand4118\\\\nadd rand4112 emptystring rand4114 space rand4115\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4113 surface\\\\nadd rand4111 emptystring rand4112 space rand4113\\\\ncall io:throw rand4111\\\\nret\\\\n~\\\",\\\"quad\\\":\\\"~ mthd::quad:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: self.tri(x1,y1, x2,y2, x3,y3, border);\\\\\\\\nself.tri(x2,y2, x3,y3, x4,y4, border);\\\\n// method: self.tri(x1,y1, x2,y2, x3,y3, border)\\\\n// constant: self\\\\n// argument: x1\\\\n// argument: y1\\\\n// argument: x2\\\\n// argument: y2\\\\n// argument: x3\\\\n// argument: y3\\\\n// argument: border\\\\nset str rand4129 methods\\\\nobj get arg0 rand4128 rand4129\\\\nset str rand4129 tri\\\\nobj get rand4128 rand4128 rand4129\\\\ncallvar rand4128 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg3 arg4 arg5 arg6 arg9\\\\n// method: self.tri(x2,y2, x3,y3, x4,y4, border)\\\\n// constant: self\\\\n// argument: x2\\\\n// argument: y2\\\\n// argument: x3\\\\n// argument: y3\\\\n// argument: x4\\\\n// argument: y4\\\\n// argument: border\\\\nset str rand4131 methods\\\\nobj get arg0 rand4130 rand4131\\\\nset str rand4131 tri\\\\nobj get rand4130 rand4130 rand4131\\\\ncallvar rand4130 mthd::tri:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg3 arg4 arg5 arg6 arg7 arg8 arg9\\\\nret\\\\n~\\\",\\\"rect\\\":\\\"~ mthd::rect:1441a7909c087dbbe7ce59881b9df8b9\\\\n// method: self.quad(\\\\\\\\nx1, y1,\\\\\\\\nx1, y2,\\\\\\\\nx2, y1,\\\\\\\\nx2, y2,\\\\\\\\nborder\\\\\\\\n)\\\\n// constant: self\\\\n// argument: x1\\\\n// argument: y1\\\\n// argument: x1\\\\n// argument: y2\\\\n// argument: x2\\\\n// argument: y1\\\\n// argument: x2\\\\n// argument: y2\\\\n// argument: border\\\\nset str rand4138 methods\\\\nobj get arg0 rand4137 rand4138\\\\nset str rand4138 quad\\\\nobj get rand4137 rand4137 rand4138\\\\ncallvar rand4137 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 arg1 arg2 arg1 arg4 arg3 arg2 arg3 arg4 arg5\\\\nret\\\\n~\\\",\\\"square\\\":\\\"~ mthd::square:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: halfW = w / 2;\\\\\\\\nhalfH = h / 2;\\\\\\\\nself.quad(\\\\\\\\nx - halfW, y - halfH,\\\\\\\\nx - halfW, y + halfH,\\\\\\\\nx + halfW, y - halfH,\\\\\\\\nx + halfW, y + halfH,\\\\\\\\nborder\\\\\\\\n);\\\\n// assignment: halfW = w / 2\\\\n// operation: w/2\\\\n// argument: w\\\\n// number: 2\\\\nset num rand4145 2\\\\ndiv rand4144 arg3 rand4145\\\\n// assignment: halfH = h / 2\\\\n// operation: h/2\\\\n// argument: h\\\\n// number: 2\\\\nset num rand4147 2\\\\ndiv rand4146 arg4 rand4147\\\\n// method: self.quad(\\\\\\\\nx - halfW, y - halfH,\\\\\\\\nx - halfW, y + halfH,\\\\\\\\nx + halfW, y - halfH,\\\\\\\\nx + halfW, y + halfH,\\\\\\\\nborder\\\\\\\\n)\\\\n// constant: self\\\\n// operation: x - halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nsub rand4150 arg1 rand4144\\\\n// operation: y - halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nsub rand4151 arg2 rand4146\\\\n// operation: x - halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nsub rand4152 arg1 rand4144\\\\n// operation: y + halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nadd rand4153 arg2 rand4146\\\\n// operation: x + halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nadd rand4154 arg1 rand4144\\\\n// operation: y - halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nsub rand4155 arg2 rand4146\\\\n// operation: x + halfW\\\\n// argument: x\\\\n// variable: halfW\\\\nadd rand4156 arg1 rand4144\\\\n// operation: y + halfH\\\\n// argument: y\\\\n// variable: halfH\\\\nadd rand4157 arg2 rand4146\\\\n// argument: border\\\\nset str rand4149 methods\\\\nobj get arg0 rand4148 rand4149\\\\nset str rand4149 quad\\\\nobj get rand4148 rand4148 rand4149\\\\ncallvar rand4148 mthd::quad:1441a7909c087dbbe7ce59881b9df8b9 arg0 rand4150 rand4151 rand4152 rand4153 rand4154 rand4155 rand4156 rand4157 arg5\\\\nret\\\\n~\\\",\\\"icon\\\":\\\"~ mthd::icon:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use icon method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4168 attributes\\\\nobj get arg0 rand4167 rand4168\\\\nset str rand4168 type\\\\nobj get rand4167 rand4165 rand4168\\\\nset str rand4169 type attribute is null\\\\nerrnull rand4165 rand4169\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4166 pen\\\\neql rand4164 rand4165 rand4166\\\\njn rand4170 rand4164\\\\n// segment: raw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\")\\\\npen icn arg1 arg2 arg3 arg4 arg5 arg6\\\\n// statement: return\\\\nret\\\\n: rand4170\\\\n// execution: io:throw(\\\\\\\"cannot use icon method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use icon method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use icon method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use icon method on\\\\\\\"\\\\nset str rand4175 cannot use icon method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4178 attributes\\\\nobj get arg0 rand4177 rand4178\\\\nset str rand4178 type\\\\nobj get rand4177 rand4176 rand4178\\\\nset str rand4179 type attribute is null\\\\nerrnull rand4176 rand4179\\\\nadd rand4173 emptystring rand4175 space rand4176\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4174 surface\\\\nadd rand4172 emptystring rand4173 space rand4174\\\\ncall io:throw rand4172\\\\nret\\\\n~\\\",\\\"text\\\":\\\"~ mthd::text:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use text method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4190 attributes\\\\nobj get arg0 rand4189 rand4190\\\\nset str rand4190 type\\\\nobj get rand4189 rand4187 rand4190\\\\nset str rand4191 type attribute is null\\\\nerrnull rand4187 rand4191\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4188 pen\\\\neql rand4186 rand4187 rand4188\\\\njn rand4192 rand4186\\\\n// segment: raw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen text arg1 arg2 arg3 arg4 arg5 arg6\\\\\\\")\\\\npen text arg1 arg2 arg3 arg4 arg5 arg6\\\\n// statement: return\\\\nret\\\\n: rand4192\\\\n// execution: io:throw(\\\\\\\"cannot use text method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use text method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use text method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use text method on\\\\\\\"\\\\nset str rand4197 cannot use text method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4200 attributes\\\\nobj get arg0 rand4199 rand4200\\\\nset str rand4200 type\\\\nobj get rand4199 rand4198 rand4200\\\\nset str rand4201 type attribute is null\\\\nerrnull rand4198 rand4201\\\\nadd rand4195 emptystring rand4197 space rand4198\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4196 surface\\\\nadd rand4194 emptystring rand4195 space rand4196\\\\ncall io:throw rand4194\\\\nret\\\\n~\\\",\\\"loadFontFromUrl\\\":\\\"~ mthd::loadFontFromUrl:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfonturl arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use loadFontFromUrl method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfonturl arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4207 attributes\\\\nobj get arg0 rand4206 rand4207\\\\nset str rand4207 type\\\\nobj get rand4206 rand4204 rand4207\\\\nset str rand4208 type attribute is null\\\\nerrnull rand4204 rand4208\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4205 pen\\\\neql rand4203 rand4204 rand4205\\\\njn rand4209 rand4203\\\\n// segment: raw(\\\\\\\"pen loadfonturl arg1\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen loadfonturl arg1\\\\\\\")\\\\npen loadfonturl arg1\\\\n// statement: return\\\\nret\\\\n: rand4209\\\\n// execution: io:throw(\\\\\\\"cannot use loadFontFromUrl method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use loadFontFromUrl method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use loadFontFromUrl method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use loadFontFromUrl method on\\\\\\\"\\\\nset str rand4214 cannot use loadFontFromUrl method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4217 attributes\\\\nobj get arg0 rand4216 rand4217\\\\nset str rand4217 type\\\\nobj get rand4216 rand4215 rand4217\\\\nset str rand4218 type attribute is null\\\\nerrnull rand4215 rand4218\\\\nadd rand4212 emptystring rand4214 space rand4215\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4213 surface\\\\nadd rand4211 emptystring rand4212 space rand4213\\\\ncall io:throw rand4211\\\\nret\\\\n~\\\",\\\"loadFontData\\\":\\\"~ mthd::loadFontData:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfontdata arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use loadFontData method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen loadfontdata arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4224 attributes\\\\nobj get arg0 rand4223 rand4224\\\\nset str rand4224 type\\\\nobj get rand4223 rand4221 rand4224\\\\nset str rand4225 type attribute is null\\\\nerrnull rand4221 rand4225\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4222 pen\\\\neql rand4220 rand4221 rand4222\\\\njn rand4226 rand4220\\\\n// segment: raw(\\\\\\\"pen loadfontdata arg1\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen loadfontdata arg1\\\\\\\")\\\\npen loadfontdata arg1\\\\n// statement: return\\\\nret\\\\n: rand4226\\\\n// execution: io:throw(\\\\\\\"cannot use loadFontData method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use loadFontData method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use loadFontData method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use loadFontData method on\\\\\\\"\\\\nset str rand4231 cannot use loadFontData method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4234 attributes\\\\nobj get arg0 rand4233 rand4234\\\\nset str rand4234 type\\\\nobj get rand4233 rand4232 rand4234\\\\nset str rand4235 type attribute is null\\\\nerrnull rand4232 rand4235\\\\nadd rand4229 emptystring rand4231 space rand4232\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4230 surface\\\\nadd rand4228 emptystring rand4229 space rand4230\\\\ncall io:throw rand4228\\\\nret\\\\n~\\\",\\\"setColor\\\":\\\"~ mthd::setColor:1441a7909c087dbbe7ce59881b9df8b9\\\\n// segment: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen color arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\\\\\n\\\\\\\\nio:throw(\\\\\\\"cannot use setColor method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\");\\\\n// arg_branch: if (self.type == \\\\\\\"pen\\\\\\\") {\\\\\\\\nraw(\\\\\\\"pen color arg1\\\\\\\");\\\\\\\\nreturn;\\\\\\\\n}\\\\n// comparison: self.type == \\\\\\\"pen\\\\\\\"\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4241 attributes\\\\nobj get arg0 rand4240 rand4241\\\\nset str rand4241 type\\\\nobj get rand4240 rand4238 rand4241\\\\nset str rand4242 type attribute is null\\\\nerrnull rand4238 rand4242\\\\n// string: \\\\\\\"pen\\\\\\\"\\\\nset str rand4239 pen\\\\neql rand4237 rand4238 rand4239\\\\njn rand4243 rand4237\\\\n// segment: raw(\\\\\\\"pen color arg1\\\\\\\");\\\\\\\\nreturn;\\\\n// execution: raw(\\\\\\\"pen color arg1\\\\\\\")\\\\npen color arg1\\\\n// statement: return\\\\nret\\\\n: rand4243\\\\n// execution: io:throw(\\\\\\\"cannot use setColor method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\")\\\\n// operation: \\\\\\\"cannot use setColor method on\\\\\\\" + self.type + \\\\\\\"surface\\\\\\\"\\\\n// operation: \\\\\\\"cannot use setColor method on\\\\\\\"+self.type\\\\n// string: \\\\\\\"cannot use setColor method on\\\\\\\"\\\\nset str rand4248 cannot use setColor method on\\\\n// attribute: self.type\\\\n// constant: self\\\\nset str rand4251 attributes\\\\nobj get arg0 rand4250 rand4251\\\\nset str rand4251 type\\\\nobj get rand4250 rand4249 rand4251\\\\nset str rand4252 type attribute is null\\\\nerrnull rand4249 rand4252\\\\nadd rand4246 emptystring rand4248 space rand4249\\\\n// string: \\\\\\\"surface\\\\\\\"\\\\nset str rand4247 surface\\\\nadd rand4245 emptystring rand4246 space rand4247\\\\ncall io:throw rand4245\\\\nret\\\\n~\\\"},\\\"attributes\\\":{}}\\nset str rand4015 methods\\nobj get rand4010 rand4014 rand4015\\nset str rand4015 .cns\\nobj get rand4014 rand4014 rand4015\\ncallvar rand4014 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand4010 rand4013 arg1\\nobj set rand4011 rand4012 rand4010\\nret\\n~\"},\"attributes\":{}}\nset str rand4007 methods\nobj get rand4005 rand4006 rand4007\nset str rand4007 .cns\nobj get rand4006 rand4006 rand4007\ncallvar rand4006 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand4005 arg1\narr add rand4002 rand4005\nobj set rand4003 rand4004 rand4002\n: rand4000\nret\n~","clearDisplays":"~ mthd::clearDisplays:1441a7909c087dbbe7ce59881b9df8b9\n// segment: self.displays = [];\n// assignment: self.displays = []\n// constant: self\n// attribute: self.displays\n// constant: self\nset str rand4256 attributes\nobj get arg0 rand4255 rand4256\nset str rand4256 displays\nobj get rand4255 rand4254 rand4256\n// array: []\nset obj rand4254 []\nobj set rand4255 rand4256 rand4254\nret\n~"},"attributes":{}}
set str rand3492 methods
obj get rand3490 rand3491 rand3492
set str rand3492 .cns
obj get rand3491 rand3491 rand3492
callvar rand3491 mthd::constructor:1441a7909c087dbbe7ce59881b9df8b9 rand3490 
// execution: stateManager:initState(state, graphicsState)
// variable: state
// variable: graphicsState
call stateManager:initState rand3489 rand3490
// branch: forever {\nstate.inputState.update();\nstateManager:updateState(state, graphicsState);\n}
quitTo rand4257
: rand4257
// segment: state.inputState.update();\nstateManager:updateState(state, graphicsState);
// method: state.inputState.update()
// attribute: state.inputState
// variable: state
set str rand4260 attributes
obj get rand3489 rand4259 rand4260
set str rand4260 inputState
obj get rand4259 rand4258 rand4260
set str rand4262 methods
obj get rand4258 rand4261 rand4262
set str rand4262 update
obj get rand4261 rand4261 rand4262
callvar rand4261 mthd::update:1441a7909c087dbbe7ce59881b9df8b9 rand4258 
// execution: stateManager:updateState(state, graphicsState)
// variable: state
// variable: graphicsState
call stateManager:updateState rand3489 rand3490
quitTo rand4257
ret
~
// segment: import state, stateManager, graphics, fs, io;\n\nvoid main() {\nfs:init();\n\nstate = state:getDefault();\ngraphicsState = new GraphicsState();\nstateManager:initState(state, graphicsState);\nforever {\nstate.inputState.update();\nstateManager:updateState(state, graphicsState);\n}\n}
// import: import state, stateManager, graphics, fs, io
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// struct_def: struct Theme {\nstr accent = "#a600ff";\n\nstr primary = "#1a1d28";\nstr secondary = "#313f4e";\nstr tertiary = "#4f617d";\n\nstr text = "#b3cbf9";\n\nstr background = "#090a0b";\nstr selected = "#0059ff";\n}
// struct_def: struct Config {\n\nstr fontUrl = "https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff";\n\n\nstr embeddedCommandChar = "î¡ˆ";\n\nTheme theme = new Theme();\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct TimeState {\nnum frame = 0;\n\nnum uptime = 0;\nnum start = io:getCurrentMs();\nnum current = 0;\n\nvoid update() {\nself.current = io:getCurrentMs();\nself.uptime = self.current - self.start;\n}\n\nvoid updateFrame() {\nself.frame ++;\nself.update();\n}\n}
// struct_def: struct State {\nstr type = "terminal";\n\nbool needsInit = false;\nnum wait = 0;\n\nTimeState time = new TimeState();\n\nConfig config = new Config();\n\nInputState inputState = new InputState();\n}
// function: State getDefault() {\nreturn new State();\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// struct_def: struct Theme {\nstr accent = "#a600ff";\n\nstr primary = "#1a1d28";\nstr secondary = "#313f4e";\nstr tertiary = "#4f617d";\n\nstr text = "#b3cbf9";\n\nstr background = "#090a0b";\nstr selected = "#0059ff";\n}
// struct_def: struct Config {\n\nstr fontUrl = "https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff";\n\n\nstr embeddedCommandChar = "î¡ˆ";\n\nTheme theme = new Theme();\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct TimeState {\nnum frame = 0;\n\nnum uptime = 0;\nnum start = io:getCurrentMs();\nnum current = 0;\n\nvoid update() {\nself.current = io:getCurrentMs();\nself.uptime = self.current - self.start;\n}\n\nvoid updateFrame() {\nself.frame ++;\nself.update();\n}\n}
// struct_def: struct State {\nstr type = "terminal";\n\nbool needsInit = false;\nnum wait = 0;\n\nTimeState time = new TimeState();\n\nConfig config = new Config();\n\nInputState inputState = new InputState();\n}
// function: State getDefault() {\nreturn new State();\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: num sin(num deg) { return raw("sin .target arg0") }
// function: num cos(num deg) { return raw("cos .target arg0") }
// function: num tan(num deg) { return raw("tan .target arg0") }
// function: num round(num deg) { return raw("round .target arg0") }
// function: num floor(num deg) { return raw("floor .target arg0") }
// function: num ceiling(num deg) { return raw("ceiling .target arg0") }
// function: num lerp(num a, num b, num t) { return b - a * t + a }
// function: num mid(num a, num b) { return a + b / 2 }
// struct_def: struct Frame {\nnum x1;\nnum y1;\nnum x2;\nnum y2;\n\nvoid constructor(num x1, num y1, num x2, num y2) {\nself.x1 = x1;\nself.y1 = y1;\nself.x2 = x2;\nself.y2 = y2;\n}\n\nnum getX() { return math:mid(self.x1,self.x2) }\nnum getY() { return math:mid(self.y1,self.y2) }\nnum getW() { return self.x2 - self.x1 }\nnum getH() { return self.y2 - self.y1 }\n\nArr<num:2> getTL() { return [self.x1,self.y2] }\nArr<num:2> getT() { return [self.getX(),self.y2] }\nArr<num:2> getTR() { return [self.x2,self.y2] }\nArr<num:2> getL() { return [self.x1,self.getY()] }\nArr<num:2> getM() { return [self.getX(),self.getY()] }\nArr<num:2> getR() { return [self.x2,self.getY()] }\nArr<num:2> getBL() { return [self.x1,self.y1] }\nArr<num:2> getB() { return [self.getX(),self.y1] }\nArr<num:2> getBR() { return [self.x2,self.y1] }\n\nstr toString() {\nreturn "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"\n}\n}
// function: Frame getDefaultFrame() {\nscreenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);\n}
// function: Frame cloneFrame(Frame original) {\nreturn new Frame(original.x1, original.y1, original.x2, original.y2);\n}
// struct_def: struct Surface {\nstr type;\nFrame frame;\n\nvoid constructor(str type = "pen", Frame frame = getDefaultFrame()) {\nself.type = type;\nself.frame = frame;\n}\n\nvoid clear() {\nif (self.type == "pen") {\nraw("pen clear");\nreturn;\n}\n\nio:throw("cannot use clear method on" + self.type + "surface");\n}\nvoid line(num x1, num y1, num x2, num y2, num w) {\nif (self.type == "pen") {\nraw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");\nreturn;\n}\n\nio:throw("cannot use line method on" + self.type + "surface");\n}\n\nvoid path(Arr<Arr<num:2>> points, num w, bool loop = false) {\nnum len = points.length;\nif (!loop) {\nlen -= 1;\n}\nfor (i, len) {\nArr<num:2> point = points[i];\nArr<num:2> npoint = points[i + 1 % points.length];\nself.line(point[0], point[1], npoint[0], npoint[1], w);\n}\n}\nvoid tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {\nif (self.type == "pen") {\nraw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");\nreturn;\n}\n\nio:throw("cannot use tri method on" + self.type + "surface");\n}\nvoid quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {\n\nself.tri(x1,y1, x2,y2, x3,y3, border);\nself.tri(x2,y2, x3,y3, x4,y4, border);\n}\nvoid rect(num x1, num y1, num x2, num y2, num border) {\nself.quad(\nx1, y1,\nx1, y2,\nx2, y1,\nx2, y2,\nborder\n)\n}\nvoid square(num x, num y, num w, num h, num border) {\nhalfW = w / 2;\nhalfH = h / 2;\nself.quad(\nx - halfW, y - halfH,\nx - halfW, y + halfH,\nx + halfW, y - halfH,\nx + halfW, y + halfH,\nborder\n);\n}\nvoid icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use icon method on" + self.type + "surface");\n}\nvoid text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen text arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use text method on" + self.type + "surface");\n}\n\nvoid loadFontFromUrl(str url) {\nif (self.type == "pen") {\nraw("pen loadfonturl arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontFromUrl method on" + self.type + "surface");\n}\nvoid loadFontData(Obj<str> data) {\nif (self.type == "pen") {\nraw("pen loadfontdata arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontData method on" + self.type + "surface");\n}\n\nvoid setColor(str color) {\nif (self.type == "pen") {\nraw("pen color arg1");\nreturn;\n}\n\nio:throw("cannot use setColor method on" + self.type + "surface");\n}\n}
// struct_def: struct Display {\nSurface surface;\n\nvoid constructor(Frame frame) {\nself.surface = new Surface("pen", frame);\n}\n}
// struct_def: struct GraphicsState {\nSurface drawSurface;\nArr<Display> displays;\n\nvoid constructor() {\nself.newDisplay(getDefaultFrame());\nself.drawSurface = new Surface();\n}\n\nvoid newDisplay(Frame frame) {\nif (self?.displays) {\nself!.displays.append(new Display(frame));\n} else {\nself.displays = [new Display(frame)];\n}\n}\nvoid clearDisplays() {\nself.displays = [];\n}\n}
// struct_def: struct Icon {\nstr color;\nstr kind = "icn";\nstr type;\nstr data = "";\n\nvoid draw(Surface surface, num x, num y, num size) {\nif (self.kind == "icn") {\nsurface.icon(self.data, size, x, y);\n}\n}\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// auto_function: auto getGlobal<type>(str id, bool safe = true) {\ntype data = raw("globalget .target arg1");\nif (data == null) {\nio:throw("global" + id + "doesnt exist");\n}\nType dataType = typeof data;\nif (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}\nreturn data;\n}
// auto_function: auto setGlobal<type>(str id, type data) {\nraw("globalset arg1 arg2");\nreturn data;\n}
// function: bool hasGlobal(str id) {\ndata = raw("globalget .target arg1");\nreturn data != null;\n}
// struct_def: struct CloneData {\nObj<any> data;\n\nvoid constructor() {\nself.data = {};\n}\n\nauto set<t>(str key, t data) {\nself.data[key] = data;\nreturn data;\n}\n\nauto get<t>(str key, t data) {\nreturn self.data[key];\n}\n\nObj<any> getData() {\nreturn self!.data;\n}\n}
// function: str _createClone(str type, str code, any data) {\nreturn raw("clone create arg2 arg1 arg0 .target");\n}
// function: str _killClone(str id) {\nreturn raw("clone kill arg0");\n}
// auto_function: auto getCloneData<t>(str id) {\nreturn raw("clone getData .target arg1");\n}
// struct_def: struct Clone {\nstr id;\n\nvoid constructor(str type, str code, CloneData data) {\nself.id = _createClone(type,code,data.getData());\n}\n\nvoid kill() {\n_killClone(self!.id);\n}\nvoid continue() {\nd = getCloneData<Obj<any>>(self!.id);\nif (d) {\nd["continue"] = true;\n}\n}\n\nauto getCloneData<t>(str id) {\nreturn getCloneData<t>(id);\n}\n}
// struct_def: struct Process {\nClone clone;\nbool active = true;\n\nvoid constructor(str code, CloneData data) {\nself.clone = new Clone("fbl", code, data);\n}\n\nvoid kill() {\nself.active = false;\nself!.clone.kill();\n}\nvoid continue() {\nself!.clone.continue();\n}\n\nbool getAlive() {\nreturn raw("clone alive .target", self.clone.id);\n}\n\nauto getScope<t>() {\nreturn clone:getCloneData<t>(self!.clone!.id);\n}\n}
// struct_def: struct CloneData {\nObj<any> data;\n\nvoid constructor() {\nself.data = {};\n}\n\nauto set<t>(str key, t data) {\nself.data[key] = data;\nreturn data;\n}\n\nauto get<t>(str key, t data) {\nreturn self.data[key];\n}\n\nObj<any> getData() {\nreturn self!.data;\n}\n}
// function: str _createClone(str type, str code, any data) {\nreturn raw("clone create arg2 arg1 arg0 .target");\n}
// function: str _killClone(str id) {\nreturn raw("clone kill arg0");\n}
// auto_function: auto getCloneData<t>(str id) {\nreturn raw("clone getData .target arg1");\n}
// struct_def: struct Clone {\nstr id;\n\nvoid constructor(str type, str code, CloneData data) {\nself.id = _createClone(type,code,data.getData());\n}\n\nvoid kill() {\n_killClone(self!.id);\n}\nvoid continue() {\nd = getCloneData<Obj<any>>(self!.id);\nif (d) {\nd["continue"] = true;\n}\n}\n\nauto getCloneData<t>(str id) {\nreturn getCloneData<t>(id);\n}\n}
// function: Arr<str> splitChar(str text, str splitter, Arr<str> rules) {\nArr<str> tokens = [""];\n\n\nbool inDoubleQuotes = false;\n\n\nbool intactQuotes = rules.contains("intactQuotes");\n\nfor (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}\n\nreturn tokens;\n}
// function: str deEscape(str text) {\nstr newStr = "";\nfor (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}\nreturn newStr;\n}
// function: bool inBox(num x, num y, num x1, num y1, num x2, num y2) {\nreturn x > x1 && y > y1 && x < x2 && y < y2;\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// struct_def: struct Theme {\nstr accent = "#a600ff";\n\nstr primary = "#1a1d28";\nstr secondary = "#313f4e";\nstr tertiary = "#4f617d";\n\nstr text = "#b3cbf9";\n\nstr background = "#090a0b";\nstr selected = "#0059ff";\n}
// struct_def: struct Config {\n\nstr fontUrl = "https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff";\n\n\nstr embeddedCommandChar = "î¡ˆ";\n\nTheme theme = new Theme();\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct TimeState {\nnum frame = 0;\n\nnum uptime = 0;\nnum start = io:getCurrentMs();\nnum current = 0;\n\nvoid update() {\nself.current = io:getCurrentMs();\nself.uptime = self.current - self.start;\n}\n\nvoid updateFrame() {\nself.frame ++;\nself.update();\n}\n}
// struct_def: struct State {\nstr type = "terminal";\n\nbool needsInit = false;\nnum wait = 0;\n\nTimeState time = new TimeState();\n\nConfig config = new Config();\n\nInputState inputState = new InputState();\n}
// function: State getDefault() {\nreturn new State();\n}
// function: str _padNum(str string) {\nv = string;\nif (v.length == 1) {\nv = "0" ++ v;\n}\nreturn v;\n}
// function: str embedCommand(State state, str command, str data = "") {\nstr char = state.config.embeddedCommandChar;\nreturn char ++ _padNum(command.length.toString()) ++ command ++ _padNum(data.length.toString()) ++ data;\n}
// function: str embedColor(State state, str color) {\nreturn embedCommand(state, "color", color);\n}
// function: str embedBoldness(State state, num boldness) {\nreturn embedCommand(state, "boldness", boldness.toString());\n}
// function: str embedLocalDirection(State state, num direction) {\nreturn embedCommand(state, "ldirection", direction.toString());\n}
// function: str embedResetBoldness(State state) {\nreturn embedCommand(state, "rboldness");\n}
// function: str embedResetLocalDirection(State state) {\nreturn embedCommand(state, "rdirection");\n}
// function: str embedReset(State state) {\nreturn embedCommand(state, "r");\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// auto_function: auto getGlobal<type>(str id, bool safe = true) {\ntype data = raw("globalget .target arg1");\nif (data == null) {\nio:throw("global" + id + "doesnt exist");\n}\nType dataType = typeof data;\nif (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}\nreturn data;\n}
// auto_function: auto setGlobal<type>(str id, type data) {\nraw("globalset arg1 arg2");\nreturn data;\n}
// function: bool hasGlobal(str id) {\ndata = raw("globalget .target arg1");\nreturn data != null;\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: Arr<str> splitFilePath(str string) {\nnum i = 0;\nwhile ((str char = string[i]) != "/" && i < string.length) { i ++; }\nstr volume = string.slice(0,i);\n\nnum pathI = string.length - 1;\nwhile ((str char = string[pathI]) != "/" && pathI > 0) { pathI --; }\nstr path = string.slice(i+1, pathI);\n\nnum typeI = string.length - 1;\nwhile ((str char = string[typeI]) != "." && typeI > 0) { typeI --; }\n\nif (typeI != 0) {\nstr type = string.slice(typeI+1);\n\nstr name = string.slice(pathI+1, typeI);\n\nreturn [volume, path, name, type];\n} else {\nio:throw("invalid file path");\n}\nreturn [];\n}
// struct_def: struct FilePath {\nstr volumeName;\nstr path;\nstr name;\nstr type;\n\nvoid constructor(str path) {\nArr<str> tokens = splitFilePath(path);\nself.volumeName = tokens[0];\nself.path = tokens[1];\nself.name = tokens[2];\nself.type = tokens[3];\n}\n\nstr toString() {\nreturn self.volumeName ++ "/" ++ self.path ++ "/" ++ self.name ++ "." ++ self.type;\n}\n}
// struct_def: struct Volume {\nstr source;\n\nvoid constructor(str source) {\nif (!["flf"].contains(source)) {\nio:throw("unknown volume source" + source);\n}\nself.source = source;\n}\n\nstr readText(FilePath path) {\nif (self.source == "flf") {\nread = str(str _) {\nreturn raw("fs get .target arg0");\n}\nstr data = read(path.toString());\nreturn data;\n}\nio:throw("cannot read from source of type" + self.source);\nreturn "";\n}\n}
// struct_def: struct FileSystem {\nObj<Volume> volumes = {};\n\nvoid addVolume(str name, Volume volume) {\nif (self.volumes.keys().contains(name)) {\nio:throw("volume" + name + "already exists.");\n}\nself.volumes[name] = volume;\n}\n}
// struct_def: struct FileHandle {\nFilePath path;\nFileSystem system;\n\nvoid constructor(FilePath path, FileSystem system) {\nself.path = path;\nself.system = system;\n}\n\nstr readText() {\nstr volumeName = self.path.volumeName;\nif (self.system.volumes.keys().contains(volumeName)) {\nVolume volume = self.system.volumes[volumeName];\nreturn volume.readText(self.path);\n} else {\nio:throw("unknown volume" + volumeName);\n}\nreturn "";\n}\n}
// function: FileHandle open(str path) {\nreturn new FileHandle(new FilePath(path), globals:getGlobal<FileSystem>("fs", false));\n}
// function: void init() {\nFileSystem fs = new FileSystem();\nglobals:setGlobal<FileSystem>("fs", fs);\n\nfs.addVolume("sys", new Volume("flf"));\n}
// struct_def: struct TerminalResult {\nbool successful;\nstr text;\n\nvoid constructor(bool successful, str text = "") {\nself.successful = successful;\nself.text = text;\n}\n}
// struct_def: struct TerminalCommand {\nstr path;\n\nvoid constructor(str path = "") {\nself.path = path;\n}\n\nTerminalResult execute(TerminalInstance instance, Arr<str> args, KeyMap keyMap, State state, GraphicsState graphicsState) {\nFileHandle handle = fs:open(self.path);\nCloneData data = new CloneData();\ndata.set<TerminalInstance>("arg0", instance);\ndata.set<Arr<str>>("arg1", args);\ndata.set<KeyMap>("arg2", keyMap);\ndata.set<State>("arg3", state);\ndata.set<GraphicsState>("arg4", graphicsState);\nProcess proc = new Process(handle.readText(), data);\ninstance.process = proc;\nreturn new TerminalResult(true);\n}\n}
// struct_def: struct TerminalTheme {\nstr text = "#fff";\nstr warn = "#e37900";\nstr error = "#bf0000";\n}
// struct_def: struct TerminalContext {\nState state;\n\nObj<TerminalCommand> commands;\n\nvoid constructor(State state, Obj<TerminalCommand> commands = {}) {\nself.state = state;\nself.commands = commands;\n}\n\nvoid registerCommand(str id, TerminalCommand command) {\nself!.commands[id] = command;\n}\n}
// struct_def: struct TerminalInstance {\nstr text = "";\nstr currentCmd = "";\nbool hasLine = false;\n\nProcess process;\nTerminalContext context;\nTerminalTheme theme = new TerminalTheme();\n\nKeyMap map;\n\nvoid constructor(TerminalContext context, KeyMap map) {\nself.context = context;\nself.map = map;\n}\nvoid update() {\nif (self?.process) {\nif(!self!.process.getAlive()) {\nself.process = null;\n} else {\nself.process.continue();\n}\n}\n}\n\nvoid clear() {\nself.text = "";\nself.currentCmd = "";\nself.hasLine = false;\n}\n\nstr _destr(str value) {\nif (value[0] == "\"" && value[value.length - 1] == "\"") {\nreturn value.slice(1,-1);\n}\nreturn value;\n}\nTerminalResult runCommand(str cmd, State state, GraphicsState graphicsState) {\nArr<str> tokens = utils:splitChar(cmd, " ", ["intactQuotes"]);\n\nArr<str> k = self.context.commands.keys();\nif (k.contains(tokens[0])) {\nArr<str> args = [];\nstr key = tokens.shift();\nfor (i, tokens.length) {\nelem = tokens[i];\nargs.append(self._destr(elem).toString());\n}\nTerminalCommand command = self.context.commands[key];\nreturn command.execute(self, args, self.map, state, graphicsState);\n}\n\nprint("unknown command:", tokens[0], "list:", k);\nreturn new TerminalResult(false, "unknown command \'" ++ tokens[0] ++ "\'");\n}\n}
// function: void init(State state, GraphicsState graphicsState) {\ngraphicsState.drawSurface.loadFontFromUrl(state.config.fontUrl);\nglobals:setGlobal<TerminalContext>("terminalContext", new TerminalContext(state, {\n"echo": new TerminalCommand("sys/terminal/echo.fbl"),\n"clear": new TerminalCommand("sys/terminal/clear.fbl"),\n\n"state": new TerminalCommand("sys/terminal/state.fbl"),\n\n"spinny": new TerminalCommand("sys/terminal/spinny.fbl"),\n"fib": new TerminalCommand("sys/terminal/fib.fbl"),\n"fltr": new TerminalCommand("sys/terminal/fltr.fbl"),\n}));\n\nTerminalContext context = globals:getGlobal<TerminalContext>("terminalContext");\nglobals:setGlobal<TerminalInstance>("terminalInstance", new TerminalInstance(context, state.inputState.map));\n}
// function: void runCommand(str cmd, TerminalInstance termInstance, State state, GraphicsState graphicsState) {\nTerminalResult result = termInstance.runCommand(cmd, state, graphicsState);\n\nif (!result.successful) {\ntermInstance.text ++= text:embedColor(termInstance.context.state, termInstance.theme.warn);\n}\ntermInstance.text ++= result.text;\n}
// function: void newLine(TerminalInstance termInstance) {\nif (termInstance.text.length > 0) {\ntermInstance.text ++= "\n";\n}\ntermInstance.text ++= text:embedReset(termInstance.context.state);\ntermInstance.text ++= "> ";\n}
// function: void handleInput(State state, GraphicsState graphicsState) {\nTerminalInstance termInstance = globals:getGlobal<TerminalInstance>("terminalInstance");\n\ntermInstance.update();\n\nbool inControl = true;\nif (termInstance?.process) {\nProcess proc = termInstance!.process;\ninControl = false;\n}\n\nif ((!termInstance.hasLine) &&& inControl) {\nnewLine(termInstance);\ntermInstance.hasLine = true;\n}\n\nArr<str> keys = state.inputState.map.keys;\nwhile (keys.length > 0) {\nstr key = keys.pop();\nif (state.inputState.map.downSpecial.contains("Control")) {\nif (key == "c" && termInstance?.process) {\nProcess proc = termInstance!.process;\nproc.kill();\n}\n}\nif (inControl) {\ntermInstance.text ++= key;\ntermInstance.currentCmd ++= key;\n}\n}\n\nArr<str> special = state.inputState.map.special;\nwhile (special.length > 0) {\nstr key = special.pop();\nif (inControl) {\nif (key == "Enter" && termInstance.currentCmd.length > 0) {\ntermInstance.text ++= "\n";\nrunCommand(termInstance.currentCmd, termInstance, state, graphicsState);\ntermInstance.currentCmd = "";\ntermInstance.hasLine = false;\n}\nif (key == "Backspace" && termInstance.currentCmd.length > 0) {\ntermInstance.text = termInstance.text.slice(0,-1);\ntermInstance.currentCmd = termInstance.currentCmd.slice(0,-1);\n}\n}\n}\nglobals:setGlobal<TerminalInstance>("terminalInstance", termInstance);\n}
// function: void drawMain(State state, GraphicsState graphicsState) {\nSurface drawSurf = graphicsState.drawSurface;\nFrame drawFrame = drawSurf.frame;\nTerminalInstance termInstance = globals:getGlobal<TerminalInstance>("terminalInstance");\n\n{\ndrawSurf.setColor("#0e0d10");\ndrawSurf.square(drawFrame.getX(), drawFrame.getY(), drawFrame.getW(), drawFrame.getH(), 0);\n}\n{\ndrawSurf.setColor("#fff");\nArr<num> pos = drawFrame.getTL();\ndrawSurf.text(termInstance.text, 10, pos[0] + 5, pos[1] - 17.5);\n}\n}
// function: void update(State state, GraphicsState graphicsState) {\nhandleInput(state, graphicsState);\ndrawMain(state, graphicsState);\n}
// struct_def: struct CloneData {\nObj<any> data;\n\nvoid constructor() {\nself.data = {};\n}\n\nauto set<t>(str key, t data) {\nself.data[key] = data;\nreturn data;\n}\n\nauto get<t>(str key, t data) {\nreturn self.data[key];\n}\n\nObj<any> getData() {\nreturn self!.data;\n}\n}
// function: str _createClone(str type, str code, any data) {\nreturn raw("clone create arg2 arg1 arg0 .target");\n}
// function: str _killClone(str id) {\nreturn raw("clone kill arg0");\n}
// auto_function: auto getCloneData<t>(str id) {\nreturn raw("clone getData .target arg1");\n}
// struct_def: struct Clone {\nstr id;\n\nvoid constructor(str type, str code, CloneData data) {\nself.id = _createClone(type,code,data.getData());\n}\n\nvoid kill() {\n_killClone(self!.id);\n}\nvoid continue() {\nd = getCloneData<Obj<any>>(self!.id);\nif (d) {\nd["continue"] = true;\n}\n}\n\nauto getCloneData<t>(str id) {\nreturn getCloneData<t>(id);\n}\n}
// struct_def: struct Process {\nClone clone;\nbool active = true;\n\nvoid constructor(str code, CloneData data) {\nself.clone = new Clone("fbl", code, data);\n}\n\nvoid kill() {\nself.active = false;\nself!.clone.kill();\n}\nvoid continue() {\nself!.clone.continue();\n}\n\nbool getAlive() {\nreturn raw("clone alive .target", self.clone.id);\n}\n\nauto getScope<t>() {\nreturn clone:getCloneData<t>(self!.clone!.id);\n}\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// auto_function: auto getGlobal<type>(str id, bool safe = true) {\ntype data = raw("globalget .target arg1");\nif (data == null) {\nio:throw("global" + id + "doesnt exist");\n}\nType dataType = typeof data;\nif (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}\nreturn data;\n}
// auto_function: auto setGlobal<type>(str id, type data) {\nraw("globalset arg1 arg2");\nreturn data;\n}
// function: bool hasGlobal(str id) {\ndata = raw("globalget .target arg1");\nreturn data != null;\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// struct_def: struct CloneData {\nObj<any> data;\n\nvoid constructor() {\nself.data = {};\n}\n\nauto set<t>(str key, t data) {\nself.data[key] = data;\nreturn data;\n}\n\nauto get<t>(str key, t data) {\nreturn self.data[key];\n}\n\nObj<any> getData() {\nreturn self!.data;\n}\n}
// function: str _createClone(str type, str code, any data) {\nreturn raw("clone create arg2 arg1 arg0 .target");\n}
// function: str _killClone(str id) {\nreturn raw("clone kill arg0");\n}
// auto_function: auto getCloneData<t>(str id) {\nreturn raw("clone getData .target arg1");\n}
// struct_def: struct Clone {\nstr id;\n\nvoid constructor(str type, str code, CloneData data) {\nself.id = _createClone(type,code,data.getData());\n}\n\nvoid kill() {\n_killClone(self!.id);\n}\nvoid continue() {\nd = getCloneData<Obj<any>>(self!.id);\nif (d) {\nd["continue"] = true;\n}\n}\n\nauto getCloneData<t>(str id) {\nreturn getCloneData<t>(id);\n}\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// auto_function: auto getGlobal<type>(str id, bool safe = true) {\ntype data = raw("globalget .target arg1");\nif (data == null) {\nio:throw("global" + id + "doesnt exist");\n}\nType dataType = typeof data;\nif (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}\nreturn data;\n}
// auto_function: auto setGlobal<type>(str id, type data) {\nraw("globalset arg1 arg2");\nreturn data;\n}
// function: bool hasGlobal(str id) {\ndata = raw("globalget .target arg1");\nreturn data != null;\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: Arr<str> splitFilePath(str string) {\nnum i = 0;\nwhile ((str char = string[i]) != "/" && i < string.length) { i ++; }\nstr volume = string.slice(0,i);\n\nnum pathI = string.length - 1;\nwhile ((str char = string[pathI]) != "/" && pathI > 0) { pathI --; }\nstr path = string.slice(i+1, pathI);\n\nnum typeI = string.length - 1;\nwhile ((str char = string[typeI]) != "." && typeI > 0) { typeI --; }\n\nif (typeI != 0) {\nstr type = string.slice(typeI+1);\n\nstr name = string.slice(pathI+1, typeI);\n\nreturn [volume, path, name, type];\n} else {\nio:throw("invalid file path");\n}\nreturn [];\n}
// struct_def: struct FilePath {\nstr volumeName;\nstr path;\nstr name;\nstr type;\n\nvoid constructor(str path) {\nArr<str> tokens = splitFilePath(path);\nself.volumeName = tokens[0];\nself.path = tokens[1];\nself.name = tokens[2];\nself.type = tokens[3];\n}\n\nstr toString() {\nreturn self.volumeName ++ "/" ++ self.path ++ "/" ++ self.name ++ "." ++ self.type;\n}\n}
// struct_def: struct Volume {\nstr source;\n\nvoid constructor(str source) {\nif (!["flf"].contains(source)) {\nio:throw("unknown volume source" + source);\n}\nself.source = source;\n}\n\nstr readText(FilePath path) {\nif (self.source == "flf") {\nread = str(str _) {\nreturn raw("fs get .target arg0");\n}\nstr data = read(path.toString());\nreturn data;\n}\nio:throw("cannot read from source of type" + self.source);\nreturn "";\n}\n}
// struct_def: struct FileSystem {\nObj<Volume> volumes = {};\n\nvoid addVolume(str name, Volume volume) {\nif (self.volumes.keys().contains(name)) {\nio:throw("volume" + name + "already exists.");\n}\nself.volumes[name] = volume;\n}\n}
// struct_def: struct FileHandle {\nFilePath path;\nFileSystem system;\n\nvoid constructor(FilePath path, FileSystem system) {\nself.path = path;\nself.system = system;\n}\n\nstr readText() {\nstr volumeName = self.path.volumeName;\nif (self.system.volumes.keys().contains(volumeName)) {\nVolume volume = self.system.volumes[volumeName];\nreturn volume.readText(self.path);\n} else {\nio:throw("unknown volume" + volumeName);\n}\nreturn "";\n}\n}
// function: FileHandle open(str path) {\nreturn new FileHandle(new FilePath(path), globals:getGlobal<FileSystem>("fs", false));\n}
// function: void init() {\nFileSystem fs = new FileSystem();\nglobals:setGlobal<FileSystem>("fs", fs);\n\nfs.addVolume("sys", new Volume("flf"));\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: num sin(num deg) { return raw("sin .target arg0") }
// function: num cos(num deg) { return raw("cos .target arg0") }
// function: num tan(num deg) { return raw("tan .target arg0") }
// function: num round(num deg) { return raw("round .target arg0") }
// function: num floor(num deg) { return raw("floor .target arg0") }
// function: num ceiling(num deg) { return raw("ceiling .target arg0") }
// function: num lerp(num a, num b, num t) { return b - a * t + a }
// function: num mid(num a, num b) { return a + b / 2 }
// struct_def: struct Frame {\nnum x1;\nnum y1;\nnum x2;\nnum y2;\n\nvoid constructor(num x1, num y1, num x2, num y2) {\nself.x1 = x1;\nself.y1 = y1;\nself.x2 = x2;\nself.y2 = y2;\n}\n\nnum getX() { return math:mid(self.x1,self.x2) }\nnum getY() { return math:mid(self.y1,self.y2) }\nnum getW() { return self.x2 - self.x1 }\nnum getH() { return self.y2 - self.y1 }\n\nArr<num:2> getTL() { return [self.x1,self.y2] }\nArr<num:2> getT() { return [self.getX(),self.y2] }\nArr<num:2> getTR() { return [self.x2,self.y2] }\nArr<num:2> getL() { return [self.x1,self.getY()] }\nArr<num:2> getM() { return [self.getX(),self.getY()] }\nArr<num:2> getR() { return [self.x2,self.getY()] }\nArr<num:2> getBL() { return [self.x1,self.y1] }\nArr<num:2> getB() { return [self.getX(),self.y1] }\nArr<num:2> getBR() { return [self.x2,self.y1] }\n\nstr toString() {\nreturn "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"\n}\n}
// function: Frame getDefaultFrame() {\nscreenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);\n}
// function: Frame cloneFrame(Frame original) {\nreturn new Frame(original.x1, original.y1, original.x2, original.y2);\n}
// struct_def: struct Surface {\nstr type;\nFrame frame;\n\nvoid constructor(str type = "pen", Frame frame = getDefaultFrame()) {\nself.type = type;\nself.frame = frame;\n}\n\nvoid clear() {\nif (self.type == "pen") {\nraw("pen clear");\nreturn;\n}\n\nio:throw("cannot use clear method on" + self.type + "surface");\n}\nvoid line(num x1, num y1, num x2, num y2, num w) {\nif (self.type == "pen") {\nraw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");\nreturn;\n}\n\nio:throw("cannot use line method on" + self.type + "surface");\n}\n\nvoid path(Arr<Arr<num:2>> points, num w, bool loop = false) {\nnum len = points.length;\nif (!loop) {\nlen -= 1;\n}\nfor (i, len) {\nArr<num:2> point = points[i];\nArr<num:2> npoint = points[i + 1 % points.length];\nself.line(point[0], point[1], npoint[0], npoint[1], w);\n}\n}\nvoid tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {\nif (self.type == "pen") {\nraw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");\nreturn;\n}\n\nio:throw("cannot use tri method on" + self.type + "surface");\n}\nvoid quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {\n\nself.tri(x1,y1, x2,y2, x3,y3, border);\nself.tri(x2,y2, x3,y3, x4,y4, border);\n}\nvoid rect(num x1, num y1, num x2, num y2, num border) {\nself.quad(\nx1, y1,\nx1, y2,\nx2, y1,\nx2, y2,\nborder\n)\n}\nvoid square(num x, num y, num w, num h, num border) {\nhalfW = w / 2;\nhalfH = h / 2;\nself.quad(\nx - halfW, y - halfH,\nx - halfW, y + halfH,\nx + halfW, y - halfH,\nx + halfW, y + halfH,\nborder\n);\n}\nvoid icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use icon method on" + self.type + "surface");\n}\nvoid text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen text arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use text method on" + self.type + "surface");\n}\n\nvoid loadFontFromUrl(str url) {\nif (self.type == "pen") {\nraw("pen loadfonturl arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontFromUrl method on" + self.type + "surface");\n}\nvoid loadFontData(Obj<str> data) {\nif (self.type == "pen") {\nraw("pen loadfontdata arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontData method on" + self.type + "surface");\n}\n\nvoid setColor(str color) {\nif (self.type == "pen") {\nraw("pen color arg1");\nreturn;\n}\n\nio:throw("cannot use setColor method on" + self.type + "surface");\n}\n}
// struct_def: struct Display {\nSurface surface;\n\nvoid constructor(Frame frame) {\nself.surface = new Surface("pen", frame);\n}\n}
// struct_def: struct GraphicsState {\nSurface drawSurface;\nArr<Display> displays;\n\nvoid constructor() {\nself.newDisplay(getDefaultFrame());\nself.drawSurface = new Surface();\n}\n\nvoid newDisplay(Frame frame) {\nif (self?.displays) {\nself!.displays.append(new Display(frame));\n} else {\nself.displays = [new Display(frame)];\n}\n}\nvoid clearDisplays() {\nself.displays = [];\n}\n}
// struct_def: struct Icon {\nstr color;\nstr kind = "icn";\nstr type;\nstr data = "";\n\nvoid draw(Surface surface, num x, num y, num size) {\nif (self.kind == "icn") {\nsurface.icon(self.data, size, x, y);\n}\n}\n}
// function: Arr<str> splitChar(str text, str splitter, Arr<str> rules) {\nArr<str> tokens = [""];\n\n\nbool inDoubleQuotes = false;\n\n\nbool intactQuotes = rules.contains("intactQuotes");\n\nfor (i, text.length) {\nstr char = text[i];\n\nif (char == "\\") {\ntokens[tokens.length-1] ++= char;\ncontinue;\n}\n\nif (intactQuotes) {\nif (char == "\"") {\ninDoubleQuotes = !inDoubleQuotes;\n}\n}\n\nif (!inDoubleQuotes) {\nif (char == splitter) {\ntokens.append("");\ncontinue;\n}\n}\n\ntokens[tokens.length-1] = tokens[tokens.length-1] ++ char;\n}\n\nreturn tokens;\n}
// function: str deEscape(str text) {\nstr newStr = "";\nfor (i, text.length) {\nstr char = text[i];\nif (char == "\\") {\nchar = text[i++];\nif (char == "n") {\nnewStr ++= "\n";\ncontinue;\n}\nnewStr ++= char;\ncontinue;\n}\n}\nreturn newStr;\n}
// function: bool inBox(num x, num y, num x1, num y1, num x2, num y2) {\nreturn x > x1 && y > y1 && x < x2 && y < y2;\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct WindowFunction {\nstr preset;\n}
// struct_def: struct WindowButton {\nWindowFunction function;\nIcon icon;\n\nvoid constructor(Icon icon) {\nself.icon = icon;\n}\n\nvoid update(num x, num y, num size, Theme theme, Window win, Surface surface) {\nnum hSize = size / 2;\nbool hovered = utils:inBox(input:getMouseX(), input:getMouseY(), x - hSize, y - hSize, x + hSize, y + hSize);\nsurface.setColor(hovered ? theme.tertiary : theme.secondary);\nsurface.square(x, y, size, size, 10);\nif (self?.icon) {\nself.icon.draw(surface, x, y, size);\n}\n}\n}
// struct_def: struct WindowRenderSettings {\nbool renderBase = true;\nbool renderMenuBar = true;\n\n\n}
// struct_def: struct Window {\nSurface surface;\nFrame frame;\nFrame contentFrame;\n\nArr<WindowButton> buttons = [\nnew WindowButton(new Icon())\n];\n\nstr title = "Window";\n\nWindowRenderSettings renderSettings = new WindowRenderSettings();\n\nvoid constructor(Frame frame) {\nself.frame = frame;\nself.surface = new Surface("pen", self!.frame);\n}\n}
// struct_def: struct WindowManagerProvider {\nstr path;\nProcess proc;\n\nvoid constructor(str path) {\nself.path = path;\n}\n\nvoid init(State state, GraphicsState graphicsState, Obj<Window> windows) {\nFileHandle handle = fs:open(self.path);\n\nCloneData data = new CloneData();\ndata.set<State>("arg0", state);\ndata.set<GraphicsState>("arg1", graphicsState);\ndata.set<Obj<Window>>("arg2", windows);\nself.proc = new Process(handle.readText(), data);\n}\nvoid continue() {\nif (self?.proc) {\nself.proc.continue();\n} else {\nio:throw("no wm to continue");\n}\n}\n}
// struct_def: struct WindowManagerContext {\nObj<WindowManagerProvider> providers = {};\nstr currentProvider;\n\nObj<Window> windows = {\n"myID": new Window(new Frame(-300,-200, 300,200))\n};\n\nvoid update() {\nif (!self?.currentProvider) {\nio:throw("no current wm provider");\n}\nWindowManagerProvider provider = self.providers[self!.currentProvider];\nprovider.continue();\n}\n\nvoid setCurrentProvider(str name) {\nif (!self.providers.keys().contains(name)) {\nio:throw("unknown provider" + name);\n}\nself.currentProvider = name;\n}\nvoid startProvider(State state, GraphicsState graphicsState) {\nprint(self);\nif (!self?.currentProvider) {\nio:throw("no current wm provider");\n}\nif (!self.providers.keys().contains(self!.currentProvider)) {\nio:throw("unknown provider" + self!.currentProvider);\n}\nWindowManagerProvider provider = self.providers[self!.currentProvider];\nprovider.init(state, graphicsState, self.windows);\n}\nvoid addProvider(str name, WindowManagerProvider provider) {\nself.providers[name] = provider;\n}\n}
// function: void init(State state, GraphicsState graphicsState) {\nWindowManagerContext ctx = globals:setGlobal<WindowManagerContext>("wmContext", new WindowManagerContext());\n\nctx.addProvider("normal", new WindowManagerProvider("sys/wms/normal.fbl"));\n\nctx.setCurrentProvider("normal");\nctx.startProvider(state, graphicsState);\n\ngraphicsState.drawSurface.loadFontFromUrl(state.config.fontUrl);\n}
// function: void update(State state, GraphicsState graphicsState) {\nWindowManagerContext ctx = globals:getGlobal<WindowManagerContext>("wmContext");\n\nctx.update();\n}
// struct_def: struct DesktopContext {\n\n}
// function: void init(State state, GraphicsState graphicsState) {\nWM:init(state, graphicsState);\n}
// function: void update(State state, GraphicsState graphicsState) {\nWM:update(state, graphicsState);\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// struct_def: struct Theme {\nstr accent = "#a600ff";\n\nstr primary = "#1a1d28";\nstr secondary = "#313f4e";\nstr tertiary = "#4f617d";\n\nstr text = "#b3cbf9";\n\nstr background = "#090a0b";\nstr selected = "#0059ff";\n}
// struct_def: struct Config {\n\nstr fontUrl = "https://raw.githubusercontent.com/Mistium/Origin-OS/refs/heads/main/Fonts/origin.ojff";\n\n\nstr embeddedCommandChar = "î¡ˆ";\n\nTheme theme = new Theme();\n}
// function: num getMouseX() {\nreturn raw("const mousex .target");\n}
// function: num getMouseY() {\nreturn raw("const mousey .target");\n}
// function: Arr<Obj<str>> getKeys() {\nreturn raw("keyhistory getkeys .target");\n}
// function: Obj<str> shiftKeys() {\nreturn raw("keyhistory shift .target");\n}
// function: Arr<Obj<str>> getDown() {\nreturn raw("keyhistory getdown .target");\n}
// function: void clearKeys() {\nraw("keyhistory delkeys");\n}
// function: bool isSpecialKey(str key) {\nspecialChars = [\n'Backspace', 'Tab', 'Enter', 'Shift', 'Control', 'Alt', 'CapsLock',\n'Escape', 'Space', 'PageUp', 'PageDown', 'End', 'Home',\n'ArrowLeft', 'ArrowUp', 'ArrowRight', 'ArrowDown',\n'Insert', 'Delete', 'Meta', 'ContextMenu',\n'AltGraph', 'ScrollLock', 'NumLock', 'Pause', 'Clear',\n'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'F10', 'F11', 'F12'\n];\n\nif (specialChars.contains(key)) {\nreturn true;\n}\nreturn false;\n}
// struct_def: struct KeyMap {\nArr<str> keys = [];\nArr<str> special = [];\n\nArr<str> downKeys = [];\nArr<str> downSpecial = [];\n\nvoid update() {\nArr<Obj<str>> keys = getKeys();\nfor(i, keys.length) {\nObj<str> key = shiftKeys();\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.keys.append(data);\n} else {\nself.special.append(data);\n}\n}\n\nself.downKeys = [];\nself.downSpecial = [];\nArr<Obj<str>> down = getDown();\nfor (i, down.length) {\nObj<str> key = down[i];\n\nstr data = key["data"];\nif (!isSpecialKey(data)) {\nself.downKeys.append(data);\n} else {\nself.downSpecial.append(data);\n}\n}\n}\n}
// struct_def: struct InputState {\nKeyMap map = new KeyMap();\n\nvoid constructor() {\nclearKeys();\n}\n\nvoid update() {\nself.map.update();\n}\n}
// struct_def: struct TimeState {\nnum frame = 0;\n\nnum uptime = 0;\nnum start = io:getCurrentMs();\nnum current = 0;\n\nvoid update() {\nself.current = io:getCurrentMs();\nself.uptime = self.current - self.start;\n}\n\nvoid updateFrame() {\nself.frame ++;\nself.update();\n}\n}
// struct_def: struct State {\nstr type = "terminal";\n\nbool needsInit = false;\nnum wait = 0;\n\nTimeState time = new TimeState();\n\nConfig config = new Config();\n\nInputState inputState = new InputState();\n}
// function: State getDefault() {\nreturn new State();\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: num sin(num deg) { return raw("sin .target arg0") }
// function: num cos(num deg) { return raw("cos .target arg0") }
// function: num tan(num deg) { return raw("tan .target arg0") }
// function: num round(num deg) { return raw("round .target arg0") }
// function: num floor(num deg) { return raw("floor .target arg0") }
// function: num ceiling(num deg) { return raw("ceiling .target arg0") }
// function: num lerp(num a, num b, num t) { return b - a * t + a }
// function: num mid(num a, num b) { return a + b / 2 }
// struct_def: struct Frame {\nnum x1;\nnum y1;\nnum x2;\nnum y2;\n\nvoid constructor(num x1, num y1, num x2, num y2) {\nself.x1 = x1;\nself.y1 = y1;\nself.x2 = x2;\nself.y2 = y2;\n}\n\nnum getX() { return math:mid(self.x1,self.x2) }\nnum getY() { return math:mid(self.y1,self.y2) }\nnum getW() { return self.x2 - self.x1 }\nnum getH() { return self.y2 - self.y1 }\n\nArr<num:2> getTL() { return [self.x1,self.y2] }\nArr<num:2> getT() { return [self.getX(),self.y2] }\nArr<num:2> getTR() { return [self.x2,self.y2] }\nArr<num:2> getL() { return [self.x1,self.getY()] }\nArr<num:2> getM() { return [self.getX(),self.getY()] }\nArr<num:2> getR() { return [self.x2,self.getY()] }\nArr<num:2> getBL() { return [self.x1,self.y1] }\nArr<num:2> getB() { return [self.getX(),self.y1] }\nArr<num:2> getBR() { return [self.x2,self.y1] }\n\nstr toString() {\nreturn "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"\n}\n}
// function: Frame getDefaultFrame() {\nscreenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);\n}
// function: Frame cloneFrame(Frame original) {\nreturn new Frame(original.x1, original.y1, original.x2, original.y2);\n}
// struct_def: struct Surface {\nstr type;\nFrame frame;\n\nvoid constructor(str type = "pen", Frame frame = getDefaultFrame()) {\nself.type = type;\nself.frame = frame;\n}\n\nvoid clear() {\nif (self.type == "pen") {\nraw("pen clear");\nreturn;\n}\n\nio:throw("cannot use clear method on" + self.type + "surface");\n}\nvoid line(num x1, num y1, num x2, num y2, num w) {\nif (self.type == "pen") {\nraw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");\nreturn;\n}\n\nio:throw("cannot use line method on" + self.type + "surface");\n}\n\nvoid path(Arr<Arr<num:2>> points, num w, bool loop = false) {\nnum len = points.length;\nif (!loop) {\nlen -= 1;\n}\nfor (i, len) {\nArr<num:2> point = points[i];\nArr<num:2> npoint = points[i + 1 % points.length];\nself.line(point[0], point[1], npoint[0], npoint[1], w);\n}\n}\nvoid tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {\nif (self.type == "pen") {\nraw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");\nreturn;\n}\n\nio:throw("cannot use tri method on" + self.type + "surface");\n}\nvoid quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {\n\nself.tri(x1,y1, x2,y2, x3,y3, border);\nself.tri(x2,y2, x3,y3, x4,y4, border);\n}\nvoid rect(num x1, num y1, num x2, num y2, num border) {\nself.quad(\nx1, y1,\nx1, y2,\nx2, y1,\nx2, y2,\nborder\n)\n}\nvoid square(num x, num y, num w, num h, num border) {\nhalfW = w / 2;\nhalfH = h / 2;\nself.quad(\nx - halfW, y - halfH,\nx - halfW, y + halfH,\nx + halfW, y - halfH,\nx + halfW, y + halfH,\nborder\n);\n}\nvoid icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use icon method on" + self.type + "surface");\n}\nvoid text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen text arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use text method on" + self.type + "surface");\n}\n\nvoid loadFontFromUrl(str url) {\nif (self.type == "pen") {\nraw("pen loadfonturl arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontFromUrl method on" + self.type + "surface");\n}\nvoid loadFontData(Obj<str> data) {\nif (self.type == "pen") {\nraw("pen loadfontdata arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontData method on" + self.type + "surface");\n}\n\nvoid setColor(str color) {\nif (self.type == "pen") {\nraw("pen color arg1");\nreturn;\n}\n\nio:throw("cannot use setColor method on" + self.type + "surface");\n}\n}
// struct_def: struct Display {\nSurface surface;\n\nvoid constructor(Frame frame) {\nself.surface = new Surface("pen", frame);\n}\n}
// struct_def: struct GraphicsState {\nSurface drawSurface;\nArr<Display> displays;\n\nvoid constructor() {\nself.newDisplay(getDefaultFrame());\nself.drawSurface = new Surface();\n}\n\nvoid newDisplay(Frame frame) {\nif (self?.displays) {\nself!.displays.append(new Display(frame));\n} else {\nself.displays = [new Display(frame)];\n}\n}\nvoid clearDisplays() {\nself.displays = [];\n}\n}
// struct_def: struct Icon {\nstr color;\nstr kind = "icn";\nstr type;\nstr data = "";\n\nvoid draw(Surface surface, num x, num y, num size) {\nif (self.kind == "icn") {\nsurface.icon(self.data, size, x, y);\n}\n}\n}
// function: void initState(State state, GraphicsState graphicsState) {\nif (state.type == "terminal") {\nterminal:init(state, graphicsState);\n}\nif (state.type == "desktop") {\ndesktop:init(state, graphicsState);\n}\n}
// function: void updateState(State state, GraphicsState graphicsState) {\nstate.time.updateFrame();\nif (state.wait > 0) {\nstate.wait --;\n} else {\nif (state.needsInit) {\nstate.needsInit = false;\ninitState(state, graphicsState);\n}\nif (state.type == "terminal") {\nterminal:update(state, graphicsState);\n} else (state.type == "desktop") {\ndesktop:update(state, graphicsState);\n}\n}\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: num sin(num deg) { return raw("sin .target arg0") }
// function: num cos(num deg) { return raw("cos .target arg0") }
// function: num tan(num deg) { return raw("tan .target arg0") }
// function: num round(num deg) { return raw("round .target arg0") }
// function: num floor(num deg) { return raw("floor .target arg0") }
// function: num ceiling(num deg) { return raw("ceiling .target arg0") }
// function: num lerp(num a, num b, num t) { return b - a * t + a }
// function: num mid(num a, num b) { return a + b / 2 }
// struct_def: struct Frame {\nnum x1;\nnum y1;\nnum x2;\nnum y2;\n\nvoid constructor(num x1, num y1, num x2, num y2) {\nself.x1 = x1;\nself.y1 = y1;\nself.x2 = x2;\nself.y2 = y2;\n}\n\nnum getX() { return math:mid(self.x1,self.x2) }\nnum getY() { return math:mid(self.y1,self.y2) }\nnum getW() { return self.x2 - self.x1 }\nnum getH() { return self.y2 - self.y1 }\n\nArr<num:2> getTL() { return [self.x1,self.y2] }\nArr<num:2> getT() { return [self.getX(),self.y2] }\nArr<num:2> getTR() { return [self.x2,self.y2] }\nArr<num:2> getL() { return [self.x1,self.getY()] }\nArr<num:2> getM() { return [self.getX(),self.getY()] }\nArr<num:2> getR() { return [self.x2,self.getY()] }\nArr<num:2> getBL() { return [self.x1,self.y1] }\nArr<num:2> getB() { return [self.getX(),self.y1] }\nArr<num:2> getBR() { return [self.x2,self.y1] }\n\nstr toString() {\nreturn "Frame{" ++ self.x1 ~++ self.y1 + "to" + self.x2 ~++ self.y2 ++ "}"\n}\n}
// function: Frame getDefaultFrame() {\nscreenSize = io:getScreenSize();\nreturn new Frame(screenSize[0] * -.5, screenSize[1] * -.5, screenSize[0] * .5, screenSize[1] * .5);\n}
// function: Frame cloneFrame(Frame original) {\nreturn new Frame(original.x1, original.y1, original.x2, original.y2);\n}
// struct_def: struct Surface {\nstr type;\nFrame frame;\n\nvoid constructor(str type = "pen", Frame frame = getDefaultFrame()) {\nself.type = type;\nself.frame = frame;\n}\n\nvoid clear() {\nif (self.type == "pen") {\nraw("pen clear");\nreturn;\n}\n\nio:throw("cannot use clear method on" + self.type + "surface");\n}\nvoid line(num x1, num y1, num x2, num y2, num w) {\nif (self.type == "pen") {\nraw("drawCursor goto arg1 arg2\npen size arg5\npen down\ndrawCursor goto arg3 arg4\npen up");\nreturn;\n}\n\nio:throw("cannot use line method on" + self.type + "surface");\n}\n\nvoid path(Arr<Arr<num:2>> points, num w, bool loop = false) {\nnum len = points.length;\nif (!loop) {\nlen -= 1;\n}\nfor (i, len) {\nArr<num:2> point = points[i];\nArr<num:2> npoint = points[i + 1 % points.length];\nself.line(point[0], point[1], npoint[0], npoint[1], w);\n}\n}\nvoid tri(num x1, num y1, num x2, num y2, num x3, num y3, num border) {\nif (self.type == "pen") {\nraw("pen tri arg1 arg2 arg3 arg4 arg5 arg6 arg7");\nreturn;\n}\n\nio:throw("cannot use tri method on" + self.type + "surface");\n}\nvoid quad(num x1, num y1, num x2, num y2, num x3, num y3, num x4, num y4, num border) {\n\nself.tri(x1,y1, x2,y2, x3,y3, border);\nself.tri(x2,y2, x3,y3, x4,y4, border);\n}\nvoid rect(num x1, num y1, num x2, num y2, num border) {\nself.quad(\nx1, y1,\nx1, y2,\nx2, y1,\nx2, y2,\nborder\n)\n}\nvoid square(num x, num y, num w, num h, num border) {\nhalfW = w / 2;\nhalfH = h / 2;\nself.quad(\nx - halfW, y - halfH,\nx - halfW, y + halfH,\nx + halfW, y - halfH,\nx + halfW, y + halfH,\nborder\n);\n}\nvoid icon(str code, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen icn arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use icon method on" + self.type + "surface");\n}\nvoid text(str txt, num size, num x, num y, num direction = 90, num boldness = 0) {\nif (self.type == "pen") {\nraw("pen text arg1 arg2 arg3 arg4 arg5 arg6");\nreturn;\n}\n\nio:throw("cannot use text method on" + self.type + "surface");\n}\n\nvoid loadFontFromUrl(str url) {\nif (self.type == "pen") {\nraw("pen loadfonturl arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontFromUrl method on" + self.type + "surface");\n}\nvoid loadFontData(Obj<str> data) {\nif (self.type == "pen") {\nraw("pen loadfontdata arg1");\nreturn;\n}\n\nio:throw("cannot use loadFontData method on" + self.type + "surface");\n}\n\nvoid setColor(str color) {\nif (self.type == "pen") {\nraw("pen color arg1");\nreturn;\n}\n\nio:throw("cannot use setColor method on" + self.type + "surface");\n}\n}
// struct_def: struct Display {\nSurface surface;\n\nvoid constructor(Frame frame) {\nself.surface = new Surface("pen", frame);\n}\n}
// struct_def: struct GraphicsState {\nSurface drawSurface;\nArr<Display> displays;\n\nvoid constructor() {\nself.newDisplay(getDefaultFrame());\nself.drawSurface = new Surface();\n}\n\nvoid newDisplay(Frame frame) {\nif (self?.displays) {\nself!.displays.append(new Display(frame));\n} else {\nself.displays = [new Display(frame)];\n}\n}\nvoid clearDisplays() {\nself.displays = [];\n}\n}
// struct_def: struct Icon {\nstr color;\nstr kind = "icn";\nstr type;\nstr data = "";\n\nvoid draw(Surface surface, num x, num y, num size) {\nif (self.kind == "icn") {\nsurface.icon(self.data, size, x, y);\n}\n}\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// auto_function: auto getGlobal<type>(str id, bool safe = true) {\ntype data = raw("globalget .target arg1");\nif (data == null) {\nio:throw("global" + id + "doesnt exist");\n}\nType dataType = typeof data;\nif (dataType != type && safe) {\nio:throw("global is" + dataType.toString() + "not" + type.toString());\n}\nreturn data;\n}
// auto_function: auto setGlobal<type>(str id, type data) {\nraw("globalset arg1 arg2");\nreturn data;\n}
// function: bool hasGlobal(str id) {\ndata = raw("globalget .target arg1");\nreturn data != null;\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: Arr<str> splitFilePath(str string) {\nnum i = 0;\nwhile ((str char = string[i]) != "/" && i < string.length) { i ++; }\nstr volume = string.slice(0,i);\n\nnum pathI = string.length - 1;\nwhile ((str char = string[pathI]) != "/" && pathI > 0) { pathI --; }\nstr path = string.slice(i+1, pathI);\n\nnum typeI = string.length - 1;\nwhile ((str char = string[typeI]) != "." && typeI > 0) { typeI --; }\n\nif (typeI != 0) {\nstr type = string.slice(typeI+1);\n\nstr name = string.slice(pathI+1, typeI);\n\nreturn [volume, path, name, type];\n} else {\nio:throw("invalid file path");\n}\nreturn [];\n}
// struct_def: struct FilePath {\nstr volumeName;\nstr path;\nstr name;\nstr type;\n\nvoid constructor(str path) {\nArr<str> tokens = splitFilePath(path);\nself.volumeName = tokens[0];\nself.path = tokens[1];\nself.name = tokens[2];\nself.type = tokens[3];\n}\n\nstr toString() {\nreturn self.volumeName ++ "/" ++ self.path ++ "/" ++ self.name ++ "." ++ self.type;\n}\n}
// struct_def: struct Volume {\nstr source;\n\nvoid constructor(str source) {\nif (!["flf"].contains(source)) {\nio:throw("unknown volume source" + source);\n}\nself.source = source;\n}\n\nstr readText(FilePath path) {\nif (self.source == "flf") {\nread = str(str _) {\nreturn raw("fs get .target arg0");\n}\nstr data = read(path.toString());\nreturn data;\n}\nio:throw("cannot read from source of type" + self.source);\nreturn "";\n}\n}
// struct_def: struct FileSystem {\nObj<Volume> volumes = {};\n\nvoid addVolume(str name, Volume volume) {\nif (self.volumes.keys().contains(name)) {\nio:throw("volume" + name + "already exists.");\n}\nself.volumes[name] = volume;\n}\n}
// struct_def: struct FileHandle {\nFilePath path;\nFileSystem system;\n\nvoid constructor(FilePath path, FileSystem system) {\nself.path = path;\nself.system = system;\n}\n\nstr readText() {\nstr volumeName = self.path.volumeName;\nif (self.system.volumes.keys().contains(volumeName)) {\nVolume volume = self.system.volumes[volumeName];\nreturn volume.readText(self.path);\n} else {\nio:throw("unknown volume" + volumeName);\n}\nreturn "";\n}\n}
// function: FileHandle open(str path) {\nreturn new FileHandle(new FilePath(path), globals:getGlobal<FileSystem>("fs", false));\n}
// function: void init() {\nFileSystem fs = new FileSystem();\nglobals:setGlobal<FileSystem>("fs", fs);\n\nfs.addVolume("sys", new Volume("flf"));\n}
// function: void throw(str text) {\nraw("err arg0");\n}
// function: Arr<num:2> getScreenSize() {\nnum width = raw("const screen_width .target");\nnum height = raw("const screen_height .target");\nreturn [width, height];\n}
// function: num getCurrentMs() {\nreturn raw("const ms .target");\n}
// function: void main() {\nfs:init();\n\nstate = state:getDefault();\ngraphicsState = new GraphicsState();\nstateManager:initState(state, graphicsState);\nforever {\nstate.inputState.update();\nstateManager:updateState(state, graphicsState);\n}\n}
