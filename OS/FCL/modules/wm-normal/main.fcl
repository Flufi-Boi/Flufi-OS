import graphics, state, window;

void updateButtons(Theme theme, Frame buttonFrame, Window win, Surface surface, Obj<num> miscData) {
    num gap = miscData["buttonGap"];

    num size = miscData["topbarHeight"] - miscData["borderRadius"];
    num realSize = miscData["buttonSize"];
    num space = size + gap;

    x = buttonFrame.x2 - (size / 2);
    y = buttonFrame.getY();

    buttons = win.buttons;
    for (i, buttons.length) {
        buttons[i].update(x, y, realSize, theme, win, surface);
        x -= space;
    }
}

num getButtonWidthX(num right, Window win, Obj<num> miscData) {
    num size = miscData["topbarHeight"] - miscData["borderRadius"];
    num realSize = miscData["buttonSize"];
    num gap = miscData["buttonGap"];
    num space = size + gap;

    x = right - (size / 2);

    x -= win.buttons.length - 1 * space + size - 1.5;

    return x;
}

void updateTopbar(Theme theme, Frame winFrame, Window win, Surface surface, Obj<num> miscData) {
    num borderRad = miscData["borderRadius"];
    num height = miscData["topbarHeight"];
    num textSize = 10;

    Frame topbarFrame = graphics:cloneFrame(winFrame);
    topbarFrame.y1 = topbarFrame.y2 - height + borderRad;

    num buttonSize = miscData["buttonSize"];
    num buttonsX = getButtonWidthX(topbarFrame.x2, win, miscData);
    

    surface.setColor(theme.primary);
    surface.rect(topbarFrame.x1, topbarFrame.y1, topbarFrame.x2, topbarFrame.y2, borderRad);

    Frame titleFrame = graphics:cloneFrame(topbarFrame);
    titleFrame.x2 = buttonsX;

    /*
    surface.setColor("#f00");
    surface.path([
        [topbarFrame.x1, topbarFrame.y1],
        [topbarFrame.x2, topbarFrame.y1],
        [topbarFrame.x2, topbarFrame.y2],
        [topbarFrame.x1, topbarFrame.y2]
    ], 1, true);
    surface.setColor("#0f0");
    surface.path([
        [titleFrame.x1, titleFrame.y1],
        [titleFrame.x2, titleFrame.y1],
        [titleFrame.x2, titleFrame.y2],
        [titleFrame.x1, titleFrame.y2]
    ], 1, true);
    */

    // title
    surface.setColor(theme.text);
    surface.text(win.title, textSize, titleFrame.getX() - (win.title.length * textSize * .5), titleFrame.getY() - 6.5);

    // seperator
    surface.setColor(theme.secondary);
    surface.path([
        [ titleFrame.x2, titleFrame.y1 - half borderRad + 5 ],
        [ titleFrame.x2, titleFrame.y2 + half borderRad - 5 ],
    ], 2);

    // buttons
    Frame buttonFrame = graphics:cloneFrame(topbarFrame);
    buttonFrame.x1 = titleFrame.x2;
    updateButtons(theme, buttonFrame, win, surface, miscData);
}

void main(State state, GraphicsState graphicsState, Obj<Window> windows) {
    forever {
        Surface surface = graphicsState!.drawSurface;
        Theme theme = state.config.theme;
        
        surface.clear();
        
        num borderRadius = 15; // 15
        num borderThickness = 5; // 5
        
        num topbarHeight = 35; // 35
        num buttonSize = 13.5; // 13.5
        num buttonGap = 5;

        Arr<str> winKeys = windows.keys();
        for (i, winKeys.length) {
            str winKey = winKeys[i];
            Window win = windows[winKey];
            WindowRenderSettings settings = win.renderSettings;
            Frame frame = win.frame;
            win.contentFrame = graphics:cloneFrame(win.frame);
            win.contentFrame.y2 -= topbarHeight;
            
            if (settings.renderBase) {
                surface.setColor(theme.accent);
                surface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius + borderThickness);
                surface.setColor(theme.background);
                surface.rect(frame.x1, frame.y1, frame.x2, frame.y2, borderRadius);
            }

            // content tester
            //surface.rect(win.contentFrame.x1, win.contentFrame.y1, win.contentFrame.x2, win.contentFrame.y2, 1);
            
            if (settings.renderMenuBar) {
                updateTopbar(theme, frame, win, surface, {
                    topbarHeight,
                    borderRadius,
                    buttonSize,
                    buttonGap
                });
            }
        }
    }
}